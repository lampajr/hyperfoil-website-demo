<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>How To on Hyperfoil</title><link>https://lampajr.github.io/hyperfoil-website-demo/docs/howtos/</link><description>Recent content in How To on Hyperfoil</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://lampajr.github.io/hyperfoil-website-demo/docs/howtos/index.xml" rel="self" type="application/rss+xml"/><item><title>Benchmark schema support</title><link>https://lampajr.github.io/hyperfoil-website-demo/docs/howtos/editor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lampajr.github.io/hyperfoil-website-demo/docs/howtos/editor/</guid><description>For your convenience we recommend using editor with YAML validation against JSON schema; you can point your editor to docs/schema.json. We can recommend Visual Studio Code with redhat.vscode-yaml plugin.
You need to edit settings file to map benchmark configuration files (with .hf.yaml extension) to the schema, adding:
&amp;#34;yaml.schemas&amp;#34; : { &amp;#34;file:///path/to/hyperfoil-distribution/docs/schema.json&amp;#34; : &amp;#34;/*.hf.yaml&amp;#34; }, Note that you can also directly point to the hosted JSON schema definition:
&amp;#34;yaml.schemas&amp;#34; : { &amp;#34;https://hyperfoil.</description></item><item><title>Using credentials</title><link>https://lampajr.github.io/hyperfoil-website-demo/docs/howtos/credentials/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lampajr.github.io/hyperfoil-website-demo/docs/howtos/credentials/</guid><description>Hyperfoil benchmarks can refer to external files. When you use the upload command in CLI the files are automatically attached the the benchmark YAML (relative paths are resolved relative to this file). Later on when editing the file you can choose to re-upload some of these. Once the benchmark is built the files are loaded to the in-memory representation - Hyperfoil won&amp;rsquo;t access these files during runtime. With clustered benchmarks these files don&amp;rsquo;t need to be on the agents either - the controller sends serialized in-memory representation to the agents and that contains everything needed for the actual execution.</description></item></channel></rss>