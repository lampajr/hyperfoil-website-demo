<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>benchmark on Hyperfoil</title><link>https://lampajr.github.io/hyperfoil-website-demo/tags/benchmark/</link><description>Recent content in benchmark on Hyperfoil</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://lampajr.github.io/hyperfoil-website-demo/tags/benchmark/index.xml" rel="self" type="application/rss+xml"/><item><title>Agents</title><link>https://lampajr.github.io/hyperfoil-website-demo/docs/user-guide/benchmark/agents/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lampajr.github.io/hyperfoil-website-demo/docs/user-guide/benchmark/agents/</guid><description>This section can be omitted in standalone mode.
Agents section forms either a list or map with arbitrary agent names and either an inline or properties-style definition:
agents: someAgent: &amp;#34;inline definition&amp;#34; otherAgent: foo: bar The definition is passed to an instance of i.h.api.deployment.Deployer which will interpret the definition. Deployer implementation is registred using the java.util.ServiceLoader and selected through the io.hyperfoil.deployer system property. The default implementation is ssh.
Common properties Property Default Description threads from benchmark Number of threads used by the agent (overrides threads in benchmark root).</description></item><item><title>First benchmark</title><link>https://lampajr.github.io/hyperfoil-website-demo/docs/getting-started/quickstart1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lampajr.github.io/hyperfoil-website-demo/docs/getting-started/quickstart1/</guid><description>1. Download latest release and unpack it wget {{ site.last_release.url }} \ &amp;amp;&amp;amp; unzip {{ site.last_release.zip }} \ &amp;amp;&amp;amp; cd {{ site.last_release.dir }} 2. Start Hyperfoil in interactive mode (CLI) bin/cli.sh For our first benchmark we&amp;rsquo;ll start an embedded server (controller) within the CLI:
[hyperfoil]$ start-local Starting controller in default directory (/tmp/hyperfoil) Controller started, listening on 127.0.0.1:41621 Connecting to the controller... Connected! 3. Upload the minimalistic benchmark and run it As you can see below, the benchmark is really minimalistic as it is doing only single request to http://hyperfoil.</description></item><item><title>Benchmark</title><link>https://lampajr.github.io/hyperfoil-website-demo/docs/user-guide/benchmark/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lampajr.github.io/hyperfoil-website-demo/docs/user-guide/benchmark/</guid><description>In Hyperfoil, defining a benchmark involves structuring scenarios, phases, variables and other components to simulate realistic user behavior and workload patterns. This section provides a detailed breakdown of each component involved in defining a benchmark.</description></item><item><title>HTTP</title><link>https://lampajr.github.io/hyperfoil-website-demo/docs/user-guide/benchmark/http/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lampajr.github.io/hyperfoil-website-demo/docs/user-guide/benchmark/http/</guid><description>All servers that Hyperfoil should contact must be declared in this section. Before the benchmark starts Hyperfoil agents will open connections to the target servers; if this connection fails the benchmark is terminated immediatelly.
You can either declare single target server (the default one) within this section or more of them:
http: host: http://example.com ... http: - host: http://example.com sharedConnections: 100 - host: http://example.com:8080 sharedConnections: 50 HTTP configuration has these properties:</description></item><item><title>Phases</title><link>https://lampajr.github.io/hyperfoil-website-demo/docs/user-guide/benchmark/phases/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lampajr.github.io/hyperfoil-website-demo/docs/user-guide/benchmark/phases/</guid><description>You might want to simulate several types of workloads at once: e.g. in an eshop users would come browsing or buying products, and operators would restock the virtual warehouse. Also, driving constant load may not be the best way to run the benchmark: often you want to slowly ramp the load up to let the system adjust (scale up, perform JIT, fill pools) and push the full load only after that.</description></item><item><title>Scenario</title><link>https://lampajr.github.io/hyperfoil-website-demo/docs/user-guide/benchmark/scenario/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lampajr.github.io/hyperfoil-website-demo/docs/user-guide/benchmark/scenario/</guid><description>Scenario Scenario is a set of sequences. The sequence is a block of sequentially executed steps. Contrary to steps in a sequence the sequences within a scenario do not need to be executed sequentially.
The scenario defines one or more initialSequences that are enabled from the beginning and other sequences that must be enabled by any of the previously executed sequences. To be more precise it is not the sequence that is enabled but a sequence instance as we can run a sequence multiple times in parallel (on different data).</description></item><item><title>Variables</title><link>https://lampajr.github.io/hyperfoil-website-demo/docs/user-guide/benchmark/variables/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lampajr.github.io/hyperfoil-website-demo/docs/user-guide/benchmark/variables/</guid><description>All but the simplest scenarios will use session variables. Hyperfoil sports steps that generate values into these variables (randomInt, randomItem, &amp;hellip;), processors that write data from other sources to variables (store, array) and many places that read variables and use the values to perform some operations (httpRequest.path ) or alter control flow.
Hyperfoil uses different types of variables (slots in the session) for integer variables and generic objects (commonly strings). When a numeric value is received as a string (e.</description></item><item><title>Templates</title><link>https://lampajr.github.io/hyperfoil-website-demo/docs/user-guide/benchmark/templates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lampajr.github.io/hyperfoil-website-demo/docs/user-guide/benchmark/templates/</guid><description>It is often useful to keep a single benchmark in version control but change parts of it depending on the infrastructure where it is executed or intended load. Since version 0.18 Hyperfoil supports parametrization of the benchmark through templates.
Inspired by other (more complex) YAML templating systems we decided to use YAML tags to pre-process the YAML. Templating happens even before applying the YAML nodes onto BenchmarkBuilder, therefore it is not possible to do that programmatically or with the serialized form.</description></item><item><title>Hooks</title><link>https://lampajr.github.io/hyperfoil-website-demo/docs/user-guide/benchmark/hooks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lampajr.github.io/hyperfoil-website-demo/docs/user-guide/benchmark/hooks/</guid><description>It might be useful to run certain scripts before and after the run, e.g. starting some infrastructure, preloading database, gathering CPU stats during the test and so on. That&amp;rsquo;s why Hyperfoil introduces pre- and post-hooks to the run.
Some scripts are not specific to the test being run - these should be deployed on controller as files in *root*/hooks/pre/ and *root*/hooks/post directories where root is controller&amp;rsquo;s root directory, /tmp/hyperfoil/ by default.</description></item><item><title>Ergonomics</title><link>https://lampajr.github.io/hyperfoil-website-demo/docs/user-guide/benchmark/ergonomics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lampajr.github.io/hyperfoil-website-demo/docs/user-guide/benchmark/ergonomics/</guid><description>This section hosts only single property at this moment:
Property Default Description repeatCookies true Automatically parse cookies from HTTP responses, store them in session and resend them with subsequent requests. userAgentFromSession true Add user-agent header to each request, holding the agent name and session id. autoRangeCheck true Mark 4xx and 5xx responses as invalid. You can also turn this off in each step. stopOnInvalid true When the session receives an invalid response it does not execute any further steps, cancelling all requests and stopping immediately.</description></item></channel></rss>