<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>server on Hyperfoil</title><link>https://lampajr.github.io/hyperfoil-website-demo/tags/server/</link><description>Recent content in server on Hyperfoil</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://lampajr.github.io/hyperfoil-website-demo/tags/server/index.xml" rel="self" type="application/rss+xml"/><item><title>Running the server</title><link>https://lampajr.github.io/hyperfoil-website-demo/docs/getting-started/quickstart6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lampajr.github.io/hyperfoil-website-demo/docs/getting-started/quickstart6/</guid><description>Until now we have always started our benchmarks using an embedded controller in the CLI, using the start-local command. This spawns a server in the CLI JVM. CLI communicates with it using standard REST API, though the server port is randomized and listens on localhost only. All the benchmarks and run results are also stored in /tmp/hyperfoil/ - you can change the directory as an argument to the start-local command. While the embedded controller might be convenient for a quick test or when developing the scenario it&amp;rsquo;s not something that you&amp;rsquo;d use for a full-fledged benchmark.</description></item><item><title>Clustered mode</title><link>https://lampajr.github.io/hyperfoil-website-demo/docs/getting-started/quickstart7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lampajr.github.io/hyperfoil-website-demo/docs/getting-started/quickstart7/</guid><description>Previously we&amp;rsquo;ve learned to start Hyperfoil in standalone server mode, and to do some runs through CLI. In this quickstart we&amp;rsquo;ll see how to run your benchmark distributed to several agent nodes.
Hyperfoil operates as a cluster of Vert.x. When the benchmark is started, it deploys agents on other nodes according to the benchmark configuration - these are Vert.x nodes, too. Together controller and agents form a cluster and communicate over the event bus.</description></item></channel></rss>