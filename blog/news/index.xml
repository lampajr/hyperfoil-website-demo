<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>News on Hyperfoil</title><link>https://lampajr.github.io/hyperfoil-website-demo/blog/news/</link><description>Recent content in News on Hyperfoil</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://lampajr.github.io/hyperfoil-website-demo/blog/news/index.xml" rel="self" type="application/rss+xml"/><item><title>Beginner's Guide to Hyperfoil: part 1</title><link>https://lampajr.github.io/hyperfoil-website-demo/blog/news/2021-01-25-hf-beginner-guide-1/</link><pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate><guid>https://lampajr.github.io/hyperfoil-website-demo/blog/news/2021-01-25-hf-beginner-guide-1/</guid><description>TLDR You&amp;rsquo;ll learn how to write a simple Hyperfoil benchmark and run it straight from the CLI.
This article is intended to be published on other sites, too - therefore it contains introduction to concepts this blog&amp;rsquo;s readers are probably familiar with.
Introduction Meet Hyperfoil, a swiss-army knife of web benchmark driver. This is an opensource (ASL2.0) tool that sports a set of properties that we could not find in any of the existing load drivers:</description></item><item><title>Beginner's Guide to Hyperfoil: part 2</title><link>https://lampajr.github.io/hyperfoil-website-demo/blog/news/2021-02-09-hf-beginner-guide-2/</link><pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate><guid>https://lampajr.github.io/hyperfoil-website-demo/blog/news/2021-02-09-hf-beginner-guide-2/</guid><description>This article is intended to be published on other sites, too - therefore it contains introduction to concepts this blogâ€™s readers are probably familiar with.
In the previous part we&amp;rsquo;ve deployed our demo application (Vehicle Market) and exercised some basic requests against that. In this post we will focus on processing responses and user workflow through the site.
Processing responses We will start with a benchmark that fetches single random page with an offering, without the HTML resources part for brevity:</description></item><item><title>Beginner's Guide to Hyperfoil: part 3</title><link>https://lampajr.github.io/hyperfoil-website-demo/blog/news/2021-02-16-hf-beginner-guide-3/</link><pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate><guid>https://lampajr.github.io/hyperfoil-website-demo/blog/news/2021-02-16-hf-beginner-guide-3/</guid><description>In this article we&amp;rsquo;ll show how to run Hyperfoil inside an Openshift cluster, benchmarking workload within the same cluster. This assumes that you have sufficient privileges to install operators and create new namespaces (projects).
Demo workload We will install Vehicle Market, our demo application we&amp;rsquo;ve used in the first article using console and Openshift Template.
Login into your cluster and run this:
# Fetch the default domain your cluster uses export DOMAIN=$(oc get ingresscontrollers.</description></item><item><title>Compensation for coordinated omission</title><link>https://lampajr.github.io/hyperfoil-website-demo/blog/news/2020-12-9-compensation/</link><pubDate>Wed, 09 Dec 2020 00:00:00 +0000</pubDate><guid>https://lampajr.github.io/hyperfoil-website-demo/blog/news/2020-12-9-compensation/</guid><description>Results for closed-model tests show maximum throughput your SUT can achieve; the response times are skewed though due to the coordinated omission. There are still cases where you&amp;rsquo;d like to run in this mode and check the size of the error you&amp;rsquo;re accumulating.
Many benchmarks use closed-model with fixed concurrency and cycle-time, expecting the request to be fired every X milliseconds. When the requests fall behind in schedule due to some requests taking more than this period (cycle-time) the subsequent requests are fired as quickly as possible to catch up.</description></item><item><title>Fetch embedded resources</title><link>https://lampajr.github.io/hyperfoil-website-demo/blog/news/2020-11-16-fetch-embedded/</link><pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate><guid>https://lampajr.github.io/hyperfoil-website-demo/blog/news/2020-11-16-fetch-embedded/</guid><description>When browsing a website it&amp;rsquo;s not only the main page the webserver needs to serve - usually there are static resources such as images, stylesheets, scripts and more. Hyperfoil can automatically download these.
Hyperfoil implements a non-allocating HTML parser, with a pre-baked onEmbeddedResource handler: This selects HTML tags with appropriate attributes that represent an URL:
Images: &amp;lt;img src=&amp;quot;...&amp;quot;&amp;gt; Stylesheets: &amp;lt;link href=&amp;quot;...&amp;quot;&amp;gt; Scripts: &amp;lt;script src=&amp;quot;...&amp;quot;&amp;gt; Embedded media: &amp;lt;embed src=&amp;quot;...&amp;quot;&amp;gt;, &amp;lt;object data=&amp;quot;...&amp;quot;&amp;gt; Frames: &amp;lt;frame src=&amp;quot;.</description></item><item><title>Automatic follow of redirects</title><link>https://lampajr.github.io/hyperfoil-website-demo/blog/news/2020-11-16-follow-redirect/</link><pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate><guid>https://lampajr.github.io/hyperfoil-website-demo/blog/news/2020-11-16-follow-redirect/</guid><description>Hyperfoil is trying to imitate how users will hit your site with requests as realistically as possible. Therefore it supports one of the browser features: redirections.
There are two ways how webservers tell browsers where to fetch another page: HTTP-level redirects where the server returns status 3xx and the new URL in the Location header, and HTML with &amp;lt;meta http-equiv=&amp;quot;refresh&amp;quot; content=&amp;quot;5; url=http://example.com&amp;quot; /&amp;gt;. The webpage can also use Javascript to switch to another page but Hyperfoil is not interpretting any Javascript.</description></item></channel></rss>