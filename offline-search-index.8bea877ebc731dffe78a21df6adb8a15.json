[{"body":"This section can be omitted in standalone mode.\nAgents section forms either a list or map with arbitrary agent names and either an inline or properties-style definition:\nagents: someAgent: \"inline definition\" otherAgent: foo: bar The definition is passed to an instance of i.h.api.deployment.Deployer which will interpret the definition. Deployer implementation is registred using the java.util.ServiceLoader and selected through the io.hyperfoil.deployer system property. The default implementation is ssh.\nCommon properties Property Default Description threads from benchmark Number of threads used by the agent (overrides threads in benchmark root). extras Custom options passed to the JVM (system properties, JVM options…) SSH deployer The user account running Hyperfoil Controller must have a public-key authorization set up on agents’ hosts using key $HOME/.ssh/id_rsa. It also has to be able to copy files into the dir directory using SCP - all the required JARs will be copied there and you will find the logs there as well.\nssh deployer accepts either the [user@]host[:port] inline syntax or these properties:\nProperty Default Description user Current username host This property is mandatory. port 22 sshKey id_rsa Optionally define a different named key in the $HOME/.ssh directory dir Directory set by system property io.hyperfoil.rootdir or /tmp/hyperfoil Working directory for the agent. This directory can be shared by multiple agents running on the same physical machine. cpu (all cpus) If set the CPUs where the agent can run is limited using taskset -c \u0026lt;cpu\u0026gt;. Example: 0-2,6 See an example of ssh deployment configuration:\nagents: agent1: testserver1:22 agent2: testuser@testserver2 agent3: host: testserver3 port: 22 dir: /some/other/path Kubernetes/Openshift deployer To activate the kubernetes deployer you should set -Dio.hyperfoil.deployer=k8s; the recommended installation does that automatically.\nThe agents are configured the same way as with SSH deployment, only the properties differ. Full reference is provided below.\nExample:\nagents: my-agent: node: my-worker-node Property Default Description node Configures the labels for the nodeSelector. If the value does not contain equals sign (=) or comma (,) this sets the desired value of label kubernetes.io/hostname. You can also set multiple custom labels separated by commas, e.g. foo=bar,kubernetes.io/os=linux. stop true By default the controller stops all agents immediatelly after the run terminates. In case of errors this is not too convenient as you might want to perform further analysis. To prevent automatic agent shutdown set this to false. log Name of config map (e.g. my-config-map) or config map and its entry (e.g. my-config-map/log4j2.xml) that contains the Log4j2 configuration file. Default entry from the config map is log4j2.xml. Hyperfoil will mount this configmap as a volume to this agent. image quay.io/hyperfoil/hyperfoil:controller-version Different version of Hyperfoil in the agents imagePullPolicy Always Image pull policy for agents fetchLogs true Automatically watch agents’ logs and store them in the run directory. ","categories":["Guide","Benchmark"],"description":"Entities responsible for executing benchmark and collecting statistics","excerpt":"Entities responsible for executing benchmark and collecting statistics","ref":"/hyperfoil-website-demo/docs/user-guide/benchmark/agents/","tags":["guides","benchmark","agents"],"title":"Agents"},{"body":"For your convenience we recommend using editor with YAML validation against JSON schema; you can point your editor to docs/schema.json. We can recommend Visual Studio Code with redhat.vscode-yaml plugin.\nYou need to edit settings file to map benchmark configuration files (with .hf.yaml extension) to the schema, adding:\n\"yaml.schemas\" : { \"file:///path/to/hyperfoil-distribution/docs/schema.json\" : \"/*.hf.yaml\" }, Note that you can also directly point to the hosted JSON schema definition:\n\"yaml.schemas\" : { \"https://hyperfoil.io/schema.json\" : \"/*.hf.yaml\" }, ","categories":["HowTo"],"description":"How to make your life easier while building your own benchmarks","excerpt":"How to make your life easier while building your own benchmarks","ref":"/hyperfoil-website-demo/docs/howtos/editor/","tags":["how-to","guides","editor","json-schema"],"title":"Benchmark schema support"},{"body":"1. Download latest release and unpack it wget {{ site.last_release.url }} \\ \u0026\u0026 unzip {{ site.last_release.zip }} \\ \u0026\u0026 cd {{ site.last_release.dir }} 2. Start Hyperfoil in interactive mode (CLI) bin/cli.sh For our first benchmark we’ll start an embedded server (controller) within the CLI:\n[hyperfoil]$ start-local Starting controller in default directory (/tmp/hyperfoil) Controller started, listening on 127.0.0.1:41621 Connecting to the controller... Connected! 3. Upload the minimalistic benchmark and run it As you can see below, the benchmark is really minimalistic as it is doing only single request to http://hyperfoil.io.\n# This is the name of the benchmark. It's recommended to keep this in sync with # name of this file, adding extension `.hf.yaml`. name: single-request # We must define at least one HTTP target, in this case it becomes a default # for all HTTP requests. http: host: http://hyperfoil.io # Simulation consists of phases - potentially independent workloads. # We'll discuss phases more in detail in next quickstarts. phases: # `example` is the name of the single phase in this benchmark. - example: # `atOnce` with `users: 1` results in running the scenario below just once atOnce: users: 1 scenario: # The only sequence in this scenario is called `test`. - test: # In the only step in this sequence we'll do a HTTP GET request # to `http://hyperfoil.io/` - httpRequest: GET: / # Inject helpers to make this request synchronous, i.e. keep # the sequence blocked until Hyperfoil processes the response. sync: true Create the same benchmark in your local environment or download it. After that, upload it using the upload command as follow:\n[hyperfoil@in-vm]$ upload .../single-request.hf.yaml Loaded benchmark single-request, uploading... ... done. [hyperfoil@in-vm]$ run single-request Started run 0001 Run 0001, benchmark single-request Agents: in-vm[STARTING] Started: 2019/11/15 16:11:43.725 Terminated: 2019/11/15 16:11:43.899 \u003cspan class=\"hfcaption\"\u003eNAME STATUS STARTED REMAINING COMPLETED TOTAL DURATION DESCRIPTION example TERMINATED 16:11:43.725 16:11:43.899 174 ms (exceeded by 174 ms) 1 users at once 4. Check out performance results: [hyperfoil@in-vm]$ stats Total stats from run 000A \u003cspan class=\"hfcaption\"\u003ePHASE METRIC REQUESTS MEAN p50 p90 p99 p99.9 p99.99 2xx 3xx 4xx 5xx CACHE TIMEOUTS ERRORS BLOCKED example test 1 172.49 ms 173.02 ms 173.02 ms 173.02 ms 173.02 ms 173.02 ms 0 1 0 0 0 0 0 0 ns Doing one request is not much of a benchmark and the statistics above are moot, but hey, this is a quickstart.\nIn the future you might find editing with schema useful but at this point any editor with YAML syntax highlighting will do the job.\nReady? Let’s continue with something a bit more realistic…\n","categories":["Quickstart"],"description":"Download, set up, and run your first Hyperfoil benchmark","excerpt":"Download, set up, and run your first Hyperfoil benchmark","ref":"/hyperfoil-website-demo/docs/getting-started/quickstart1/","tags":["quickstart","benchmark"],"title":"First benchmark"},{"body":"In this section, you’ll find detailed instructions for installing and setting up Hyperfoil using various methods, including manual setup, Ansible, and Kubernetes/Openshift. Follow these guides to choose the best installation procedure for your environment.\n","categories":["Guide","Installation"],"description":"Detailed instructions for installing Hyperfoil manually, on Kubernetes/Openshift, or with Ansible.","excerpt":"Detailed instructions for installing Hyperfoil manually, on …","ref":"/hyperfoil-website-demo/docs/user-guide/installation/","tags":["guides","installation"],"title":"Installation"},{"body":"Hyperfoil controller is started with\nbin/controller.sh Any arguments passed to the scripts will be passed as-is to the java process.\nBy default io.hyperfoil.deployer is set to ssh which means that the controller will deploy agents over SSH, based on the agents configurion. This requires that the user account running the controller must have public-key SSH authorization set up using key $HOME/.ssh/id_rsa. The user also has to be able to copy files to the directory set in agent definition (by default /tmp/hyperfoil) using SCP - Hyperfoil automatically synchronizes library files in this folder with the currently running instance and then executes the agent.\nWhen you don’t intend to run distributed benchmarks you can start the controller in standalone mode:\nbin/standalone.sh This variant won’t deploy any agents remotely and therefore it does not need any agents: section in the benchmark definition; instead it will use single agent started in the same JVM.\nBelow is the comprehensive list of all the properties Hyperfoil recognizes. All system properties can be replaced by environment variables, uppercasing the letters and replacing dots and dashes with underscores: e.g. io.hyperfoil.controller.host becomes IO_HYPERFOIL_CONTROLLER_HOST.\nProperty Default Description io.hyperfoil.controller.host 0.0.0.0 Host for Controller REST server io.hyperfoil.controller.port 8090 Port for Controller REST server io.hyperfoil.rootdir /tmp/hyperfoil Root directory for stored files io.hyperfoil.benchmarkdir root/benchmark Benchmark files (YAML and serialized) io.hyperfoil.rundir root/run Run result files (configs, stats…) io.hyperfoil.deployer ssh Implementation for agents deployment io.hyperfoil.deployer.timeout 15000 ms Timeout for agents to start io.hyperfoil.agent.debug.port If set, agent will be started with JVM debug port open io.hyperfoil.agent.debug.suspend n Suspend parameter for the debug port io.hyperfoil.controller.cluster.ip first non-loopback Hostname/IP used for clustering with agents io.hyperfoil.controller.cluster.port 7800 Default JGroups clustering port io.hyperfoil.controller.external.uri Externally advertised URI of REST server io.hyperfoil.controller.keystore.path File path to Java Keystore io.hyperfoil.controller.keystore.password Java Keystore password io.hyperfoil.controller.pem.keys File path(s) to private TLS key(s) in PEM format io.hyperfoil.controller.pem.certs File path(s) to server TLS certificate(s) in PEM format io.hyperfoil.controller.password Password used for Basic authentication io.hyperfoil.controller.secured.via.proxy This must be set to true for Basic auth without TLS encryption io.hyperfoil.trigger.url See below If io.hyperfoi.trigger.url is set the controller does not start benchmark run right away after hitting /benchmark/my-benchmark/start ; instead it responds with status 301 and header Location set to concatenation of this string and BENCHMARK=my-benchmark\u0026RUN_ID=xxxx. CLI interprets that response as a request to hit CI instance on this URL, assuming that CI will trigger a new job that will eventually call /benchmark/my-benchmark/start?runId=xxxx with header x-trigger-job. This is useful if the the CI has to synchronize Hyperfoil to other benchmarks that don’t use this controller instance.\nSecurity Since Hyperfoil accepts and invoked any serialized Java objects you must not run it exposed to public to prevent a very simple remote code execution. Even if using HTTPS and password protection (see below) we recommend to limit access and privileges of the process to absolute minimum.\nYou can get confidential access to the server using TLS encryption, providing the certificate and keys either using Java Keystore mechanism (properties above starting with io.hyperfoil.controller.keystore) or via PEM files (properties starting with io.hyperfoil.controller.pem). These options are mutually exclusive. In the latter case it is possible to use multiple certificate/key files, separated by comma (,).\nAuthentication uses Basic authentication scheme accepting any string as username. The password is set using io.hyperfoil.controller.password or respective environment variable. If you’re exposing the server using plaintext HTTP you must set -Dio.hyperfoil.controller.secured.via.proxy=true to confirm that this is a desired configuration (e.g. if the TLS is terminated at proxy and the connection from proxy does not require confidentiality).\n","categories":["Guide","Installation"],"description":"Explore manual startup options for the Hyperfoil controller.","excerpt":"Explore manual startup options for the Hyperfoil controller.","ref":"/hyperfoil-website-demo/docs/user-guide/installation/start_manual/","tags":["guides","installation","manual"],"title":"Manual startup"},{"body":"Both Will Glozer’s wrk and Gil Tene’s wrk2 are great tools but maybe you’ve realized that you need more functionalities, need to hit more endpoints in parallel or simply have to scale horizontally to more nodes. Hyperfoil offers an adapter that tries to mimic the behaviour of these load drivers. This guide will show how to use these and translate the test into a full-fledged Hyperfoil benchmark.\nWarning Please make sure that you are using Hyperfoil version \u003e= 0.22 Let’s start with this command:\n./wrk -c 10 -t 2 -d 10s -H 'accept: application/json' http://example.com that will produce something like:\nRunning 10s test @ http://example.com 2 threads and 10 connections Thread Stats Avg Stdev Max +/- Stdev Latency 97.64ms 489.01us 101.11ms 73.66% Req/Sec 50.73 4.81 80.00 91.92% 1010 requests in 10.01s, 1.53MB read Requests/sec: 100.85 Transfer/sec: 156.91KB You can do exactly the same thing with Hyperfoil, either using bin/wrk.sh/bin/wrk2.sh or using container:\npodman run --rm quay.io/hyperfoil/hyperfoil wrk -c 10 -t 2 -d 10s -H 'accept: application/json' http://example.com/ that will generate something like:\nRunning 10s test @ http://example.com/ 2 threads and 10 connections Thread Stats Avg Stdev Max +/- Stdev Latency 98.61ms 9.58ms 402.65ms 98.92% Req/Sec 101.70 3.35 110.00 80.00 1017 requests in 10.023s, 1.59MB read Requests/sec: 101.47 Transfer/sec: 162.84kB Not much of a difference as you can see. Note that if you want to test something in localhost you’d need to use host networking (--net host). You could also run it from CLI using the wrk/wrk2 command. In that case you’d either connect to a controller using the connect command or start a controller inside the CLI with start-local command. When the (remote) controller is clustered you can use -A/--agent option (e.g. -Amy-agent=host=my-server.my-company.com,port=22) to drive the load from a different node.\nUnlike original tools we support HTTP2 - this is disabled by default and you need to pass --enable-http2 to allow it explicitly.\nWhen you run the command from the CLI the benchmark stays in controller, so you can have a look on the statistics the same way as with any other Hyperfoil run (stats, report, compare, …). You can also execute another run of the benchmark and observe the status as it progresses:\npodman run -it --rm quay.io/hyperfoil/hyperfoil cli [hyperfoil]$ start-local --quiet [hyperfoil@in-vm]$ wrk -t 2 -c 10 -H 'accept: application/json' -d 10s http://example.com Running 10s test @ http://example.com 2 threads and 10 connections Thread Stats Avg Stdev Max +/- Stdev Latency 97.99ms 618.36?s 101.19ms 62.63% Req/Sec 102.50 2.94 110.00 90.00 1025 requests in 10.006s, 1.61MB read Requests/sec: 102.44 Transfer/sec: 164.41kB [hyperfoil@in-vm]$ stats Total stats from run 0000 Extensions (use -e to show): transfer PHASE METRIC THROUGHPUT REQUESTS MEAN p50 p90 p99 p99.9 p99.99 TIMEOUTS ERRORS BLOCKED 2xx 3xx 4xx 5xx CACHE calibration request 96.58 req/s 608 99.39 ms 98.57 ms 100.14 ms 117.96 ms 406.85 ms 406.85 ms 0 0 0 ns 608 0 0 0 0 test request 101.44 req/s 1025 97.99 ms 98.04 ms 99.09 ms 100.14 ms 101.19 ms 101.19 ms 0 0 0 ns 1015 0 0 0 0 [hyperfoil@in-vm]$ run wrk Started run 0001 Run 0001, benchmark wrk Agents: in-vm[READY] Started: 2022/09/08 17:59:05.283 NAME STATUS STARTED REMAINING COMPLETED TOTAL DURATION DESCRIPTION test RUNNING 17:59:11.372 88 ms (88 ms) 10 users always Under the hood the command creates a benchmark that should reflect what the original wrk/wrk2 implementation does. These do not have a YAML representation so you cannot view it with info/edit but you can use inspect to dig deep into the programmatic representation. The source YAML for the wrk invocation above would look like this:\nname: wrk threads: 2 # option -t http: host: http://example.com allowHttp2: false sharedConnections: 10 # option -c ergonomics: repeatCookies: false userAgentFromSession: false phases: - calibration: always: users: 10 # option -c duration: 6s maxDuration: 70s # This is duration + default timeout 60s scenario: \u0026scenario - request: - httpRequest: GET: / timeout: 60s # option --timeout headers: - accept: application/json # option -H handler: rawBytes: ... # Handler to record the data for 'Transfer/sec' - test: always: users: 10 # option -c duration: 10s # option -d maxDuration: 10s # option -d startAfterStrict: calibration scenario: *scenario As you can see there’s a ‘calibration’ phase - wrk implementations might use it for different purposes but in our case it’s convenient at least for a basic JVM warmup. The ’test’ phase starts only when all requests from calibration phase complete. The scenario and number of users is identical, though.\nWith wrk2 we use open model, you have to set request rate using the -R option - with -R 20; the phases would look like:\nphases: - calibration: constantRate: usersPerSec: 20 variance: false maxSessions: 300 # request rate x 15 duration: 10s # option -d # ... Hopefully this gives you some headstart and you can get familiar with Hyperfoil before diving into the details of benchmark syntax.\n","categories":["Migration"],"description":"How and why should I migrate from wrk/wrk2 to Hyperfoil?","excerpt":"How and why should I migrate from wrk/wrk2 to Hyperfoil?","ref":"/hyperfoil-website-demo/docs/migration/wrk/","tags":["migration","wrk","wrk2"],"title":"Migrating from wrk/wrk2"},{"body":"There’s plenty of web benchmark tools around and it might be hard to pick one, and investing time into not-established tools is risky. Hyperfoil was not created for the pure joy of coding but as a solution to set of problems which could not be solved all by single other existing tool.\nFree software Free software allows you to take your benchmark and publish it for everyone to verify. With proprietary licenses that wouldn’t be so easy.\nHyperfoil is licensed under Apache License 2.0.\nDistribution Generating load with single node stops scaling at certain point and you need to orchestrate the benchmark across a cluster of nodes. Simple command-line tools usually ignore this completely (you’re supposed to start them, gather and merge the data in a bash scripts). Other tools use open-core model with the clustering part being a paid/proprietary option. There are frameworks that have clustering built in as well.\nHyperfoil uses leader-follower model with Vert.x Event bus as the clustering middleware. While running from single VM is possible (and quite easy) as well, the design is distributed by default.\nAccuracy The point of web benchmark is usually finding out what happens when your system is accessed by thousands of concurrent users - each doing a page load every few seconds. However many traditional load drivers simplify the scenario to few dozen of virtual users (VUs) that execute one request after another or with very short delays in between - this is referred to as the Closed System Model (as the set of VUs is finite). This discrepancy leads to problem known as coordinated omission and results in significantly skewed latency results and pathological conditions (queues overflow…) not being triggered.\nHyperfoil embraces Open System Model by default - virtual users are completely independent until it runs out of resources, recording that situation in consequence. Hyperfoil runs a state-machine for each VU and all requests are executed asynchronously.\nVersatility While you can design your benchmark to just hit single endpoint (URL) with desired rate this is likely not what the users would be doing. Randomizing some parts of the query or looping through a list of endpoint might be better but the resulting scenario might be still too simplified.\nHyperfoil introduces a DSL expressed in YAML with which you can sketch the scenario in a fine detail, including timing, concurrent requests, processing responses and so forth. We’re not trying to invent a new programming language, though, so if the DSL gets too complex you can write the logic in Java or any other JVM language.\nIf you’re eager to try out Hyperfoil go to the first quickstart. Otherwise let’s have a deeper look into the terms and concepts.\n","categories":["Overview"],"description":"Generic overview on the Hyperfoil tool","excerpt":"Generic overview on the Hyperfoil tool","ref":"/hyperfoil-website-demo/docs/overview/","tags":["overview"],"title":"Overview"},{"body":"0.26 (2024-05-31) Remove java.net.preferIPv4Stack=true Disable automatic report opening with –silent option Throw exception for misconfigured multi-host HTTP benchmark Add agent property to configure the ssh key used Set CPU Request in Benchmark s390x: Define utf-8 encoding in compiler plugin Dependecies upgrades, e.g., infinispan and vertx 0.25.2 (2023-08-03) Bug fix: Version command not working 0.25.1 (2023-08-02) Update dependencies 0.25 (2023-06-28) startWith: Delay feature Enhancements Bug fixes 0.24.2 (2023-05-02) Bug fix and enhancements 0.24.1 (2023-02-02) Return correct protocol Validate wrk benchmark before running simulation 0.24 (2022-12-15) Initial support for Mac OS/x86_64 Fix serialization for Timestamp Dependency updates 0.23 (2022-10-31) Fix for HTTP2 requests not flushing request body Reimplemented randomCsvRow CSV parsing and quotes handling Command upload in CLI/WebCLI now accepts URL 0.22 (2022-09-19) Fixes and output synchronization in wrk/wrk2 commands Fixes for aarch-64 Formatting in timestamp step When a template is missing referenced file CLI asks user to provide it One-key switch for interactive statistics in CLI 0.21 (2022-07-12) Minor bugfix-only release. 0.20 (2022-05-26) Vert.x 4.3 and Infinispan 13 for clustering Bugfixes in templating and documentation 0.19 (2022-02-22) Minor release with bugfixes Generic HTML tag parser: parseHtml.onTagAttribute 0.18 (2021-12-16) New benchmark templating system: !param, !concat and !foreach Mechanisms for storing global, agent-wide and thread-wide data Improved error reporting and logging HTTP endpoints can be referred to using a name rather than authority (host:port combination) Custom SLAs: Tests that have external statistics can place SLAs on these. Closed-model phases can be configured with .usersPerAgent and .usersPerThread New actions for manipulating collections New step and action for restarting current sequence New action for marking request as invalid manually Other utility processors and added properties on existings steps/actions Fix various issues with statistics from auxiliary verticles. 0.17 (2021-10-21) More options for configuration of agent pods (resources, labels…) - courtesy of Stephen Connolly Upgrade of Apache MINA 0.16 (2021-06-11) This release removes some code-bloat for extension developers, using reflection to scan the scenario: Session variables do not need to be explicitly reserved in ResourceUtilizer.reserve() method. Components owning another components do not have to propagate the resource resevation calls. Automatic check for reading from a variable that’s never written to. Controller can loads statistics from old runs (therefore CLI can show stats from runs before reboot) Statistics from old runs are unloaded in order to prevent running out-of-memory in constrained environments. Phases can now be marked with isWarmup: true - reporting can hide data from these phases by default Agents deployed via SSH can set list of cpus on which to run (using taskset). Self-checks for excessive CPU usage on agents, record CPU usage in each phase. Various fixes and improvements in WebCLI. 0.15 (2021-04-09) Introduced statistics for connections (#connections by type, active connections and in-flight requests…) New connection strategies: Open connections for each session/request ergonomics.privatePools replaced by http.connectionStrategy http.sharedConnections can be set using sub-properties core, max, buffer and keepAliveTime. Dropped RequestProcessorBuilder and HttpRequestProcessorBuilder in favor of Processor.Builder If the processor is used in an incompatible context it should cause a runtime error POC support for Hot Rod protocol connecting to Infinispan clusters. k8s deployer: agent labels and tolerations Many improvements to WebCLI, notably automatic reconnect and plot command Statistics rework: HTTP-related statistics are separated into extensions, some fields were dropped or renamed Report schema changed to v3.0 to reflect this (+piggybacked agent address/name changes) Upgrade to Vert.x 4.0 0.14 (2021-02-22) Significant refactoring of HTTP-related code into its own module Programmatic configuration requires some changes but there were no changes for YAML definitions Hyperfoil Controller now serves WebCLI at root path OpenAPI definition moved to /openapi 0.13 (2021-01-28) This is mostly a bugfix release with minor convenience improvements.\nRun CLI in container simply using docker/podman run -it --rm --network=host quay.io/hyperfoil/hyperfoil cli 0.12 (2020-12-16) Hyperfoil now requires JDK 11 BREAKING CHANGE: extra files are now loaded relative to benchmark YAML file, not working directory CLI improvements: Upload benchmarks in text-mode (lower chance of serialization issues) Ask for re-upload of extra files inspect command to reveal detailed structure of the benchmark Status 4xx and 5xx is not counted as error for purposes of SLA.errorRatio (use SLA.invalidRatio) Hyperfoil controller can be exposed using HTTPS and offers Basic authentication scheme. Mode with coordinated-omission compensation: see httpRequest.compensation. Support for GZIP compression of responses: see httpRequest.compression. New generator step: randomFile Image build now can be done using podman 0.11 (2020-11-18) Fix a critical memory leak in the use of Netty’s direct buffers. Fix problems in HTML redirect. 0.10 (2020-11-13) Explicit concurrency limits on sequences, e.g mySequence[6]. maxSequences on scenario is not used anymore. Concurrent sequences have its own copy of each resource by default. Reworked loop step. Renamed simple recorder (processor) to store. Step httpRequest now implements handler.followRedirect, automatically sending another request(s) upon 3xx status or \u003cmeta http-equiv=“refresh” …\u003e in HTML. HTTP 1.1 is now implemented without relying on Netty’s parser - saving allocations (HTTP 2.0 is still TODO). Reworked ways to modify other parts of the benchmark from withing the builder (Locator). Reduced need for boilerplate code in builders. Many bugfixes and small improvements. 0.9 (2020-05-28) This is a bugfix-release.\n0.8 (2020-04-24) Renamed phase types: constantPerSec → constantRate rampPerSec → increasingRate/decreasingRate Change meaning of SLA.blockedRatio: the value should be between 0 and 1 (inclusively) where 1 allows blocking without limits. New SLA check invalidRatio. 4xx and 5xx responses mark the request as invalid by default (configurable through ergonomics.autoRangeCheck). When a response is marked as invalid session execution stops immediately (configurable through ergonomics.stopOnInvalid). Implemented replace and delete operation in the json step and processor. responseSizeRecorder replaced with transferSizeRecorder, calculating uploaded bytes as well. Agents now host a default section where you can define common configuration. Each agent can have different number of threads, using the threads property. Report schema changed, now using schema http://hyperfoil.io/run-schema/v2.0 0.7.1 (2020-02-26) Bugfix-only release.\nFixed threading model when using wrk command Fixed HTTP parsing for rawBytesHandlers Fixed stop used either as step or in a handler Please see git log for info about older releases.\n","categories":"","description":"Summary of the main features and/or fixes by release","excerpt":"Summary of the main features and/or fixes by release","ref":"/hyperfoil-website-demo/blog/releases/release_notes/","tags":"","title":"Release Notes"},{"body":"Steps are the basic building blocks that form each sequence of a scenario, similar to statements in a programming language. Steps are potentially blocking (the sequence cannot continue with next step until previous one finishes).\nNote that every action can be also used as a step that simply never blocks, as actions do not require any extra input.\n","categories":["Reference","Steps"],"description":"","excerpt":"Steps are the basic building blocks that form each sequence of a …","ref":"/hyperfoil-website-demo/docs/reference/steps/","tags":["reference","steps"],"title":"Steps"},{"body":"In Hyperfoil, defining a benchmark involves structuring scenarios, phases, variables and other components to simulate realistic user behavior and workload patterns. This section provides a detailed breakdown of each component involved in defining a benchmark.\n","categories":["Guide","Benchmark"],"description":"Detailed breakdown of each component involved in defining a benchmark","excerpt":"Detailed breakdown of each component involved in defining a benchmark","ref":"/hyperfoil-website-demo/docs/user-guide/benchmark/","tags":["guides","benchmark"],"title":"Benchmark"},{"body":"This document explains some core terms used throughout the documentation.\nController and agents While it is possible to run benchmarks directly from CLI, in its nature Hyperfoil is a distributed tool with leader-follower architecture. Controller has the leader role; this is a Vert.x-based server with REST API. When a benchmark is started controller deploys agents (according to the benchmark definition), pushes the benchmark definition to these agents and orchestrates benchmark phases. Agents execute the benchmark, periodically sending statistics to the controller. This way the controller can combine and evaluate statistics from all agents on the fly. When the benchmark is completed all agents terminate.\nAll communication between the controller and agents happens over Vert.x eventbus - therefore it is independent on the deployment type.\nPhases Conceptually the benchmark consists of several phases. Phases can run independently of each other; these simulate certain load executed by a group of users (e.g. visitors vs. admins). Within one phase all users execute the same scenario (e.g. logging into the system, selling all their stock and then logging off).\nPhases are also using for scaling the load during the benchmark; when looking for maximum throughput you schedule several iterations of given phase, gradually increasing the number of users that run the scenario.\nA phase can be in one of these states:\nnot running (scheduled) running finished: users won’t start new scenarios but we’ll let already-started users complete the scenario terminated: all users are done, all stats are collected and no further requests will be made The state of phase on every agent is managed by Controller; this is also the finest grained unit of work it understands (controller has no information about state of each user).\nSessions The state of each user’s scenario is saved in the session; sometimes we speak about (re)starting sessions instead of starting new users. Hyperfoil tries to keep allocations during benchmark as low as possible and therefore it pre-allocates all memory for the scenario execution ahead. This is why all resources the benchmark uses are capped - it needs to know the sizes of pools.\nIt is also necessary to know how many sessions we should preallocate - maximum concurrency of the system. If this threshold is exceeded Hyperfoil allocates further session as needed, but this is not the optimal mode of operation. It means that either you’ve underestimated the resources need or you’ve put a load on the system that it can’t handle anymore, requests are not being completed and scenarios are not finished - which means that session objects cannot be recycled for reuse by next user.\nScenario Scenario consists of one or more sequences that are composed of steps. Steps are similar to statements in programming language and sequences are an equivalent of blocks of code.\nWhile most of the time the scenario will consist of sequential operations as the user is not multi-tasking, the browser (or other system you’re simulating) actually executes some operations in parallel - e.g. during page load it loads images concurrently. Therefore at any time the session contains one or more active sequence instances; when all sequence instances are done, the session has finished and can be recycled for a new user. Most of the time the scenario will start with only one active instance and as it progresses, it might create instances of other sequences (e.g after evaluating a condition it creates a sequence instance according to the branching logic).\n","categories":["Concepts"],"description":"Hyperfoil key terms and concepts","excerpt":"Hyperfoil key terms and concepts","ref":"/hyperfoil-website-demo/docs/overview/concepts/","tags":["concepts"],"title":"Concepts"},{"body":"Embark on this journey with our collection of 8 quickstarts, guiding you through a wide range of potential use cases that you might encounter in daily operations.\nInfo Do not hesitate to suggest additional use cases that you believe would be valuable for this section. ","categories":["Quickstart","GetStarted"],"description":"Collection of quickstarts aiming to make the Hyperfoil adoption a lot easier.\n","excerpt":"Collection of quickstarts aiming to make the Hyperfoil adoption a lot …","ref":"/hyperfoil-website-demo/docs/getting-started/","tags":["quickstart"],"title":"Getting Started"},{"body":"All servers that Hyperfoil should contact must be declared in this section. Before the benchmark starts Hyperfoil agents will open connections to the target servers; if this connection fails the benchmark is terminated immediatelly.\nYou can either declare single target server (the default one) within this section or more of them:\nhttp: host: http://example.com ... http: - host: http://example.com sharedConnections: 100 - host: http://example.com:8080 sharedConnections: 50 HTTP configuration has these properties:\nProperty Default Description protocol Either http or https host Hostname of the server. For convenience you can use the http[s]://host[:port] inline syntax as shown above port 80 or 443 Default is based on the protocol sharedConnections 1 Number of connections to open. It is recommended to set this property to a non-default value. connectionStrategy SHARED_POOL Connection pooling model (see details below) addresses Supply list of IPs or IP:port targets that will be used for the connections instead of resolving the host in DNS and using port as set - host and port will be used only for Host headers and SNI. If this list contains more addresses the connections will be split evenly. requestTimeout 30 seconds Default request timeout, this can be overridden in each httpRequest. allowHttp1x true Allow HTTP 1.1 for connections (e.g. during ALPN). allowHttp2x true Allow HTTP 2.0 for connections (e.g. during ALPN). If both 1.1 and 2.0 are allowed and https is not used (which would trigger ALPN) Hyperfoil will use HTTP 1.1. If only 2.0 is allowed Hyperfoil will start with HTTP 1.1 and perform protocol upgrade to 2.0. directHttp2 false Start with H2C HTTP 2.0 without protocol upgrade. Makes sense only for plain text (http) connections. Currently not implemented. maxHttp2Streams 100 Maximum number of requests concurrently enqueued on single HTTP 2.0 connection. pipeliningLimit 1 Maximum number of requests pipelined on single HTTP 1.1 connection. rawBytesHandlers true Enable or disable using handlers that process HTTP response raw bytes. keyManager TLS key manager for setting up client certificates. trustManager TLS trust manager for setting up server certificates. Shared connections This number is split between all agents and executor threads evenly; if there are too many agents/executors each will get at least 1 connection.\nWhen a scalar value is used for this property the connection pool has fixed size; Hyperfoil opens all connections when the benchmark starts and should a connection be closed throughout the benchmark, another connection is reopened instead. You can change this behaviour by composing the property of these sub-properties:\nProperty Description core Number of connections that will be opened when the benchmark starts. Number of connections in the pool should never drop below this value (another connection will be opened instead). max Maximum number of connections in the pool. buffer Hyperfoil will try to keep at least active + buffer connections in the pool where active is the number of currently used connection (those with at least 1 in-flight request) keepAliveTime When a connection is not used for more than this value (in milliseconds) it will be closed. Non-positive value means that the connection is never closed because of being idle. Example:\nhttp: host: http://example.com sharedConnections: core: 10 buffer: 10 max: 10 keepAliveTime: 30000 Connection strategies This property describes the connection pooling model, you can choose from the options below:\nStrategy Description SHARED_POOL Connections are created in a pool and then borrowed by the session. When the request is complete the connection is returned to the shared pool. SESSION_POOLS Connections are created in a shared pool. When the request is completed it is not returned to the shared pool but to a session-local pool. Subsequent requests by this session first try to acquire the connection from this local pool. When the session completes all connections from the session-local pool are returned to the shared pool. OPEN_ON_REQUEST Connections are created before request or borrowed from a session-local pool. When the request is completed the connection is returned to this pool. When the session completes all connections from the session-local pool are closed. ALWAYS_NEW Always create the connection before the request and close it when it is complete. No pooling of connections. KeyManager configuration All files are loaded when the benchmark is constructed, e.g. on the machine running CLI. You don’t need to upload any files to controller or agent machines.\nProperty Default Description storeType JKS Implementation of the store. storeFile Path to a file with the store. password Password for accessing the store file. alias Keystore alias. certFile Path to a file with the client certificate. keyFile Path to a file with client’s private key. TrustManager configuration All files are loaded when the benchmark is constructed, e.g. on the machine running CLI. You don’t need to upload any files to controller or agent machines.\nProperty Default Description storeType JKS Implementation of the store. storeFile Path to a file with the store. password Password for accessing the store file. certFile Path to a file with the server certificate. ","categories":["Guide","Benchmark"],"description":"This section defines servers that agents contact during benchmarks,  allowing configurations for multiple targets with specific connection settings\n","excerpt":"This section defines servers that agents contact during benchmarks, …","ref":"/hyperfoil-website-demo/docs/user-guide/benchmark/http/","tags":["guides","benchmark","http"],"title":"HTTP"},{"body":"A convenient alternative to running Hyperfoil on hosts with SSH access is deploying it in Kubernetes or Openshift environment. The recommended way to install it using an operator in your Openshift console - just go to Operators - OperatorHub and search for ‘hyperfoil’, and follow the installation wizard. Alternatively you can deploy the controller manually.\nIn order to start a Hyperfoil Controller instance in your cluster, create a new namespace hyperfoil: Go to Operators - Installed Operators and open Hyperfoil. In upper left corner select ‘Project: ’ - Create project and fill out the details. Then click on the ‘Hyperfoil’ tab and find the button ‘Create Hyperfoil’.\nYou should see a YAML definition like this:\napiVersion: hyperfoil.io/v1alpha2 kind: Hyperfoil metadata: name: example-hyperfoil namespace: hyperfoil spec: agentDeployTimeout: 60000 log: myConfigMap/log4j2-superverbose.xml route: host: hyperfoil.apps.mycloud.example.com version: latest Change the name to just hyperfoil (or whatever you prefer) and delete all the content from the spec section:\napiVersion: hyperfoil.io/v1alpha2 kind: Hyperfoil metadata: name: hyperfoil namespace: hyperfoil spec: This is a perfectly valid Hyperfoil resource with everything set to default values. You can customize some properties in the spec section further - see the reference.\nThe operator deploys only the controller; each agent is then started when the run starts as a pod in the same namespace and stopped when the run completes.\nWhen the resource becomes ready (you can check it out through Openshift CLI using oc get hf) the controller pod should be up and running. Now you can open Hyperfoil CLI and connect to the controller. While default Hyperfoil port is 8090, default route setting uses TLS (edge) and therefore Openshift router will expose the service on port 443. If your cluster’s certificate is not recognized (such as when using self-signed certificates) you need to use --insecure (or -k) option.\nbin/cli.sh [hyperfoil]$ connect hyperfoil-hyperfoil.apps.my.cluster.domain:443 --insecure WARNING: Hyperfoil TLS certificate validity is not checked. Your credentials might get compromised. Connected! WARNING: Server time seems to be off by 12124 ms Now you can upload \u0026 run benchmarks as usual - we’re using {% include example_link.md src=‘k8s-hello-world.hf.yaml’ %} in this example. Note that it can take several seconds to spin up containers with agents.\n[hyperfoil@hyperfoil-hyperfoil]$ upload examples/k8s-hello-world.hf.yaml Loaded benchmark k8s-hello-world, uploading... ... done. [hyperfoil@hyperfoil-hyperfoil]$ run k8s-hello-world Started run 0000 Run 0000, benchmark k8s-hello-world Agents: agent-one[STARTING] Started: 2019/11/18 19:07:36.752 Terminated: 2019/11/18 19:07:41.778 NAME STATUS STARTED REMAINING COMPLETED TOTAL DURATION DESCRIPTION main TERMINATED 19:07:36.753 19:07:41.778 5025 ms (exceeded by 25 ms) 5.00 users per second [hyperfoil@hyperfoil-hyperfoil]$ You can find more details about adjusting the agents in the benchmark format reference.\nRunning Hyperfoil inside the cluster you are trying to test might skew results due to different network topology compared to driving the load from ‘outside’ (as real users would do). It is your responsibility to validate if your setup and separation between load driver and SUT (system under test) is correct. You have been warned.\nReference Property Description version Tag for controller image (e.g. 0.14 for a released version or 0.15-SNAPSHOT for last build from main (master) branch). Defaults to latest. image Controller image. If ‘version’ is defined, too, the tag is replaced (or appended). Defaults to ‘quay.io/hyperfoil/hyperfoil’ route Configuration for the route leading to Controller REST endpoint. auth Authorization configuration. log Name of the config map and optionally its entry (separated by ‘/’: e.g myconfigmap/log4j2-superverbose.xml) storing Log4j2 configuration file. By default the Controller uses its embedded configuration. agentDeployTimeout Deploy timeout for agents, in milliseconds. triggerUrl Value for io.hyperfoil.trigger.url - see above preHooks List of config map names holding hooks that run before the run starts. postHooks List of config map names holding hooks that run when the run finishes. persistentVolumeClaim Name of the PVC Hyperfoil should mount for its workdir. route Property Description host Host for the route leading to Controller REST endpoint. Example: hyperfoil.apps.cloud.example.com type Either ‘http’ (for plain-text routes - not recommended), ’edge’, ‘reencrypt’ or ‘passthrough’ tls Name of the secret hosting tls.crt, tls.key and optionally ca.crt. This is mandatory for passthrough routes and optional for edge and reencrypt routes auth Property Description secret Name of secret used for basic authentication. Must contain key password; Hyperfoil accepts any username for login. ","categories":["Guide","Installation"],"description":"Deploy Hyperfoil in Kubernetes or Openshift environment using the out-of-the-box Hyperfoil operator","excerpt":"Deploy Hyperfoil in Kubernetes or Openshift environment using the …","ref":"/hyperfoil-website-demo/docs/user-guide/installation/k8s/","tags":["guides","installation","kubernetes","openshift"],"title":"K8s/Openshift deployment"},{"body":"Processors can work either as consumers of input bytes (e.g. storing part of the input into session variables), as filters (passing modified version of the input to delegated processors) or combination of the above.\nSome processors can expect extra context in the session, such as an ongoing (HTTP) request. It is possible to use processors that don’t expect specific type of request in places where a more specific type is provided; opposite is not allowed.\nAlso it is possible to use an action instead of a processor; Hyperfoil automatically inserts an adapter. That’s why the list below includes actions as well.\n","categories":["Reference","Processors"],"description":"","excerpt":"Processors can work either as consumers of input bytes (e.g. storing …","ref":"/hyperfoil-website-demo/docs/reference/processors/","tags":["reference","processors"],"title":"Processors"},{"body":"In previous quickstart you created a benchmark that fires only one HTTP request. Our next example is going to hit random URLs at this server with 10 requests per second. We’ll see how to generate random data and collect statistics for different URLs.\nLet’s start a container that will serve the requests:\npodman run --rm -p 8080:8083 quay.io/hyperfoil/hyperfoil-examples If you prefer running this in Docker just replace podman with docker. You can explore the handling of requests from this example on GitHub.\nHere is the benchmark we’re going to run:\nname: random-urls http: host: http://localhost:8080 sharedConnections: 10 # 10 users will be starting the scenario every second usersPerSec: 10 duration: 5s scenario: - test: # Step `randomItem` randomly picks one item from the list below... - randomItem: list: - index.html - foo.png - bar.png - this-returns-404.png # ... and stores it in users's session under key `my-random-path` toVar: my-random-path - httpRequest: # HTTP request will read the variable from the session and format # the path for the GET request GET: /quickstarts/random-urls/${my-random-path} # We'll use different statistics metric for webpages and images metric: - .*\\.html -\u003e pages - .*\\.png -\u003e images - -\u003e other # Handler processes the response handler: # We'll check that the response was successful (status 200-299) status: range: 2xx # When the response is fully processed we'll set variable `completed` # in the session. onCompletion: set: completed \u003c- yes # For demonstration purposes we will set `sync: false`. # Next step is executed immediately after we fire the request, not # waiting for the response. sync: false # We'll wait for the `completed` var to be set in this step, though. - awaitVar: completed So let’s run this through CLI:\n[hyperfoil]$ start-local ... [hyperfoil@in-vm]$ upload .../random-urls.hf.yaml ... [hyperfoil@in-vm]$ run Started run 0002 Run 0002, benchmark random-urls Agents: in-vm[STARTING] Started: 2019/11/15 17:49:45.859 Terminated: 2019/11/15 17:49:50.904 NAME STATUS STARTED REMAINING COMPLETED TOTAL DURATION DESCRIPTION main TERMINATED 17:49:45.859 17:49:50.903 5044 ms (exceeded by 44 ms) 10.00 users per second [hyperfoil@in-vm]$ stats Total stats from run 0002 PHASE METRIC REQUESTS MEAN p50 p90 p99 p99.9 p99.99 2xx 3xx 4xx 5xx CACHE TIMEOUTS ERRORS BLOCKED main images 34 3.25 ms 3.39 ms 4.39 ms 12.58 ms 12.58 ms 12.58 ms 12 13 12 0 0 0 0 1.11 ms main pages 13 2.89 ms 3.19 ms 4.15 ms 4.33 ms 4.33 ms 4.33 ms 13 0 0 0 0 0 0 0 ns main/images: Progress was blocked waiting for a free connection. Hint: increase http.sharedConnections. There are several things worth mentioning in this example:\nThe command run does not have any argument. In this case, the benchmark name random-urls is optional as you’ve just uploaded it and CLI knows that you are going to work with it. The same holds for stats - you don’t have to write down run ID 0002 when displaying statistics as the implicit run ID is set automatically in the run/status command.\nThe test did only 47 requests in 5 seconds, instead of 50. It does not execute one request every 100 ms sharp, it randomizes the times of requests as well; this simulates the Poisson point process. Longer runs would have lower variance in the total numbers.\nIn metric images the test reports 1.11 ms being blocked and there’s SLA failure below the stats. This is happening because in the default configuration Hyperfoil opens only one connection to the target server. All (possibly concurrent) requests have to share the common pool of 1 connection and if some request cannot be executed immediatelly we report this as blocked time. All practical benchmarks should increase the pool size to a value that reflects simulated load and prevent this situation.\nThe test took 44 ms longer than the configured 5 seconds. We terminate the test only after all responses for sent requests arrive (or time out).\nIn the next quickstart you’ll see a more complex scenario\n","categories":["Quickstart"],"description":"Learn how to create more steps and how to gather run statistics","excerpt":"Learn how to create more steps and how to gather run statistics","ref":"/hyperfoil-website-demo/docs/getting-started/quickstart2/","tags":["quickstart","steps","statistics"],"title":"Steps and statistics"},{"body":" ","categories":"","description":"Hyperfoil controller OpenAPI swagger UI","excerpt":"Hyperfoil controller OpenAPI swagger UI","ref":"/hyperfoil-website-demo/docs/restapi/openapi/","tags":"","title":"Swagger UI"},{"body":"Hyperfoil benchmarks can refer to external files. When you use the upload command in CLI the files are automatically attached the the benchmark YAML (relative paths are resolved relative to this file). Later on when editing the file you can choose to re-upload some of these. Once the benchmark is built the files are loaded to the in-memory representation - Hyperfoil won’t access these files during runtime. With clustered benchmarks these files don’t need to be on the agents either - the controller sends serialized in-memory representation to the agents and that contains everything needed for the actual execution.\nWhen testing a workload you will likely skip user registration and come with a list of username+password keys. A convenient way is to keep these in a CSV file that looks like\n\"johny\",\"my-5ec12eT_pwd!\" \"bob\",\"superlongpassphrasethatnobodywillguess\" We will create a step that selects a random line from such file and stores it in session variables username and password:\n- randomCsvRow: file: credentials.csv # Path relative to the benchmark columns: 0: username 1: password The columns property has a mapping of zero-based indices of columns in the CSV file. This way you can use a file with some extra information.\nIn case you don’t need to split lines into separate variables you can use the randomItem:\n- randomItem: file: usernames.txt toVar: username We have selected the credentials, now it’s time to execute the login. When users submit a form on HTML page this usually results in a POST request with content-type: application/x-www-form-urlencoded header and the form contents encoded in the request body. Hyperfoil lets you specify this conveniently using the form body formatter:\n- httpRequest: POST: /login body: form: - name: username fromVar: username - name: password fromVar: password - name: action value: log-me-in-please Successful response from the server carries a token in most cases but the actual method can vary. If the server sets a cookie Hyperfoil automatically records this and sends it on subsequent requests (this can be switched off using ergonomics.repeatCookies). If the server sends the token in a response header, e.g. x-token you can store it using the header handler into the token session variable:\n- httpRequest: # ... handler: header: filter: header: \"x-token\" processor: store: token If the server returns this token as a part of JSON object - e.g { \"token\": \"abc123\" } you would process response body using the json processor in body handler:\n- httpRequest: # ... handler: body: json: query: \".token\" toVar: token Runnable example Below you can find a runnable example that we have prepared for you and that you can download here.\nname: credentials http: - host: https://localhost:8084 phases: - use-cookie: atOnce: users: 1 scenario: # Make sure that without the cookie (before login) the request fails with 401 - before-login: - httpRequest: GET: /howto/credentials/secure handler: autoRangeCheck: false # Don't fail with 4xx-5xx status: range: 401 - login-with-form: - randomCsvRow: file: credentials.csv columns: 0: username 1: password - httpRequest: POST: /howto/credentials/login body: form: - name: username fromVar: username - name: password fromVar: password # Here we already have the cookie set to a httpRequest will succeed - after-login: - httpRequest: GET: /howto/credentials/secure - use-bearer-token: atOnce: users: 1 scenario: - request-login-page: # This first request will response with WWW-Authenticate header - httpRequest: GET: /howto/credentials/login handler: autoRangeCheck: false status: range: 401 - login-with-basic-auth: - randomCsvRow: file: credentials.csv columns: 0: username 1: password - template: pattern: ${username}:${password} toVar: concatenated - httpRequest: GET: /howto/credentials/login headers: # Our example runs over HTTP2 and that mandates lower-case header names authorization: Basic ${base64encode:concatenated} # With Authorization header the server will reply with token # and redirect us to the secured page. `httpRequest` implements # automatic redirection through `handler.followRedirect` but that # wouldn't send the token, so we'll do that manually handler: header: - filter: header: x-token processor: - store: token status: range: 30x - after-login: - httpRequest: GET: /howto/credentials/secure headers: authorization: Bearer ${token} There are two scenarios: use-cookie performs the login using the POST from form as shown above and then keeps the secret token in a cookie; use-bearer-token performs HTTP Basic authentication, receives a token in headers and then uses that for HTTP Bearer authentication.\nYou should start with running a server with mocked responses in one console:\npodman run --rm -p 8084:8084 quay.io/hyperfoil/hyperfoil-examples In second console start the CLI with in-vm controller (or standalone and open the WebCLI in your browser). We are running in host-network mode to be able to reach localhost from within the container.\npodman run --rm -it --net host quay.io/hyperfoil/hyperfoil cli [hyperfoil]$ start-local Starting controller in default directory (/tmp/hyperfoil) Controller started, listening on 127.0.0.1:35243 Connecting to the controller... Connected to 127.0.0.1:35243! [hyperfoil@in-vm]$ upload https://hyperfoil.io/benchmarks/credentials.hf.yaml Loaded benchmark credentials, uploading... ... done. [hyperfoil@in-vm]$ run Started run 0000 Run 0000, benchmark credentials Agents: in-vm[STOPPED] Started: 2022/10/27 15:48:39.271 Terminated: 2022/10/27 15:48:39.301 NAME STATUS STARTED REMAINING COMPLETED TOTAL DURATION DESCRIPTION\u003c/span\u003e use-bearer-token TERMINATED 15:48:39.271 15:48:39.301 30 ms (exceeded by 31 ms) 1 users at once use-cookie TERMINATED 15:48:39.271 15:48:39.300 29 ms (exceeded by 30 ms) 1 users at once [hyperfoil@in-vm]$ stats Total stats from run 0000 PHASE METRIC THROUGHPUT REQUESTS MEAN p50 p90 p99 p99.9 p99.99 TIMEOUTS ERRORS BLOCKED 2xx 3xx 4xx 5xx CACHE\u003c/span\u003e use-bearer-token after-login 33.33 req/s 1 3.79 ms 3.80 ms 3.80 ms 3.80 ms 3.80 ms 3.80 ms 0 0 0 ns 1 0 0 0 0 use-bearer-token login-with-basic-auth 33.33 req/s 1 4.57 ms 4.59 ms 4.59 ms 4.59 ms 4.59 ms 4.59 ms 0 0 0 ns 0 1 0 0 0 use-bearer-token request-login-page 33.33 req/s 1 7.49 ms 7.50 ms 7.50 ms 7.50 ms 7.50 ms 7.50 ms 0 0 0 ns 0 0 1 0 0 use-cookie after-login 34.48 req/s 1 3.69 ms 3.70 ms 3.70 ms 3.70 ms 3.70 ms 3.70 ms 0 0 0 ns 1 0 0 0 0 use-cookie before-login 34.48 req/s 1 9.60 ms 9.63 ms 9.63 ms 9.63 ms 9.63 ms 9.63 ms 0 0 0 ns 0 0 1 0 0 use-cookie login-with-form 34.48 req/s 1 4.96 ms 4.98 ms 4.98 ms 4.98 ms 4.98 ms 4.98 ms 0 0 0 ns 1 0 0 0 0 The list of possibilities is endless; if your use case does not fit any of the above please check out the reference. You can also have a look at a full example in the second part of the Beginner’s Guide.\n","categories":["HowTo"],"description":"","excerpt":"Hyperfoil benchmarks can refer to external files. When you use the …","ref":"/hyperfoil-website-demo/docs/howtos/credentials/","tags":["how-to","guides","credentials"],"title":"Using credentials"},{"body":"Actions are non-blocking handlers for various events.\n","categories":["Reference","Actions"],"description":"","excerpt":"Actions are non-blocking handlers for various events.\n","ref":"/hyperfoil-website-demo/docs/reference/actions/","tags":["reference","actions"],"title":"Actions"},{"body":"The previous example was the first ‘real’ benchmark, but it didn’t do anything different from what you could run through wrk, ab, siege or similar tools.\nOf course, the results were not suffering from the coordinated omission problem, but Hyperfoil can do more. Let’s try a more complex scenario:\nname: choose-movie http: host: http://localhost:8080 # Use 80 concurrent HTTP connections to the server. Default is 1, # therefore we couldn't issue two concurrent requests (as HTTP pipelining # is disabled by default and we use HTTP 1.1 connections). sharedConnections: 80 usersPerSec: 10 duration: 5s # Each session will take at least 3 seconds (see the sleep time below), # and we'll be running ~10 per second. That makes 30, let's give it # some margin and set this to 40. maxSessions: 40 scenario: # In previous scenarios we have used only single sequence and we could # define the list of sequences right away. In this scenario, we're going # to be using 3 different sequences. # Initial sequences are scheduled at session start and are not linked # to the other sessions. initialSequences: - home: # Pick a random username from a file - randomItem: file: usernames.txt toVar: username # The page would load a profile, e.g. to display full name. - httpRequest: GET: /quickstarts/choose-movie/profile?user=${username} sync: false metric: profile # Fetch movies user could watch - httpRequest: GET: /quickstarts/choose-movie/movies sync: false metric: movies handler: body: # Parse the returned JSON that is an array and for each # element fire the processor. json: query: .[] processor: # Store each element in a collection `movies` array: toVar: movies # Store as byte[] to avoid encoding UTF-8 into String format: BYTES # Every data structure in session has maximum size. # This space is pre-allocated. maxSize: 10 # This step waits until responses for all sent requests are received and processed. - awaitAllResponses # Wait 3 seconds to simulate user-interaction - thinkTime: duration: 3s # Set variable `quality` and `movieNames` to an uninitialized array # of 10 elements. We will use them later on. - set: var: quality objectArray: size: 10 - set: var: movieNames objectArray: size: 10 # For each element in variable `movies` schedule one (new) instance # of sequence `movies`, defined below. These instances differ in # one intrinsic \"variable\" - their index. - foreach: fromVar: movies sequence: addComment # Schedule one more sequence - newSequence: watchMovie # These sequences are defined but don't get scheduled at session start. We activate # them explicitly (and multiple times in parallel) in foreach step above. sequences: # Sequences that can run multiple instances concurrently must declare the maximum # concurrency level explicitly using the brackets. - addComment[10]: # Variables `movies` hosts an array, and in the foreach step # we've created one sequence for each element. We'll access # the element through the '[.]' notation below. - json: fromVar: movies[.] query: .quality # We'll extract quality to another collection under # this sequence's index. We shouldn't use global variable # as the execution of sequences may interleave. toVar: quality[.] # For high-quality movies we won't post insults (we haven't seen # the movie yet anyway). Therefore, we'll stop executing # the sequence prematurely. - breakSequence: intCondition: fromVar: quality[.] # Note: ideally we could filter the JSON directly using query # .[] | select(.quality \u003e= 80) # but this feature is not implemented yet. greaterOrEqualTo: 80 - json: fromVar: movies[.] query: .name toVar: movieNames[.] - httpRequest: # URLs with spaces and other characters don't work well; # let's encode it (e.g. space -\u003e %20) POST: /quickstarts/choose-movie/movie/${urlencode:movieNames[.]}/comments body: text: This movie sucks. # The sync shortcut actually sets up a bit in the session state # cleared before the request and set when the request is complete, # automatically waiting it after this step. # You can write your own handlers (using sequence-scoped vars) # to change this behaviour. sync: true # Set value to variable `commented`. The actual value does not matter. - set: commented \u003c- true - watchMovie: # This sequence is blocked in its first step until the variable gets # set. Therefore we could define it in `initialSequences` and omit # the `newSequence` step at the end of `home` sequence. - awaitVar: commented # Choose one of the movies (including the bad ones, for simplicity) - randomItem: selectedMovie \u003c- movies - json: fromVar: selectedMovie query: .name # This sequence is executed only once so we can use global var. toVar: movieName # Finally, go watch the movie! - httpRequest: GET: /quickstarts/choose-movie/movie/${urlencode:movieName}/watch sync: true Start the server and fire the scenario the usual way:\n# start the server to interact with podman run --rm -d -p 8080:8083 quay.io/hyperfoil/hyperfoil-examples # start Hyperfoil CLI bin/cli.sh [hyperfoil]$ start-local ... [hyperfoil@in-vm]$ upload .../choose-movie.hf.yaml ... [hyperfoil@in-vm]$ run ... Is this scenario too simplistic? Let’s define phases…\n","categories":["Quickstart"],"description":"Start creating a more complex workflow","excerpt":"Start creating a more complex workflow","ref":"/hyperfoil-website-demo/docs/getting-started/quickstart3/","tags":["quickstart"],"title":"Complex workflow"},{"body":"Why is Hyperfoil written in Java? People are often concerned about JVM performance or predictability. While nowadays JVM is very good in the sense of throughput, dealing with jitter can be challenging. We are Java engineers, though, and we believe that these issues can be mitigated with a right design. That’s why we try to be very careful on the execution hot-path.\nWe could achieve even better properties with C/C++, but the development effectivity would suffer. We could be succesful in Go, but we’re not as intimate with its internals. Other languages and frameworks would pose its own challenges. So far, the choice of Java was not found to be a limiting factor.\nWhy are you inventing your own YAML-based DSL instead of using Javascipt/Lua/…? While some people might be more comfortable with describing their complex scenarios in a familiar language, running a script execution engine would have impact on performance and could put us out of control. We are not trying to invent a new language, written in YAML structure. Instead we propose a set of components common to many scenarios that could be recombined as it suits you. If you ever feel that the YAML is becoming cumbersome, try to move your complex benchmark logic to Java code and use it that way, instead.\nI just want to know what is the maximum throughput! Maximum throughput is a single number which makes comparison very easy. Was my code change for better or worse? However finding the sweet spot is not as simple as throwing in few hundred concurrent threads running one request after another and taking the readings. With too high concurrency you can get worse results due to contention and longer queues, so you need to try different concurrency levels anyway.\nThere’s nothing wrong with this type of test as long as you know what you’re doing, and that the response latencies might be far off reality. It’s actually very good test when you look only for regressions - and Hyperfoil supports that, too.\nHyperfoil is so hard to set up, I’ll just use … Some tools can be run from the shell, with everything set just through options and arguments. That is quite handy for a quick test - and if the tool is sufficient for the job, use it. Or you can try runnning the same through Hyperfoil - e.g. for wrk/wrk2 we offer a facade (CLI command wrk or bin/wrk.sh) that creates a benchmark with the same behaviour but you also get all the detailed results as from any other run - see the migration guide. Once that your requirements outgrow what’s possible in these simple tools, you can embrace the full power of benchmark composition.\nWhat does that ‘Exceeded session limit’ error mean? With open-model phase types (constantRate, increasingRate, decreasingRate) the concurrency should not be limited. However as Hyperfoil tries not to allocate any memory during the benchmark we need to reserve space ahead for all sessions that could run concurrently - we call this the session limit. By default this limit is equal to number of users per second (assuming that the scenario won’t take more than 1 second).\nWhen you get the ‘Exceeded session limit’ error this means that some of the requests took a long time (or you have delays as part of the scenario) and Hyperfoil ran out of session pool. In that case you can change the limit using maxSessions property on the phase to the expected maximum concurrency. E.g. if you expect that the scenario will take 3 seconds and you’re running at usersPerSec: 100 you should set maxSessions: 300 (or rather more to give it a buffer for unexpected jitter).\nIf increasing the limit doesn’t help it usually means that the load at the tested system is too high and the responses are not arriving as fast as you fire the requests. In that case you should lower the load.\n","categories":["FAQ"],"description":"Frequently Asked Questions","excerpt":"Frequently Asked Questions","ref":"/hyperfoil-website-demo/docs/overview/faq/","tags":["faq"],"title":"FAQ"},{"body":"If you cannot use the operator or if you’re running vanilla Kubernetes you can define all the resource manually. You deploy only the controller; each agent is then started, when the run starts, as a pod in the same namespace and stopped when the run completes.\nFollowing steps install Hyperfoil controller in Openshift, assuming that you have all the required priviledges. With vanilla Kubernetes you might have to replace the route with an appropriate ingress.\n1. Create new namespace for hyperfoil oc new-project hyperfoil 2. Create required resources curl -s -L k8s.hyperfoil.io | oc apply -f - role.rbac.authorization.k8s.io/controller created serviceaccount/controller created service/hyperfoil created rolebinding.rbac.authorization.k8s.io/controller created deploymentconfig.apps.openshift.io/controller created route.route.openshift.io/hyperfoil created The route will use hostname following the format hyperfoil-hyperfoil.apps.my.cluster.domain - feel free to customize the hostname as needed.\n3. Wait until the image gets downloaded and the container starts oc get po NAME READY STATUS RESTARTS AGE controller-1-pqbvs 1/1 Running 0 57s controller-1-deploy 0/1 Completed 0 72s 4. Open CLI and connect to the controller While default Hyperfoil port is 8090, Openshift router will expose the service on port 80.\nbin/cli.sh [hyperfoil]$ connect hyperfoil-hyperfoil.apps.my.cluster.domain -p 80 Connected! WARNING: Server time seems to be off by 12124 ms 5. Upload and run benchmarks as usual We’re using k8s-hello-world.hf.yaml in this example.\nname: k8s-hello-world agents: agent-one: http: host: https://kubernetes.default.svc.cluster.local duration: 5s usersPerSec: 5 scenario: - test: - httpRequest: GET: / Note that it can take several seconds to spin up containers with agents.\n[hyperfoil@hyperfoil-hyperfoil]$ upload .../k8s-hello-world.hf.yaml Loaded benchmark k8s-hello-world, uploading... ... done. [hyperfoil@hyperfoil-hyperfoil]$ run k8s-hello-world Started run 0000 Run 0000, benchmark k8s-hello-world Agents: agent-one[STARTING] Started: 2019/11/18 19:07:36.752 Terminated: 2019/11/18 19:07:41.778 NAME STATUS STARTED REMAINING COMPLETED TOTAL DURATION DESCRIPTION main TERMINATED 19:07:36.753 19:07:41.778 5025 ms (exceeded by 25 ms) 5.00 users per second [hyperfoil@hyperfoil-hyperfoil]$ You can find more details about adjusting the agents in the benchmark format reference.\nRunning Hyperfoil inside the cluster you are trying to test might skew results due to different network topology compared to driving the load from ‘outside’ (as real users would do). It is your responsibility to validate if your setup and separation between load driver and SUT (system under test) is correct. You have been warned.\n","categories":["Guide","Installation"],"description":"Manually deploy Hyperfoil in Kubernetes or Openshift environment","excerpt":"Manually deploy Hyperfoil in Kubernetes or Openshift environment","ref":"/hyperfoil-website-demo/docs/user-guide/installation/k8s_manual/","tags":["guides","installation","manual","kubernetes","openshift"],"title":"Manual k8s/Openshift deployment"},{"body":"You might want to simulate several types of workloads at once: e.g. in an eshop users would come browsing or buying products, and operators would restock the virtual warehouse. Also, driving constant load may not be the best way to run the benchmark: often you want to slowly ramp the load up to let the system adjust (scale up, perform JIT, fill pools) and push the full load only after that. When trying to find system limits, you do the same repetitevely - ramp up the load, measure latencies and if the system meets SLAs (latencies below limits) continue ramping up the load until it breaks.\nIn Hyperfoil, this all is expressed through phases. Phases can run independently of each other; these simulate certain load execute by a group of users. Within one phase all users execute the same scenario (e.g. logging into the system, buying some goods and then logging off).\nA phase can be in one of these states:\nnot running (scheduled): As the name clearly says, the phase is not yet getting executed. running: The agent started running the phase, i.e., performing the configured load. finished: Users won’t start new scenarios but we’ll let already-started users complete the scenario. terminated: All users are done, all stats are collected and no further requests will be made. cancelled: Same as terminated but this phase hasn’t been run at all. There are different types of phases based on the mode of starting new users:\nType Description constantRate The benchmark will start certain number of users according to a schedule regardless of previously started users completing the scenario. This is the open-model. increasingRate Similar to constantRate but ramps up the number of started users throughout the execution of the phase. decreasingRate The same as increasingRate but requires initialUsersPerSec \u003e targetUsersPerSec. atOnce All users are be started when the phase starts running and once the scenario is completed the users won’t retry the scenario. always There is fixed number of users and once the scenario is completed the users will start executing the scenario from beginning. This is called a closed-model and is similar to the way many benchmarks with fixed number of threads work. noop This phase cannot have any scenario (or forks). It might be useful to add periods of inactivity into the benchmark. See the example of phases configuration:\n... phases: # Over one minute ramp the number of users started each second from 1 to 100 - rampUp: increasingRate: initialUsersPerSec: 1 targetUsersPerSec: 100 # We expect at most 200 users being active at one moment - see below maxSessions: 200 duration: 1m scenario: ... # After rampUp is finished, run for 5 minutes and start 100 new users each second - steadyState: constantRate: usersPerSec: 100 maxSessions: 200 startAfter: rampUp duration: 5m # If some users get stuck, forcefully terminate them after 6 minutes from the phase start maxDuration: 6m scenario: ... # 2 minutes after the benchmark has started spawn 5 users constantly doing something for 2 minutes - outOfBand: always: users: 5 startTime: 2m duration: 2m scenario: ... - final: atOnce: users: 1 # Do something at the end: make sure that both rampUp and steadyState are terminated startAfterStrict: - rampUp - steadyState scenario: ... These properties are common for all types of phases:\nProperty Description startTime Time relative to benchmark start when this phase should be scheduled. In other words, it’s the earliest moment when it could be scheduled, other conditions (below) may delay that even further. startAfter Phases that must be finished before this phase can start. You can use either single phase name, list of phases or a reference to certain iteration. startAfterStrict Phases that must be terminated before this phase can start. Use the same syntax as for startAfter. duration Intended duration for the phase (must be defined but for the atOnce type). After this time elapses no new sessions will be started; there might be some running sessions still executing operations, though. maxDuration After this time elapses all sessions are forcefully terminated. isWarmup This marker property is propagated to results JSON and allows the reporter to hide some phases by default. maxUnfinishedSessions Maximum number of session that are allowed to be open when the phase finishes. When there are more open sessions all the other sessions are cancelled and the benchmark is terminated. Unlimited by default. maxIterations Maximum number of iterations this phase will be scaled to. More about that below. scenario The scenario this phase should execute. forks See forks section below. Below are properties specific for different phase types:\natOnce: users: Number of users started at the start of the phase. always: users: Number of users started at the start of the phase. When a user finishes it is immediatelly restarted (any pause must be part of the scenario). constantRate: usersPerSec: Number of users started each second. variance: Randomize delays between starting users following the exponential distribution. That way the starting users behave as the Poisson point process. If this is set to false users will be started with uniform delays. Default is true. maxSessions: Number of preallocated sessions. This number is split between all agents/executors evenly. increasingRate / decreasingRate: initialUsersPerSec: Rate of started users at the beginning of the phase. targetUsersPerSec: Rate of started users at the end of the phase. variance: Same as in `constantRate maxSessions: Same as in constantRate. Hyperfoil initializes all phases before the benchmark starts, pre-allocating memory for sessions. In the open-model phases it’s not possible to know how many users will be active at the same moment (if the server experiences a 3-second hiccup and we have 100 new users per second this should be at least 300 as all the users will be blocked). However we need to provide the estimate for memory pre-allocation. If the estimate gets exceeded the benchmark won’t fail nor block new users from starting, but new sessions will be allocated which might negatively impact results accuracy.\nProperties users, usersPerSec, initialUsersPerSec and targetUsersPerSec can be either a scalar number or scale with iterations using the base and increment components. You’ll see an example below.\nForks As mentioned earlier, users in each phase execute the same scenario. Often it’s convenient to define the ramp-up and steady-state phases just once: the builders allow to declare such ‘sub-phases’ called forks. For all purposes but the benchmark configuration these become regular phases of the same type, duration and dependencies (startAfter, startAfterStrict) as the ‘parent’ phase but slice the users according to their weight:\n... phases: - steadyState: constantRate: usersPerSec: 30 duration: 5m forks: sellShares: # This phase will start 10 users per second weight: 1 scenario: ... buyShares: # This phase will start 20 users per second weight: 2 scenario: ... These phases will be later identified as steadyState/sellShares and steadyState/buyShares. Other phases can still reference steadyState (without suffix) as the dependency: there will be a no-op phase steadyState that starts (becomes running) as soon as both the forks finish, finish immediately and terminate once both the forks terminate.\nIterations In some types of tests it’s useful to repeat given phase with increasing load - we call this concept iterations. In the example below you can see that *usersPerSec are not scalar values; in first iteration the actual value is set to the base value but in each subsequent iteration the value is increased by increment.\n... phases: - rampUp: increasingRate: # Create phases rampUp/000, rampUp/001 and rampUp/002 maxIterations: 3 # rampUp/000 will go from 1 to 100 users, rampUp will go from 101 to 200 users... initialUsersPerSec: base: 1 increment: 100 targetUsersPerSec: base: 100 increment: 100 # rampUp/001 will start after steadyState/000 finishes startAfter: phase: steadyState iteration: previous duration: 1m scenario: ... - steadyState: constantRate: maxIterations: 3 usersPerSec: base: 100 increment: 100 # steadyState/000 will start after rampUp/000 finishes startAfter: phase: rampUp iteration: same duration: 5m Similar to forks, there will be a no-op phase rampUp that will start after all rampUp/xxx phases finish and terminate after these terminate. Also there’s an implicit dependency between consecutive iterations: subsequent iteration won’t start until previous iteration terminates.\nThe startAfter property in this example uses a relative reference to iteration in another phase. Each reference has these properties:\n| Property | Description | | ——— | | | phase | Name of the referenced phase. | | iteration | Relative number of the iteration; either none (default) which references the top-level phase, same meaning the iteration with same number, or previous with number one lower. | | fork | Reference to particular fork in the phase/iteration. |\nIterations can be combined with forks as well - the result name would be e.g. steadyState/000/sellShares.\nNote that the maxSessions parameter is not scaling in iterations: all iterations execute the same scenario, the execution does not overlap and therefore it is possible to share the pool of sessions. Therefore you should provide an estimate for the iteration spawning the highest load.\nStaircase Hyperfoil tries to make opinionated decisions, simplifying common types of benchmark setups. That’s why it offers a simplified syntax for the scenario where you:\nramp the load to a certain level execute steady state for a while ramp it up further execute another steady state repeat previous two steps over and over This is called a staircase as the load increases in a shape of tilted stairs. Phases such benchmark should consist of are automatically created and linked together, using the same scenario/forks.\nstaircase as a top-level element in the benchmark is mutually exclusive to scenario and phases elements.\nHere is a minimalistic example of such configuration:\nname: simple benchmark http: host: http://localhost:8080 staircase: initialRampUpDuration: 10s steadyStateDuration: 10s rampUpDuration: 5s initialUsersPerSec: 5 incrementUsersPerSec: 1 maxIterations: 3 scenario: - test: - httpRequest: GET: /foo This element uses these properties:\nProperty Description initialRampUpDuration Duration of the very first phase. Default is no initial ramp-up. initialUsersPerSec Rate of users starting at the end of the initial ramp-up. steadyStateDuration Duration of each steady-state phase. rampUpDuration Duration of each but first ramp-up. Default are no ramp-ups. incrementUsersPerSec Increase in the rate of started users in each iteration. maxIterations Maximum number of steady-state iterations. scenario The scenario to be executed. forks The forks with different scenarios. ","categories":["Guide","Benchmark"],"description":"Defines a unit of workload simulation within a benchmark, representing a specific load pattern or behavior","excerpt":"Defines a unit of workload simulation within a benchmark, representing …","ref":"/hyperfoil-website-demo/docs/user-guide/benchmark/phases/","tags":["guides","benchmark","phases"],"title":"Phases"},{"body":"Welcome to the Hyperfoil User Guide, your comprehensive resource for everything you need to get started. This section covers installation, detailed instructions on defining benchmarks, and troubleshooting tips to help you resolve common issues. Whether you’re a beginner or an advanced user, you’ll find valuable information to enhance your performance testing with Hyperfoil.\n","categories":["Guide"],"description":"Comprehensive set of resourcs for everything you need to get started with Hyperfoil","excerpt":"Comprehensive set of resourcs for everything you need to get started …","ref":"/hyperfoil-website-demo/docs/user-guide/","tags":["guides"],"title":"User Guide"},{"body":"You can fetch release, distribute and start the cluster using Ansible Galaxy scripts; setup, test, shutdown\nFirst, get the scripts:\nansible-galaxy install hyperfoil.hyperfoil_setup,{{ site.last_release.galaxy_version }} ansible-galaxy install hyperfoil.hyperfoil_shutdown,{{ site.last_release.galaxy_version }} ansible-galaxy install hyperfoil.hyperfoil_test,{{ site.last_release.galaxy_version }} Now, edit your hosts file, it could look like this:\n[hyperfoil-controller] controller ansible_host=localhost [hyperfoil-agent] agent-1 ansible_host=localhost Note You can add more agents by duplicating the last line with agent-2 etc. Prepare your playbook; here is a short example that starts the controller, uploads and starts simple benchmark (the templating engine replaces the agents in benchmark script based on Ansible hosts) and waits for its completion. When it confirms number of requests executed it stops the controller.\n- hosts: [ hyperfoil-agent, hyperfoil-controller ] tasks: [] # This will only gather facts about all nodes - hosts: hyperfoil-controller roles: - hyperfoil.hyperfoil_setup - hosts: 127.0.0.1 connection: local roles: - hyperfoil.hyperfoil_test vars: test_name: example # Note that due to the way Ansible lookups work this will work only if hyperfoil-controller == localhost - hosts: 127.0.0.1 connection: local tasks: - name: Find number of requests set_fact: test_requests: \"{{ lookup('csvfile', 'example file=/tmp/hyperfoil/workspace/run/' + test_runid + '/stats/total.csv col=2 delimiter=,')}}\" - name: Print number of requests debug: msg: \"Executed {{ test_requests }} requests.\" - hosts: - hyperfoil-controller roles: - hyperfoil.hyperfoil_shutdown Finally, run the playbook:\nansible-playbook -i hosts example.yml ","categories":["Guide","Installation"],"description":"Deploy Hyperfoil using Ansible Galaxy scripts","excerpt":"Deploy Hyperfoil using Ansible Galaxy scripts","ref":"/hyperfoil-website-demo/docs/user-guide/installation/ansible/","tags":["guides","installation","ansible"],"title":"Ansible startup"},{"body":"If you haven’t checked the Getting started guide we strongly recommend going there first.\nBelow you’ll see commented examples of configuration; contrary to the Getting started guide these don’t present scenarios but rather list the various configuration options by example.\nhttpRequest You will most likely use step httpRequest in each of your scenarios, and there’s many ways to send a request.\n# This example should demonstrate various ways to configure one of the most important # steps - the httpRequest. name: http-requests http: host: http://example.com ergonomics: # Disable stopping the scenario on 4xx or 5xx response autoRangeCheck: false usersPerSec: 1 duration: 1 scenario: - jsonBody: - httpRequest: POST: /foo/bar # Hyperfoil doesn't know what's the content of the body string, if the server # requires correct content-type header you have to provide it yourselves headers: content-type: application/json # Here we specify a multi-line string. For more info about multiline strings, # compacting/chopping of newlines etc. please check out https://yaml-multiline.info/ body: | { \"foo\" : \"bar\" } - formBody: - set: myVar \u003c- foobar - httpRequest: POST: /myform # Here we don't need to add any headers as the form: knows that you're sending # a HTML form and it can add 'content-type: application/x-www-form-urlencoded' # automatically. body: # This will generate body 'foo=bar\u0026bar=foobar\u0026goo=foofoobarbar'. Any non-ascii # or otherwise illegal characters are correctly URL-encoded. form: - name: foo value: bar - name: bar fromVar: myVar - name: goo pattern: foo${myVar}bar - bodyFromFile: - httpRequest: POST: /foo/bar body: # This simply loads the file and sends it as the body without any conversion. # It does not add any headers nor make it a multipart upload as the browser would do. fromFile: usernames.txt - customHeaders: - set: token \u003c- dGhpcyBpcyBhIG5pY2UgYW5kIHNlY3VyZSB0b2tlbgo= - set: etag \u003c- \"ETag received in some previous request\" - httpRequest: GET: /secured/page # Note that HTTP headers are case-insensitive (use your preferred capitalization) headers: # Headers can be set inline accept: text/html # Session variables are replaced using the pattern syntax authorization: Bearer ${token} # Values from session variables can be also loaded using fromVar if-match: fromVar: etag - nonDefaultMetric: - httpRequest: GET: /cats # By default the metric name equals to name of the sequence ('nonDefaultMetric' here). # We can override that either with a constant value... metric: mammals - randomItem: toVar: animal list: - cats - dogs - locusts - httpRequest: GET: /foo/${animal} # ... or a regexp switch on the actual authority+path (e.g. example.com:8080/foo/cats). # If the benchmark uses single (default) HTTP target the authority is omitted. metric: - .*cats -\u003e mammals - .*dogs -\u003e mammals - -\u003e insects - toughSLAs: - httpRequest: GET: /index.html handler: status: # Any request that is not responded with status code will be marked as invalid. range: 200 # When you need only one SLA you can use mapping without the list (just forget the dash). sla: # This first SLA is evaluated when the phase completes from all requests that happened # during the phase. # Errors are connection failures, timeouts, 4xx and 5xx responses - errorRatio: 0.1 # You can set custom criteria for what is considered valid/invalid as with the status # handler above. By default any response with status that is not within 200-399 # is deemed invalid (as well as error). invalidRatio: 0.2 blockedRatio: 0.0 meanResponseTime: 10 ms # 90% requests should be under 100 ms, only 1% can be over 1 second limits: 0.9: 100 ms 0.99: 1 s # Following SLA is evaluated when all the statistics for the past second arrive, # accumulating results from the window (last 10 seconds). Therefore it can detect shorter # peaks of degraded performance. - window: 10s meanResponseTime: 50 ms Some scenarios need to access multiple HTTP endpoints; following example shows an example configuration for that:\n# This example manifests running a benchmark against multiple domains name: more-servers http: - host: http://example.com sharedConnections: 100 - host: https://hyperfoil.io # With HTTPS, most modern servers will negotiate HTTP 2.0 as the application protocol. # Since HTTP 2.0 uses multiple streams over single TCP (TLS in this case) connection # you can usually set lower number of connections. sharedConnections: 10 # You may want to route requests through a proxy/load balancer or simply use a domain # that is not resolvable. Configuration below will actually send the requests to addresses # set below, but the requests will use in the 'host: foobar.com' in the headers # and in SNI if this goes over TLS (HTTPS). - host: http://foobar.com # Hyperfoil will split the connections evenly to the defined addresses # (an entry is considered single address for this purpose even if DNS registers # multiple IP addresses for the hostname). sharedConnections: 30 addresses: # Both hostnames and IP addresses are allowed - proxy.my-locally-defined-domain.test - 192.168.1.10 # You can set a custom port as well - 192.168.1.11:8080 usersPerSec: 1 duration: 1 scenario: - test: - httpRequest: # Authority is the combination of hostname and port. authority: hyperfoil.io:443 GET: /docs - randomItem: toVar: hostname list: - example.com - foobar.com - httpRequest: # The target must be configured in the 'http' section above; the correctness # is usually validated when parsing/building the benchmark but sometimes it is # only possible at runtime, potentially resulting in errors during execution. authority: ${hostname}:80 GET: /foo ","categories":["Guide","Examples"],"description":"Collection of benchmark examples","excerpt":"Collection of benchmark examples","ref":"/hyperfoil-website-demo/docs/user-guide/examples/","tags":["guides","examples"],"title":"Examples"},{"body":"This section contains practical advices for common things you could want to use in a benchmark.\n","categories":["HowTo"],"description":"A collection of practical advices for common things in Hyperfoil","excerpt":"A collection of practical advices for common things in Hyperfoil","ref":"/hyperfoil-website-demo/docs/howtos/","tags":["how-to","guides"],"title":"How To"},{"body":"So far the benchmark contained only one type of load; certain number of users hitting the system, doing always the same (though data could be randomized). In practice you might want to simulate several types of workloads at once: in an eshop users would come browsing or buying products, and operators would restock the virtual warehouse.\nAlso, driving constant load may not be the best way to run the benchmark: often you want to slowly ramp the load up to let the system adjust (scale up, perform JIT, fill pools) and push the full load only after that. When trying to find system limits, you do the same repetitevely - ramp up the load, measure latencies and if the system meets SLAs (latencies below limits) continue ramping up the load until it breaks.\nIn Hyperfoil, this all is expressed through phases. We’ve already seen phases in the first quickstart as we wanted to execute a non-default type of load - running the workload only once. Let’s take a look on the “eshop” case first:\n# This benchmark simulates operations in an eshop, with browsing/shopping users # and operators restocking the warehouse. name: eshop http: host: http://localhost:8080 sharedConnections: 80 phases: # This defines a workload where users just look through the pages. - browsingUser: # This is the default type of workload, starting constant number of users # each second. Note that we don't speak about 'requests per second' as # the scenario may issue any number of requests. constantRate: duration: 10s usersPerSec: 10 scenario: # Browse is the name of our only sequence. We will avoid steps generating # random data for browsing for the sake of brevity. - browse: - httpRequest: GET: /quickstarts/eshop/items # Workload simulating users that are going to buy something - buyingUser: constantRate: # The length of this phase is not synchronized with other phases. # You might think that this is too flexible at first. duration: 10s usersPerSec: 5 scenario: - browse: - httpRequest: GET: /quickstarts/eshop/items handler: body: json: query: .[].id # This is a shortcut to store in array-typed variable # `itemIds` holding at most 10 elements. toArray: itemIds[10] - buy: # Pick id for a random item - randomItem: itemId \u003c- itemIds - httpRequest: POST: /quickstarts/eshop/items/${itemId}/buy - operator: # This is a different type of phase, running fixed number of users. # It is what most benchmarks do when you set number of threads; here we use # that as we know that we have fixed number of employees (operators) who # are restocking the warehouse. always: users: 5 duration: 10s scenario: - restock: # Select an id for random item to restock # Variables in different scenarios are completely unrelated. - randomInt: itemId \u003c- 1 .. 999 - randomInt: units \u003c- 1 .. 10 - httpRequest: POST: /quickstarts/eshop/items/${itemId}/restock body: # We are using url-encoded form data form: - name: addUnits fromVar: units # Operators need some pauses - otherwise we would start another # scenario execution (and fire another request) right away. - thinkTime: duration: 2s Start the same server as you did in the previous quickstarts:\npodman run --rm -p 8080:8083 quay.io/hyperfoil/hyperfoil-examples In next quickstart you’ll learn how to repeat and link the phases.\n","categories":["Quickstart"],"description":"Deep dive into the basics of phases","excerpt":"Deep dive into the basics of phases","ref":"/hyperfoil-website-demo/docs/getting-started/quickstart4/","tags":["quickstart","phases"],"title":"Phases - basics"},{"body":"Scenario Scenario is a set of sequences. The sequence is a block of sequentially executed steps. Contrary to steps in a sequence the sequences within a scenario do not need to be executed sequentially.\nThe scenario defines one or more initialSequences that are enabled from the beginning and other sequences that must be enabled by any of the previously executed sequences. To be more precise it is not the sequence that is enabled but a sequence instance as we can run a sequence multiple times in parallel (on different data). The initialSequences enable one instance of each of the referenced sequence.\nThe session keeps a currently executed step for each of the enabled sequence instances. The step can be blocked (e.g. waiting for a response to come). The session is looping through current steps in each of the enabled sequence instances and if the step is not blocked, it is executed. There’s no guaranteed order in which non-blocked steps from multiple enabled sequence instances will be executed.\nHere is an example of scenario:\nscenario: initialSequences: - login: - httpRequest: POST: /login # Enable instance of sequence 'wait5seconds' - next: wait5seconds sequences: - wait5seconds: - thinkTime: duration: 5s - next: logout - logout: - httpRequest: POST: /logout While this generic approach is useful for complex scenarios with branching logic, simple sequential scenarios can use orderedSequences short-cut enabling sequences in given order:\nscenario: orderedSequences: - login: - httpRequest: POST: /login - wait5seconds: - thinkTime: duration: 5s - logout: - httpRequest: POST: /logout This syntax makes the first sequence (login in this case) an initial sequence, adds the subsequent sequences and as the last step of each but the last sequence appends a next step scheduling a new instance of the following sequence.\nTo make configuration even more concise you can omit the orderedSequences level and start defining the list of sequences under scenario right away:\nscenario: - login: - httpRequest: POST: /login - wait5seconds: - thinkTime: duration: 5s - logout: - httpRequest: POST: /logout An exhaustive list of steps can be found in the steps reference.\n","categories":["Guide","Benchmark"],"description":"Defines the behavior and sequence of actions that virtual users (VU) perform during a benchmark execution","excerpt":"Defines the behavior and sequence of actions that virtual users (VU) …","ref":"/hyperfoil-website-demo/docs/user-guide/benchmark/scenario/","tags":["guides","benchmark","scenario"],"title":"Scenario"},{"body":"This section includes some guides to make the migration from other benchmarking tools easier.\n","categories":["Migration"],"description":"Set of guides to migrate from other tools to Hyperfoil","excerpt":"Set of guides to migrate from other tools to Hyperfoil","ref":"/hyperfoil-website-demo/docs/migration/","tags":["migration"],"title":"Migration"},{"body":"Previous quickstart presented a benchmark with three phases that all started at the same moment (when the benchmark was started) and had the same duration - different phases represented different workflows (types of user). In this example we will adjust the benchmark to scale the load gradually up.\nAt this point it would be useful to mention the lifecycle of phases; phase is in one of these states:\nnot started: As the name clearly says, the phase is not yet started. running: The agent started running the phase, i.e., performing the configured load. finished: When the duration elapses, no more new users are started. However, some might be still executing their scenarios. terminated: When all users complete their scenarios the phase becomes terminated. Users may be forcibly interrupted by setting maxDuration on the phase. cancelled If the benchmark cannot continue further, all remaining stages are cancelled. Let’s take a look into the example, where we’ll slowly (over 5 seconds) increase load to 10+5 users/sec, run with this load for 10 seconds, again increase it by another 10+5 users/sec and so forth until we reach 100+50 users per second. As we define maxIterations for these phases the benchmark will actually contain phases browsingUserRampUp/0, browsingUserRampUp/1, browsingUserRampUp/2 and so forth.\nname: eshop-scale http: host: http://localhost:8080 sharedConnections: 80 phases: - browsingUserRampUp: # This type of phase is similar to constantRate in the way how new users # are started but gradually increases the rate from `initialUsersPerSec` # to `targetUsersPerSec`. increasingRate: duration: 5s # In Hyperfoil, everything is pre-allocated = limited in size. Here we'll # set that we won't run more than 10 iterations of this phase. maxIterations: 10 # Number of started users per sec increases with the iteration; in first # iteration we'll go from 0 to 10 users/second, in second from 10 to 20 # and in last (10th) we'll reach 100 users/second. initialUsersPerSec: base: 0 increment: 10 targetUsersPerSec: base: 10 increment: 10 # Nth iteration of this phase will start when (N-1)th iteration of other # steady-state phases are finished. First iteration can start # immediatelly, of course. startAfter: - phase: browsingUserSteady iteration: previous - phase: buyingUserSteady iteration: previous # The \u0026browsingUser syntax below creates YAML alias: we can later # reference this scenario and it will be used verbatim in another phase. # It is possible to use aliases for both scenarios and sequences. scenario: \u0026browsingUser # We'll use the same scenario as in eshop.hf.yaml - browse: - httpRequest: GET: /quickstarts/eshop/items - browsingUserSteady: constantRate: duration: 10s maxIterations: 10 usersPerSec: base: 10 increment: 10 # Nth iteration of this phase will start when Nth iteration of ramp-up # phases is finished. # Note that there's implicit rule that Nth iteration of given phase will # start only after (N-1)th iteration terminates. startAfter: - phase: browsingUserRampUp iteration: same - phase: buyingUserRampUp iteration: same # This refers to the alias created above; in steady state we'll use the # same scenario. scenario: *browsingUser # These two phases will be very similar to browsingUserSteady and RampUp - buyingUserRampUp: increasingRate: duration: 5s maxIterations: 10 initialUsersPerSec: base: 0 increment: 5 targetUsersPerSec: base: 5 increment: 5 startAfter: - phase: browsingUserSteady iteration: previous - phase: buyingUserSteady iteration: previous # Again we'll use the same scenario as in eshop.hf.yaml scenario: \u0026buyingUser - browse: - httpRequest: GET: /quickstarts/eshop/items handler: body: json: query: .[].id toArray: itemIds[10] - buy: - randomItem: itemId \u003c- itemIds - httpRequest: POST: /quickstarts/eshop/items/${itemId}/buy - buyingUserSteady: constantRate: duration: 10s maxIterations: 10 usersPerSec: base: 5 increment: 5 startAfter: - phase: browsingUserRampUp iteration: same - phase: buyingUserRampUp iteration: same scenario: *buyingUser # Operator phase is omitted for brevity as we wouldn't scale that up Don’t forget to start the mock server as we’ve used in the previous quickstart.\npodman run --rm -p 8080:8083 quay.io/hyperfoil/hyperfoil-examples Synchronizing multiple workloads across iteration can become a bit cumbersome. That’s why we can keep similar types of workflow together, and split the phase into forks. In fact forks will become different phases, but these will be linked together so that you can refer to all of them as to a single phase. Take a look at the benchmark rewritten to use forks:\nname: eshop-forks http: host: http://localhost:8080 sharedConnections: 80 phases: - rampUp: increasingRate: duration: 5s maxIterations: 10 # Note that we have increased both the base and increment from 10 and 5 # to 15. This value is split between the forks based on their weight. initialUsersPerSec: base: 0 increment: 15 targetUsersPerSec: base: 15 increment: 15 startAfter: phase: steadyState iteration: previous forks: browsingUser: weight: 2 scenario: \u0026browsingUser - browse: - httpRequest: GET: /quickstarts/eshop/items buyingUser: weight: 1 scenario: \u0026buyingUser - browse: - httpRequest: GET: /quickstarts/eshop/items handler: body: json: query: .[].id toArray: itemIds[10] - buy: - randomItem: itemId \u003c- itemIds - httpRequest: POST: /quickstarts/eshop/items/${itemId}/buy - steadyState: constantRate: duration: 10s maxIterations: 10 usersPerSec: base: 15 increment: 15 startAfter: phase: rampUp iteration: same forks: browsingUser: weight: 2 scenario: *browsingUser buyingUser: weight: 1 scenario: *buyingUser # Operator phase is omitted for brevity as we wouldn't scale that up This definition will create phases rampUp/0/browsingUser, rampUp/0/buyingUser, rampUp/1/browsingUser etc. - you’ll see them in statistics.\nYou could orchestrate the phases as it suits you, using startAfter, startAfterStrict (this requires the referenced phase to me terminated instead of finished as with startAfter) or startTime with relative time since benchmark start.\nThis sums up basic principles, in next quickstart you’ll see how to start and use Hyperfoil in distributed mode.\n","categories":["Quickstart"],"description":"Delve into more advanced phase configuration","excerpt":"Delve into more advanced phase configuration","ref":"/hyperfoil-website-demo/docs/getting-started/quickstart5/","tags":["quickstart","phases","link"],"title":"Phases - advanced"},{"body":"It doesn’t work. Can you help me? The first step to identifying any issue is getting a verbose log - setting logging level to TRACE. How exactly you do that depends on the way you deploy Hyperfoil:\nIf you use CLI and the start-local command, just run it as start-local -l TRACE which sets the default logging level. You’ll find the log in /tmp/hyperfoil.local.log by default.\nIf you run Hyperfoil manually in standalone mode (non-clustered) the agent will run in the same JVM as the controller. You need to add -Dlog4j.configurationFile=file:///path/to/log4j2-trace.xml option when starting standalone.sh. If you start Hyperfoil through Ansible the same is set using hyperfoil_log_config variable.\nIf you run Hyperfoil in clustered mode, the failing code is probably in the agents. You need to pass the logging settings to agents using the deployer; with SSH deployer you need to add -Dlog4j.configurationFile=file:///path/to/log4j2-trace.xml to the extras property, in Kubernetes/Openshift there is the log option that lets you set the logging configuration through a config-map.\nAn example of Log4j2 configuration file with TRACE logging on is here:\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003cConfiguration\u003e \u003cAppenders\u003e \u003cConsole name=\"CONSOLE\" target=\"SYSTEM_OUT\"\u003e \u003cPatternLayout pattern=\"%d{HH:mm:ss,SSS} %-5p [%c] (%t) %m%n\"/\u003e \u003c/Console\u003e \u003c/Appenders\u003e \u003cLoggers\u003e \u003cRoot level=\"TRACE\"\u003e \u003cAppenderRef ref=\"CONSOLE\"/\u003e \u003c/Root\u003e \u003c/Loggers\u003e \u003c/Configuration\u003e TRACE-level logging can be very verbose to a point where it will pose a bottleneck. It’s recommended to isolate your problem at lower request rate if that’s possible.\nIf you need to print variable values for debugging, check out log step.\nMy phase fails with SLA failure ‘Progress was blocked waiting for a free connection. Hint: increase http.sharedConnections.’ By default Hyperfoil uses single connection to each HTTP(s) host; the default is set so low to force you thinking about connection limits early during test development. If you don’t override this value as in:\nhttp: host: http://hyperfoil.io sharedConnections: 1000 you get the error above, as the default SLA does not allow a session (virtual user) to be blocked due to not being able to acquire a connection from the connection pool immediatelly. If you can’t increase number of connections (or use HTTP2 that allows multiple requests to multiplex within single connection), you can set\n- httpRequest: sla: - blockedRatio: 1000 # any value big enough on each request to drop the default SLA. The blockedRatio value is a threshold ratio between time spent waiting for a free connection and waiting for the response.\nYou could also wonder why the sessions are missing a connection when the scenario should guarantee there’s always a free connection e.g. when using always phase type with same number of users and connections. However this may not hold when the connection is closed (either explicitly or after receiving a 5xx response) - while Hyperfoil starts replacing that connection immediatelly it takes a moment. If you expects connections to be closed add a few (10%) extra connections. Another reason could be poor balancing of connections and sessions to threads (should be gone in version 0.8).\nWhen I set ‘Host’ header for HTTP request I get warnings Hyperfoil automatically inserts the ‘Host’ header to each request and when you try to override that for certain request it emits a warning:\nSetting `host` header explicitly is not recommended. Use the HTTP host and adjust actual target using `addresses` property. With this warning on we don’t inject the header as it might be intended, e.g. when the target server does not parse headers in a case-sensitive way (as it should!) and you have to use certain case. However, if you want to run your requests to a different IP than the host resolves to (e.g. hit 127.0.0.1:8080 with Host: example.com) you should rather use\nhttp: host: http://hyperfoil.io addresses: - 127.0.0.1:8080 When I use a session variable I am seeing the error “Variable foo is not set!” Errors: in-vm: Variable foo is not set! On occasion a scenario step has been seen to execute out of sequence. To ensure the variable is set beforehand use initialSequences with the step that populates the variable.\n","categories":["Guide","Troubleshooting"],"description":"Common technical issues that you could hit during benchmark development","excerpt":"Common technical issues that you could hit during benchmark …","ref":"/hyperfoil-website-demo/docs/user-guide/troubleshooting/","tags":["guides","troubleshooting"],"title":"Troubleshooting"},{"body":"All but the simplest scenarios will use session variables. Hyperfoil sports steps that generate values into these variables (randomInt, randomItem, …), processors that write data from other sources to variables (store, array) and many places that read variables and use the values to perform some operations (httpRequest.path ) or alter control flow.\nHyperfoil uses different types of variables (slots in the session) for integer variables and generic objects (commonly strings). When a numeric value is received as a string (e.g. when parsing response headers) and you want to use it in a step that expects exclusively integral values you have to convert it explicitly, e.g. using the stringToInt action. Steps that read values to form a string can usually consume both types of variables, without any need for conversion.\nBesides user-defined variables there are some read-only pseudo-variables that can be used in the scenario as if these were regular variables:\nVariable Type Description hyperfoil.agent.id integer Zero-based index of the agent node hyperfoil.agents integer Number of agent nodes or 1 when running in in-VM mode (standalone or CLI) hyperfoil.agent.thread.id integer Zero-based index of current executor thread within this agent. hyperfoil.agent.thread s integer Number of executor threads running in this agent. hyperfoil.global.thread.id integer Zero-based index of current executor thread across all agents (unique). hyperfoil.global.threads integer Total number of executor threads on all agents. hyperfoil.phase.name object Full name of the currently executed phase (possibly including fork and iteration number). hyperfoil.phase.id integer Index of the currently executed phase. hyperfoil.phase.iteration integer Iteration number of the currently executed phase. hyperfoil.run.id object Identifier of the current run, e.g. 0123. hyperfoil.session.id integer Unique index of this virtual user (session). Note that in benchmarks with multiple phases the indices might not be zero-based. String interpolation Components that accept string values usually allow you to use a pattern - parts of the string can be replaced in runtime with the value from a session variable. A simple example of pattern would be The quick brown ${wild-animal} jumps over the lazy ${domestic-animal} - variables wild-animal and domestic-animal would get replaced with their respective values.\nWhen you really want to use ${wild-animal} in a value for such component you should escape it with one more dollar sign: This $${variable} won't be replaced will be rendered into This ${variable} won't be replaced.\nThere are a few transformations that you can perform with a variable value while interpolating the pattern:\n${urlencode:my-variable} will replace characters in the my-variable using URLEncoder.encode (using UTF-8 encoding). ${{ '{%05d' }}:my-number} and other formatter strings ending with d, o, x or X will convert an integer variable using Formatter. ${replace/\u003cregexp\u003e/\u003creplacement\u003e/\u003cflags\u003e:my-variable} perform Java regexp replacement on my-variable contents. Note that you can use any character after replace, not just / - this becomes the separator between regexp, replacement and flags. The only flags currently supported is g - replacing all occurences of that string (by default only first occurence is replaced). Sequence-scoped access When an array or collection is stored in a session variable you can access the individual elements by appending [.] to the variable name, e.g. my-variable[.]. You can see that we don’t use the actual index into the array: instead we use current sequence instance index. You can read more about running multiple sequences concurrently in the Architecture/Scenario Execution.\n","categories":["Guide","Benchmark"],"description":"Data placeholders within sessions that hold values throughout the execution of a benchmark scenario","excerpt":"Data placeholders within sessions that hold values throughout the …","ref":"/hyperfoil-website-demo/docs/user-guide/benchmark/variables/","tags":["guides","benchmark","variables"],"title":"Variables"},{"body":"Before exploring this reference you should be familiar with the basic structure of a benchmark. If you’re not sure what is the difference between the phase, scenario and sequence check out the concepts in user guide.\nThis reference lists all the steps and handlers used in a scenario. The lists below are not finite; you can also easily develop and use your own components, but Hyperfoil provides generic components for the most common tasks out of the box.\nThere are few generic types of components:\nsteps actions processors This documentation is auto-generated from Javadoc in source code, explaining format for each key-value pair in benchmark YAML. If there is an issue with these docs (e.g. property showing no description) please file an issue on GitHub.\nThis is the basic structure of the docs:\nEXAMPLE\nExample description.\nProperty Type Description Key Class Explanation for the value YAML syntax\nEXAMPLE: Key: Value For example, the POST definition in httpRequest step looks like this:\nPOST\nGeneric builder for generating a string.\nProperty Type Description fromVar String Load the string from session variable. pattern String Use pattern replacing session variables. value String String value used verbatim. YAML syntax\nPOST: pattern: /user/${userId}/info You might be wondering why the documentation above does not mention anything about issuing a HTTP request. In fact the top-level POST property httpRequest says “Issue HTTP POST request to given path.” but the POST() method returns a generic string builder; this generic builder is used as the path for the HTTP request with POST method.\nIf the ’type’ is not a scalar value, the key in ‘property’ works as a link to further property mapping. It’s also possible that the property has multiple options, e.g. accepting both property mapping and list of values.\nFor brevity some components have inline definition like this:\nSET\nSet variable in session to certain value.\nInline definition Use var \u003c- value. YAML syntax\nset: myVar \u003c- \"This is my value\" Hyperfoil defines automatically generated JSON schema for the benchmark; you can use that in Visual Studio Code to automatically check the YAML syntax.\n","categories":"","description":"List of all possible steps and handlers that can be used for the benchmark development","excerpt":"List of all possible steps and handlers that can be used for the …","ref":"/hyperfoil-website-demo/docs/reference/","tags":"","title":"Reference"},{"body":"Until now we have always started our benchmarks using an embedded controller in the CLI, using the start-local command. This spawns a server in the CLI JVM. CLI communicates with it using standard REST API, though the server port is randomized and listens on localhost only. All the benchmarks and run results are also stored in /tmp/hyperfoil/ - you can change the directory as an argument to the start-local command. While the embedded controller might be convenient for a quick test or when developing the scenario it’s not something that you’d use for a full-fledged benchmark.\nWhen testing a reasonably performing system you need multiple nodes driving the load - we call them agents. These agents sync up, receive commands and report statistics to a master node, the controller. This node exposes a RESTful API to upload \u0026 start the benchmark, watch its progress and download results.\nThere are two other scripts in the bin/ directory:\nstandalone.sh starts both the controller and (one) agent in a single JVM. This is not too different from the controller embedded in CLI. controller.sh starts clustered Vert.x and deploys the controller. Agents are started as needed in different nodes. You’ll see this in the next quickstart. Also note that it is possible to run Hyperfoil in Openshift.\nOpen two terminals; in one terminal start the standalone server and in second terminal start the CLI.\nbin/standalone.sh and\nbin/cli.sh Then, let’s try to connect to the server (by default running on http://localhost:8090) and upload the single-request benchmark:\n# This is the name of the benchmark. It's recommended to keep this in sync with # name of this file, adding extension `.hf.yaml`. name: single-request # We must define at least one HTTP target, in this case it becomes a default # for all HTTP requests. http: host: http://hyperfoil.io # Simulation consists of phases - potentially independent workloads. # We'll discuss phases more in detail in next quickstarts. phases: # `example` is the name of the single phase in this benchmark. - example: # `atOnce` with `users: 1` results in running the scenario below just once atOnce: users: 1 scenario: # The only sequence in this scenario is called `test`. - test: # In the only step in this sequence we'll do a HTTP GET request # to `http://hyperfoil.io/` - httpRequest: GET: / # Inject helpers to make this request synchronous, i.e. keep # the sequence blocked until Hyperfoil processes the response. sync: true From the second terminal, the one running the Hyperfoil CLI, issue the following commands:\n[hyperfoil@localhost]$ connect Connected! Server has these agents connected: * localhost[REGISTERED] [hyperfoil@localhost]$ upload .../single-request.hf.yaml Loaded benchmark single-request, uploading... ... done. [hyperfoil@localhost]$ run single-request Started run 0001 When you switch to the first terminal (the one running the controller), you can see in the logs that the benchmark definition was stored on the server, the benchmark has been executed and its results have been stored to disk. Hyperfoil by default stores benchmarks in directory /tmp/hyperfoil/benchmark and data about runs in /tmp/hyperfoil/run; check it out:\ncolumn -t -s , /tmp/hyperfoil/run/0001/stats/total.csv Phase Name Requests Responses Mean Min p50.0 p90.0 p99.0 p99.9 p99.99 Max MeanSendTime ConnFailure Reset Timeouts 2xx 3xx 4xx 5xx Other Invalid BlockedCount BlockedTime MinSessions MaxSessions example test 1 1 267911168 267386880 268435455 268435455 268435455 268435455 268435455 268435455 2655879 0 0 0 0 1 0 0 0 0 0 0 Reading CSV/JSON files directly is not too comfortable; you can check the details through CLI as well:\n[hyperfoil@localhost]$ stats Total stats from run 002D Phase Sequence Requests Mean p50 p90 p99 p99.9 p99.99 2xx 3xx 4xx 5xx Timeouts Errors example: test: 1 267.91 ms 268.44 ms 268.44 ms 268.44 ms 268.44 ms 268.44 ms 0 1 0 0 0 0 By the time you type the stats command into CLI the benchmark is already completed and the CLI shows stats for the whole run. Let’s try running the {% include example_link.md src=‘eshop-scale.hf.yaml’ %} we’ve seen in previous quickstart; this will give us some time to observe on-line statistics as the benchmark is progressing:\npodman run --rm -p 8080:8083 quay.io/hyperfoil/hyperfoil-examples [hyperfoil@localhost]$ upload .../eshop-scale.hf.yaml Loaded benchmark eshop-scale, uploading... ... done. [hyperfoil@localhost]$ run eshop-scale Started run 0002 Run 0002, benchmark eshop-scale ... Here the console would automatically jump into the status command, displaying the progress of the benchmark online. Press Ctrl+C to cancel that (it won’t stop the benchmark run) and run the stats command:\n[hyperfoil@localhost]$ stats Recent stats from run 0002 Phase Sequence Requests Mean p50 p90 p99 p99.9 p99.99 2xx 3xx 4xx 5xx Timeouts Errors buyingUserSteady/000: buy: 8 1.64 ms 1.91 ms 3.05 ms 3.05 ms 3.05 ms 3.05 ms 8 0 0 0 0 0 browse: 8 2.13 ms 2.65 ms 3.00 ms 3.00 ms 3.00 ms 3.00 ms 8 0 0 0 0 0 browsingUserSteady/000: browse: 8 2.74 ms 2.69 ms 2.97 ms 2.97 ms 2.97 ms 2.97 ms 8 0 0 0 0 0 Press Ctr+C to stop watching... You can go back to the run progress using the status command (hint: use status --all to display all phases, including those not started or already terminated):\n[hyperfoil@localhost]$ status Run 0002, benchmark eshop-scale Agents: localhost[INITIALIZED] Started: 2019/04/15 16:27:24.526 NAME STATUS STARTED REMAINING FINISHED TOTAL DURATION browsingUserRampUp/006 RUNNING 16:28:54.565 2477 ms buyingUserRampUp/006 RUNNING 16:28:54.565 2477 ms Press Ctrl+C to stop watching... Since we are showing this quickstart running the controller and CLI on the same machine it’s easy to fetch results locally from /tmp/hyperfoil/run/XXXX/.... To save you SSHing into the controller host and finding the directories in a ’true remote’ case there’s the export command; This fetches statistics to your computer where you’re running CLI. You can chose between default JSON format (e.g. export 0002 -f json -d /path/to/dir) and CSV format (export 0002 -f csv -d /path/to/dir) - the latter packs all CSV files into single ZIP file for your convenience.\nWhen you find out that the benchmark is not going well, you can terminate it prematurely:\n[hyperfoil@localhost]$ kill Kill run 0002, benchmark eshop-scale(phases: 2 running, 0 finished, 40 terminated) [y/N]: y Killed. In the next quickstart we will deal with starting clustered Hyperfoil.\n","categories":["Quickstart"],"description":"Learn how to start the Hyperfoil server in standalone mode","excerpt":"Learn how to start the Hyperfoil server in standalone mode","ref":"/hyperfoil-website-demo/docs/getting-started/quickstart6/","tags":["quickstart","server","standalone"],"title":"Running the server"},{"body":"It is often useful to keep a single benchmark in version control but change parts of it depending on the infrastructure where it is executed or intended load. Since version 0.18 Hyperfoil supports parametrization of the benchmark through templates.\nInspired by other (more complex) YAML templating systems we decided to use YAML tags to pre-process the YAML. Templating happens even before applying the YAML nodes onto BenchmarkBuilder, therefore it is not possible to do that programmatically or with the serialized form.\nIf you are working with CLI or WebCLI there is little difference to regular benchmarks: you upload and edit the benchmark as usual. However it is not possible to auto-detect files before the benchmark is constructed from the template (the reference to a file could be a template, too!), therefore you need to pass all files using option -f to the upload/edit command.\nWhen the benchmark template is uploaded, upon running it (run mybenchmark) you either pass the parameters using option -P or you are interactively asked to provide those params. The parameters are stored in CLI context and on subsequent invocations of run you don’t need to set these. If you want to remove the parameters from the context use option -r/--reset-params. To see both default and current parameters you can use the inspect command.\nParam You should use !param to replace single scalar value:\n1name: example 2http: 3 host: http://localhost:8080 4usersPerSec: !param NUM_USERS 5duration: !param DURATION 60s 6scenario: # ... In this simple constant-rate benchmark you can customize the number of users starting each second as well as the duration. There’s no default for NUM_USERS; you will be asked to provide it when you run the benchmark. On the other hand DURATION has a default value of 60s - anything after the space after parameter name counts as the default value.\nParameters don’t have to be upper-case. The identifier is case-sensitive, though.\nrun scalar-value-example -PNUM_USERS=5 -PDURATION=60s Concat Sometimes you need to replace only part of a string: !concat will let you do that:\n1name: example 2http: 3 host: !concat [ \"http://\", !param SERVER localhost, \":8080\" ] 4usersPerSec: 10 5duration: 60s 6scenario: # ... In this example we will customize the host with the concatenation of http://, parameter SERVER with default localhost and :8080. This example uses inline-form of list, though you can use the regular list (one item per line), too.\nForeach Chances are you need to generate a list based on a param: you can do this using the !foreach:\n1name: example 2http: !foreach 3 items: http://example.com,http://hyperfoil.io 4 separator: \",\" # comma is the default separator 5 param: ITEM # ITEM is the default parameter name 6 do: 7 host: !param ITEM 8usersPerSec: 10 9duration: 60s 10scenario: # ... This splits the items using the separator regexp and produces a list of values or mappings while the param ITEM is set to one of the values from items list. The example above would result in:\nname: example http: - host: http://example.com - host: http://hyperfoil.io usersPerSec: 10 duration: 60s scenario: # ... You can also set items to a YAML list; in that case the separator is not used:\nmyList: !foreach items: [\"A\", !param B, \"C\"] param: FOO do: !param FOO The last example with -PB=bar would result in:\nmyList: - A - bar - C Renaming the param used for iteration can be useful in nested loops: without renaming the inner foreach would shadow the outer one.\nAnchors and aliases YAML has a built-in concept for removing repetitive sections: anchors and aliases. With the templating system you can use that universally throughout the file (in versions before 0.18 the support was limited to forks, scenarios and sequences):\nfoo: \u0026hello-world hello: world anotherFoo: sayHi: *hello-world myList: - *hello-world - bar is interpretted as\nfoo: hello: world anotherFoo: sayHi: hello: world myList: - hello: world - bar ","categories":["Guide","Benchmark"],"description":"Templates in Hyperfoil allow for efficient benchmark parametrization, enabling users to customize benchmarks based on specific execution environments or intended loads\n","excerpt":"Templates in Hyperfoil allow for efficient benchmark parametrization, …","ref":"/hyperfoil-website-demo/docs/user-guide/benchmark/templates/","tags":["guides","benchmark","templates"],"title":"Templates"},{"body":"Previously we’ve learned to start Hyperfoil in standalone server mode, and to do some runs through CLI. In this quickstart we’ll see how to run your benchmark distributed to several agent nodes.\nHyperfoil operates as a cluster of Vert.x. When the benchmark is started, it deploys agents on other nodes according to the benchmark configuration - these are Vert.x nodes, too. Together controller and agents form a cluster and communicate over the event bus.\nIn this quickstart we’ll use the SSH deployer; make sure your machine has SSH server running on port 22 and you can login using your pubkey ~/.ssh/id_rsa. The SSH deployer copies the necessary JARs to /tmp/hyperfoil/agentlib/ and starts the agent there. For instructions to run Hyperfoil in Kubernetes or Openshift please consult the Installation docs.\nWhen we were running in the standalone or local mode we did not have to set any agents in the benchmark definition. That changes now as we need to inform the controller where the agents should be deployed. Let’s see a benchmark - two-agents.hf.yaml that has those agents defined.\nname: two-agents # List of agents the Controller should deploy agents: # This defines the agent using SSH connection to localhost, port 22 agent-one: localhost:22 # Another agent on localhost, this time defined using properties agent-two: host: localhost port: 22 http: host: http://localhost:8080 usersPerSec: 10 duration: 10s scenario: - test: - httpRequest: GET: / The load the benchmark generates is evenly split among the agents, so if you want to use another agent, you don’t need to do any calculations - just add the agent and you’re good to go.\nOpen three terminals; in the first start the controller using bin/controller.sh, in second one open the CLI with bin/cli.sh and in the third one start the example workload server:\npodman run --rm -p 8080:8083 quay.io/hyperfoil/hyperfoil-examples Connect, upload, start and check out the benchmark using CLI exactly the same way as we did in the previous quickstart:\n[hyperfoil@localhost]$ connect Connected! [hyperfoil@localhost]$ upload .../two-agents.hf.yaml Loaded benchmark two-agents, uploading... ... done. [hyperfoil@localhost]$ run two-agents Started run 004A [hyperfoil@localhost]$ status Run 004A, benchmark two-agents Agents: agent-one[STARTING], agent-two[STARTING] Started: 2019/04/17 17:08:19.703 Terminated: 2019/04/17 17:08:29.729 NAME STATUS STARTED REMAINING FINISHED TOTAL DURATION main TERMINATED 17:08:19.708 17:08:29.729 10021 ms (exceeded by 21 ms) [hyperfoil@localhost]$ stats Total stats from run 004A Phase Sequence Requests Mean p50 p90 p99 p99.9 p99.99 2xx 3xx 4xx 5xx Timeouts Errors main: test: 106 3.12 ms 2.83 ms 3.23 ms 19.53 ms 25.30 ms 25.30 ms 106 0 0 0 0 0 You see that we did 106 requests which fits the assumption about running 10 user sessions per second over 10 seconds, while we have used 2 agents.\nVert.x clustering is using Infinispan and JGroups; depending on your networking setup it might not work out-of-the-box. If you experience any trouble, check out the FAQ.\nNext quickstart will get back to the scenario definition; we’ll show you how to extend Hyperfoil with custom steps and handlers.\n","categories":["Quickstart"],"description":"Learn how to start the Hyperfoil server in clustered mode","excerpt":"Learn how to start the Hyperfoil server in clustered mode","ref":"/hyperfoil-website-demo/docs/getting-started/quickstart7/","tags":["quickstart","server","clustered"],"title":"Clustered mode"},{"body":"You have probably already read the Custom steps and handlers quickstart which shows how to create a simple component. It can get more tricky when the component embeds other components, though.\nThe build of scenario happens in two phases. In first phase the sequences, steps and components call method prepareBuild(). Most often that method uses the default (empty) implementation, but if your component (e.g. custom step) embeds another one (e.g. instance of a Processor) it should call its prepareBuild() method, too. The purpose of this method is mutatation of builders, for example adding extra steps to the scenario or registering handlers elsewhere. We’ll see how to do that later on.\nIn the second phase build(...) is called. At this point the builders tree must not be mutated further as some components might be already built and the change could not be reflected; this method should validate the builder and return the component.\nMutations of the scenario can be position dependent (e.g. adding one step before or after current step). Each builder that needs to know its position therefore must override two methods, setLocator(Locator) and copy(Locator). The former usually just sets a field storing the Locator and delegates the call to embedded components, the latter performs a deep copy of this builder, storing the provided Locator in the copy.\nIf you want to add some extra steps elsewhere in the scenario, you can implement the prepareBuild() method this way:\nJava private Locator locator; /* ... */ @Override public void prepareBuild() { // insert custom step before this step in this sequence locator.sequence().insertBefore(locator) .step(new CustomStep(42)); // insert custom step after this step in this sequence, using a builder locator.sequence().insertAfter(locator) .stepBuilder(new CustomStep.Builder().foo(42)); // insert a new sequence 'foo' with single custom step to the scenario locator.scenario().sequence(\"foo\") .step(new CustomStep(42)); } Note that when you insert any builders in the prepareBuild() methods it is possible that its prepare phase won’t be executed (if inserting to already prepared sequence), though it might be (if inserting to sequence that is yet to be prepared). It’s up to the calling code to make sure that the inserted component will be prepared.\nAs mentioned above, components often embed other components. To service-load a component, e.g. an Action you define these methods in the builder:\nJava // This method is not different from regular fluent setter // and it's useful for programmatic configuration. public Builder onEvent(Action.Builder onEvent) { // you can ensure here that this is called only once this.onEvent = onEvent; return this; } // This is the service-loading method. public ServiceLoadedBuilderProvider\u003cAction.Builder\u003e onEvent() { return new ServiceLoadedBuilderProvider\u003c\u003e(Action.Builder.class, locator, this::onEvent); } The parser instantiates concrete implementation of the Action.Builder, calls its setters and then passes the builder to the consumer method referenced as this::onEvent. Note that the call to ServiceLoadedBuilderProvider constructor requires a Locator parameter, as the embedded Action can mutate the scenario later on.\n","categories":"","description":"How to develop your own extensions","excerpt":"How to develop your own extensions","ref":"/hyperfoil-website-demo/docs/extensions/","tags":"","title":"Extensions"},{"body":"It might be useful to run certain scripts before and after the run, e.g. starting some infrastructure, preloading database, gathering CPU stats during the test and so on. That’s why Hyperfoil introduces pre- and post-hooks to the run.\nSome scripts are not specific to the test being run - these should be deployed on controller as files in *root*/hooks/pre/ and *root*/hooks/post directories where root is controller’s root directory, /tmp/hyperfoil/ by default. Each of these directories should contain executable scripts or binaries that will be run in alphabetic order. We strongly suggest using the format 00-my-script.sh to set the order using first two digits.\nKubernetes/Openshift deployments use the same strategy; the only difference is that the pre and post directories are mapped as volumes from a ConfigMap resource.\nOther scripts may be specific to the benchmark executed and therefore you can define them directly in the YAML files. You can either use inline command that will be executed using sh -c your-command --your-options or create a Java class implementing io.hyperfoil.core.hooks.RunHook and register it to be loaded as other Hyperfoil extensions.\nname: my-benchmark pre: 01-inline: curl http://example.com 02-custom: my-hook: foo: bar post: 99-some-final-hook: ... ... The lists of hooks from controller directories and benchmark are merged; if there’s a conflict between two hooks from these two sources the final execution order is not defined (but both get executed).\nIn case of inline command execution the stderr output will stay on stderr, stdout will be caputered by Hyperfoil and stored in *rundir*/*XXXX*/hooks.json. As the post-hooks are executed after info.json and all.json get written the output cannot be included inside those files. This order of execution was chosen because it’s likely that you will upload these files to a database - yes, using a post-hook.\n","categories":["Guide","Benchmark"],"description":"Mechanisms that allow users to run specific scripts or commands automatically before and after executing a benchmark run","excerpt":"Mechanisms that allow users to run specific scripts or commands …","ref":"/hyperfoil-website-demo/docs/user-guide/benchmark/hooks/","tags":["guides","benchmark","hooks"],"title":"Hooks"},{"body":"As a user you’ll probably interact with the Controller through CLI. However when you set up e.g. regression runs in CI you’ll need to control the test programmatically. Some limited capabilities are already exposed through Ansible Galaxy scripts but to get full control you can use the REST API - the same as the CLI or Ansible scripts connect to.\nHyperfoil Controller API is defined through OpenAPI 3 Specification. Our OpenAPI reference defines some types as free-form objects (e.g. the benchmark definition); refer to source code in these cases.\n","categories":"","description":"OpenAPI 3 specification of the Hyperfoil controller","excerpt":"OpenAPI 3 specification of the Hyperfoil controller","ref":"/hyperfoil-website-demo/docs/restapi/","tags":"","title":"Controller API"},{"body":"Hyperfoil offers some basic steps to do HTTP requests, generate data, alter control flow in the scenario etc., but your needs may surpass the features implemented so far. Also, it might be just easier to express your logic in Java code than combining steps in the YAML. The downside is reduced ability to reuse and more tight dependency on Hyperfoil APIs.\nThis quickstart will show you how to extend Hyperfoil with custom steps and handlers. As we use the standard Java ServiceLoader approach, after you build the module you should drop it into extensions directory. (Note: if you upload the benchmarks through CLI you need to put it to both the machine where you run the CLI and to the controller.)\nEach extension will consist of two classes:\nBuilder, is loaded as service and creates the immutable extension instance extension (Step, Action or handler) Let’s start with a io.hyperfoil.api.config.Step implementation. The interface has single method invoke(Session) that should return true if the step was executed and false if its execution has been blocked and should be retried later. In case that the execution is blocked the invocation must not have any side effects - e.g. if the step is fetching objects from some pools and one of the pools is depleted, it should release the already acquired objects back to the pool.\nWe’ll create a step that will divide variable from a session by a (configurable) constant and store the result in another variable.\nJava public class DivideStep implements Step { // All fields in a step are immutable, any state must be stored in the Session private final ReadAccess fromVar; private final IntAccess toVar; private final int divisor; public DivideStep(ReadAccess fromVar, IntAccess toVar, int divisor) { // Variables in session are not accessed directly using map lookup but // through the Access objects. This is necessary as the scenario can use // some simple expressions that are parsed when the scenario is built // (in this constructor), not at runtime. this.fromVar = fromVar; this.toVar = toVar; this.divisor = divisor; } @Override public boolean invoke(Session session) { // This step will block until the variable is set, rather than // throwing an error or defaulting the value. if (!fromVar.isSet(session)) { return false; } // Session can store either objects or integers. Using int variables is // more efficient as it prevents repeated boxing and unboxing. int value = fromVar.getInt(session); toVar.setInt(session, value / divisor); return true; } ... Then we need a builder class that will allow us to configure the step. To keep related classes together we will define it as inner static class:\nJava public class DivideStep implements Step { ... // Make this builder loadable as service @MetaInfServices(StepBuilder.class) // This is the step name that will be used in the YAML @Name(\"divide\") public static class Builder extends BaseStepBuilder\u003cBuilder\u003e implements InitFromParam\u003cBuilder\u003e { // Contrary to the step fields in builder are mutable private String fromVar; private String toVar; private int divisor; // Let's permit a short-form definition that will store the result // in the same variable. Note that the javadoc @param is used to generate external documentation. /** * @param param Use myVar /= constant */ @Override public Builder init(String param) { int divIndex = param.indexOf(\"/=\"); if (divIndex \u003c 0) { throw new BenchmarkDefinitionException(\"Invalid inline definition: \" + param); } try { divisor(Integer.parseInt(param.substring(divIndex + 2).trim())); } catch (NumberFormatException e) { throw new BenchmarkDefinitionException(\"Invalid inline definition: \" + param, e); } String var = param.substring(0, divIndex).trim(); return fromVar(var).toVar(var); } // All fields are set in fluent setters - this helps when the scenario // is defined through programmatic configuration. // When parsing YAML the methods are invoked through reflection; // the attribute name is used for the method lookup. public Builder fromVar(String fromVar) { this.fromVar = fromVar; return this; } public Builder toVar(String toVar) { this.toVar = toVar; return this; } // The parser can automatically convert primitive types and enums. public Builder divisor(int divisor) { this.divisor = divisor; return this; } @Override public List\u003cStep\u003e build() { // You can ignore the sequence parameter; this is used only in steps // that require access to the parent sequence at runtime. if (fromVar == null || toVar == null || divisor == 0) { // Here is a good place to check that the attributes are sane. throw new BenchmarkDefinitionException(\"Missing one of the required attributes!\"); } // The builder has a bit more flexibility and it can create more than // one step at once. return Collections.singletonList(new DivideStep( SessionFactory.readAccess(fromVar), SessionFactory.intAccess(toVar), divisor)); } } ... As the comments say, the builder is using fluent setter syntax to set the attributes. When you want to nest attributes under another builder, you can just add parameter-less method FooBuilder foo() the returns an instance of FooBuilder; the parser will fill this instance as well. There are some interfaces your builder can implement to accept lists or different structures, but the description is out of scope of this quickstart.\nThe builder class has two annotations: @Name which specifies the name we’ll use in YAML as step name, and @MetaInfServices with StepBuilder.class as the parameter. If you were to implement other type of extension, this would be Action.Builder.class, Request.ProcessorBuilder.class etc. In order to record the service in META-INF directory in the jar you must also add this dependency to your module:\n\u003cdependency\u003e \u003cgroupId\u003eorg.kohsuke.metainf-services\u003c/groupId\u003e \u003cartifactId\u003emetainf-services\u003c/artifactId\u003e \u003coptional\u003etrue\u003c/optional\u003e \u003c/dependency\u003e The whole class can be inspected here and it is already included in the extensions directory. You can try running bin/standalone.sh, upload and run divide.hf.yaml. You should see about 5 log messages in the server log.\n# This benchmark demonstrates custom steps name: divide http: host: http://localhost:8080 usersPerSec: 1 duration: 5s scenario: - test: - setInt: foo \u003c- 33 - divide: foo /= 3 - log: message: Foo is {} vars: - foo There are several other integration points but Step:\nio.hyperfoil.api.session.Action is very similar to step, but it does not allow blocking. Implement Action.BuilderFactory to define new actions.\nStatusHandler, HeaderHandler and BodyHandler in io.hyperfoil.api.http package process different stages of HTTP response parsing. All these have BuilderFactory inner interface for you to implement.\nio.hyperfoil.api.connection.Processor performs later generic stages of response processing. As this interface is generic, there are two factories that you could use: i.h.a.c.Request.ProcessorBuilderFactory and i.h.a.c.HttpRequest.ProcessorBuilderFactory.\nThere is quite some boilerplate code in the process of creating a new component; that’s why you can use Hyperfoil Codegen Maven plugin to scaffold the basic outline for you. Go to the module where you want the component generated and run:\nmvn io.hyperfoil:hyperfoil-codegen-maven-plugin:skeleton The plugin will ask you for the package name, component name and type and write down the source code skeleton. You can provide the parameters right on commandline like\nmvn io.hyperfoil:hyperfoil-codegen-maven-plugin:skeleton \\ -Dskeleton.package=foo.bar -Dskeleton.name=myComponent -Dskeleton.type=step Note The generator does not add the dependency to org.kohsuke.metainf-services:metainf-services to this module’s pom.xml, you need to do that manually. If you add io.hyperfoil as a plugin group to your $HOME/.m2/settings.xml like this:\n\u003csettings\u003e \u003cpluginGroups\u003e \u003cpluginGroup\u003eio.hyperfoil\u003c/pluginGroup\u003e \u003c/pluginGroups\u003e ... \u003c/settings\u003e you can use the short syntax for the generator:\nmvn hyperfoil-codegen:skeleton -Dskeleton.name=.... See also further information about custom extensions development.\nThis is the last quickstart in this series; if you seek more info check out the documentation or talk to us on GitHub Discussions.\n","categories":["Quickstart"],"description":"","excerpt":"Hyperfoil offers some basic steps to do HTTP requests, generate data, …","ref":"/hyperfoil-website-demo/docs/getting-started/quickstart8/","tags":["quickstart","custom","steps","handlers"],"title":"Custom components"},{"body":"This section hosts only single property at this moment:\nProperty Default Description repeatCookies true Automatically parse cookies from HTTP responses, store them in session and resend them with subsequent requests. userAgentFromSession true Add user-agent header to each request, holding the agent name and session id. autoRangeCheck true Mark 4xx and 5xx responses as invalid. You can also turn this off in each step. stopOnInvalid true When the session receives an invalid response it does not execute any further steps, cancelling all requests and stopping immediately. followRedirect NEVER Default value for httpRequest.handler.followRedirect. ","categories":["Guide","Benchmark"],"description":"Configuration options that enhance usability and automation of benchmarking sessions","excerpt":"Configuration options that enhance usability and automation of …","ref":"/hyperfoil-website-demo/docs/user-guide/benchmark/ergonomics/","tags":["guides","benchmark","ergonomics"],"title":"Ergonomics"},{"body":"While we have already explained basic concepts in the benchmark and last quickstart shows how to create a custom steps or handlers here we will show how Hyperfoil internally works and give you better idea how to create non-trivial extensions.\nBuilding the scenario The road from a YAML file to executing the benchmark starts with creating the builder tree. Either the CLI or controller presents this file to the parser (mostly classes from the io.hyperfoil.core.parser package) which reads it token-by-token and invoke methods on the io.hyperfoil.api.config.BenchmarkBuilder instance. Some parts of the parser are hard-coded, but most of them use reflection - that’s why you don’t need to write the parser yourselves.\nGenerally speaking each mapping (foo: bar) results in invoking method foo() on the builder; if this method accepts an argument (bar) the return value could be ignored - the method mutates the builder and that is all. Other methods do not accept any arguments and return another builder instance - the YAML subtree is then applies to this builder. The builder tree then roughly maps to the YAML tree in the original file.\nWhen the YAML is fully read we execute the first phase of building the benchmark itself. We recursively (depth-first) call prepareBuild() methods on the tree; these methods are allowed to invoke further mutations on the builder tree, such as adding other steps and sequences. An empty (default) implementation of this method is perfectly fine if you don’t need anything complex, but if your extension delegates to children extensions it should recursively call the method on children builders. Make sure to iterate through a shallow copy of any collection of children as the children can mutate its parent, failing the iteration.\nHyperfoil does not track new components created in prepareBuild() and therefore it won’t call prepareBuild() on these if the part of builder tree was already processed - the code creating new components must call the method.\nWhen the first phase completes we invoke the build() method on the builder tree. As the build method is invoked recursively again we end up with the benchmark tree that again mirrors the builder tree. The mapping between builders and benchmark components doesn’t need to be 1:1, e.g. StepBuilder can return several steps, builder can return wrapped components etc. However no mutations are allowed in this phase.\nSo we end up with the io.hyperfoil.api.config.Benchmark instance that holds this tree. It is important to make sure that this is immutable and serializable as it will be sent over the wire from controller to agents. This means that the components must not reference the builders. A common oversight is using a lambda that uses one of builder’s fields - while you only need the actual value of the field the lambda would capture a reference to the builder; this is quite easy to fix by assigning the field value to a local var, though.\nCreating the sessions Hyperfoil tries to minimize allocations during the benchmark as while Java garbage collector is a good friend of every developer it has a negative effect on the real-time properties of the program. You should use collectors that minimize pause times (such as Shenandoah or ZGC) rather than those that maximize throughput. This is why we allocate all what we could need ahead.\nBefore the benchmark starts each agent creates all the sessions (based on the maxSessions property in case of open-model phases). When Session.reserve() is called it calls reserve() method on all steps that implement ResourceUtilizer interface. In this method the step must call Session.declareResource() on all the resources it uses.\nNote: in previous versions of Hyperfoil it was necessary to also explicitly declare that the step can write into a session variable, and recursively call the ResourceUtilizer.reserve() method on all children components. Since version 0.16 Hyperfoil discovers all ResourceUtilizer implementors in the scenario tree; the recursive invocation is no longer necessary.\nScenario execution Session execution starts with:\none instance of each sequence declared in the initialSequences list\none instance of the first sequence in orderedSequences list\none instance of the first sequence in the implicit list of sequences (right under the scenario: declaration - this is mutually exclusive to the options above)\nThe session keeps a list of active sequence instances, each with an index of the step that should execute next. There can be several instances of the same sequence, up to its concurrency (the number in brackets next to sequence name). Whenever the session is notified (using Session.proceed() which schedules Session.call() invocation in its executor) it goes through all active instances and calls Step.invoke() on the current step.\nThere are two possible results from the invoke() method that returns a boolean:\ntrue: This means that step has been successfuly executed, it’s complete and the sequence can continue with the next step (which it will, immediately) or complete if this was the last step. false: We say that the step was blocked - it cannot execute immediately. It could be either because the step is short of resources (e.g. httpRequest cannot get any available connection from the pool) but most often this is because the purpose of this step is to wait for certain condition: variable being set/reaching certain value, request being completed etc. The sequence will not progress towards next step and this step’s invoke() method will be called again (when the Session.proceed() is called). An important property is that if the step returns false the step must not have any side-effects - it must not fire a request, set a session variable, simply it was a no-op. If the step acquired a resource from a pool it should return it prior to returning false. Session variables The session contains a map of variables the scenario uses. The keys are usually strings but this is not mandated; some steps may e.g. choose to use an unique object as the key. The values in the map are wrapper objects that hold a boolean flag whether this variable is set and the value itself. To avoid boxing and unboxing there’s a different wrapper for integers and other objects - it’s up to step to check the wrapper type and convert the value if necessary.\nThe map is not manipulated directly - a builder for a step that should work with variable foo should call SessionFactory.readAccess(\"foo\"), SessionFactory.intAccess(\"foo\") or SessionFactory.objectAccess(\"foo\") in its build() method and pass the received Access to the step it creates. The step then operates exclusively using Access methods. And example of this can be found in the getting started: custom steps guide.\nSequence-scoped access In quickstarts there are examples of sequence-scoped access - variables with [.] suffix, e.g. unset: myVar[.]. This is used when the variable holds an array of variables (wrappers) created using ObjectVar.newArray() or IntVar.newArray() in the ResourcesUtilizer.reserve() method - a common pattern would be\nJava @Override public void reserve(Session session) { if (!var.isSet(session)) { var.setObject(session, ObjectVar.newArray(session, concurrency)); } } The array is often created in a non-conurrent sequence that starts several concurrent instances of another sequence - the var would be used with the simple access (without the [.] suffix) in the original sequence, and with [.] in the concurrent sequences. Each of the concurrent sequences would get a different SequenceInstance.index() and with sequence-scoped access these would work on the variable on this position in the array. The step does not need to be tailored specifically to work on sequence-scoped variables; when creating the Access instance using SessionFactory.objectAccess() the presence of the suffix is automatically checked and the returned Access will relay the operations to the slot in the array.\nSession resources If a step (or a set of cooperating steps) needs to keep some internal state that is not available to users through arbitrary identifiers as session variables these can use concept called session resources. It is again an immutable map of objects in the session (while the map itself is immutable the values are meant to be mutated).\nTo make the code type-safe you start with the Resource implementation and matching ResourceKey:\nJava public class FooResource implements Session.Resource { /* ... */ } public class FooResourceKey implements Session.ResourceKey\u003cFooResource\u003e {} The resource key does not need any methods - it is just an unique marker object that will serve as the key in a map. If the resource will be used exclusively in this very step (action, processor…) you can implement the ResourceKey in there and use this when calling session.getResource():\nJava public class FooStep implements Step, ResourceUtilizer, SessionResourceKey\u003cFooStep.FooResource\u003e { /* ... */ } Both session variables and session resources are declared in the reserve() method and retrieved (and mutated) in the business method (invoke() in the case of a step):\nJava public class FooStep implements Step, ResourceUtilizer { private final FooResourceKey resourceKey; // set in constructor @Override public void reserve(Session session) { // we are using supplier rather than creating instance directly because // if this sequence is concurrent we will create N resources, the state // of concurrent sequences will be isolated by default. session.declareResource(resourceKey, FooResource::new); } @Override public void invoke(Session session) { FooResource resource = session.getResource(resourceKey); /* work on the resource */ } } Component adapters There are several types of extension components: steps, actions and processors get extra attention but it is possible to use other interfaces as well. Actions are the simplest of these: these do not require any input (but the session) and do always execute without blocking. Therefore it is possible to use an action on any place where a step or processor would fit. When loading the component by name Hyperfoil automatically wraps the action into an adapter to the target component type.\nThread-local, agent-local and global data Besides session variables Hyperfoil offers 3 more levels of memory. Neither of those is limited to the currently executing phase: this data is not reset until the run completes.\nFirst level is the thread-local memory: since each session runs using single executor it is possible to share some data between sessions using the same executor without any need for synchronization. Currently this model supports shared counters (see addToSharedCounter and getSharedCounter) and shared map-like objects (see pushSharedMap and pullSharedMap). The latter keeps a pool of maps for each executor; when the map is pulled to a session it is removed from the pool, and it’s up to the user to return it back. This is useful e.g. for simulating stateful virtual users when we don’t want to modify one user concurrently in multiple sessions.\nSecond level is the agent-local memory. This is intended for caching data that needs to be initialized once and then used throughout the test; the initializing phase should invoke publishAgentData. It’s up to you to make sure that when this is read using readAgentData the data is already available - usually the reading phase should be ordered after the publishing phase using startAfterStrict property. Agent data are identified using keys (names); the data for each key can be published only once and cannot be updated afterwards. This limitation is imposed to minimize synchronization of executors.\nThird level is the global mem ory. Again this could be used for distributing initialization data but also for gathering data from other agents and threads. The idea is that each thread or agent produces a reduce-able object; Hyperfoil then combines these objects on the agent level (in arbitrary order), sends it to the controller where data from all agents are combined again and the result is distributed back to all agents. As with the agent data you should strictly order the producing and consuming phases, otherwise the data might not be available yet and the run would fail. Currently Hyperfoil does not provide any general-use steps/actions to work with global data; you should implement GlobalData.Element in an extension and provide steps to create \u0026 publish instances of these.\n","categories":"","description":"Deep dive into the Hyperfoil architecture","excerpt":"Deep dive into the Hyperfoil architecture","ref":"/hyperfoil-website-demo/docs/architecture/","tags":"","title":"Architecture"},{"body":"","categories":"","description":"Check out blog posts and articles on Hyperfoil","excerpt":"Check out blog posts and articles on Hyperfoil","ref":"/hyperfoil-website-demo/blog/news/","tags":"","title":"News"},{"body":"","categories":"","description":"Check out latest release updates","excerpt":"Check out latest release updates","ref":"/hyperfoil-website-demo/blog/releases/","tags":"","title":"Releases"},{"body":"TLDR You’ll learn how to write a simple Hyperfoil benchmark and run it straight from the CLI.\nThis article is intended to be published on other sites, too - therefore it contains introduction to concepts this blog’s readers are probably familiar with.\nIntroduction Meet Hyperfoil, a swiss-army knife of web benchmark driver. This is an opensource (ASL2.0) tool that sports a set of properties that we could not find in any of the existing load drivers:\nDo it the right way: Many tools use a closed model for driving the load - they spawn a fixed set of threads and fire synchronous requests, delaying further requests until the responses to previous ones arrive. While this is quite useful for quick tests, when you are only interested in the maximum throughput (and Hyperfoil supports this mode, too), applying feedback from the server does not simulate what latencies would users actually observe - closed model is subject to a coordinated omission problem. Hyperfoil is designed with open model in mind, requests are executed asynchronously and independently of the responses from the tested system. Drive the load as far as you need: Production systems often span whole clusters and you often can’t drive up system utilization using a single load generator. With Hyperfoil you don’t need to hack bash scripts to start the benchmark concurrently on several machines and then combine the results in a spreadsheet - Hyperfoil is distributed by design. Don’t oversimplify: In order to anticipate the behaviour when your users come the benchmark should do what do users would do. Hyperfoil is not limited to hitting a fixed set of URLs; you can describe complex logic in a YAML syntax, and if this is insufficient or too cumbersome you can extend it in good ol’ Java. Opensource: There are lies, damned lies, and benchmarks. When we publish results we want everyone to be able to reproduce them, or prove us wrong. Having the tool publicly available is certainly a step towards that goal. Demo workload In this series of blogposts we’ll use Vehicle Market, a demo application using several microservices to run a used-car bazaar. You’ll need either docker and docker-compose or podman and podman-compose installed to get it running.\nSo let’s start by spinning up the Vehicle Market:\ncurl -L http://vehicle-market.hyperfoil.io \u003e /tmp/vehicle-market.yaml podman-compose -f /tmp/vehicle-market.yaml -p vehicle-market up -d Now you can go to http://localhost:8080 and browse through the application.\nFirst benchmark In this first post we’ll create a simple benchmark that does not realistically simulate a user, hitting different pages independently. Let’s create a new directory, e.g. $HOME/vehicle-market/benchmarks to host our benchmarks there.\n# VMB stands for Vehicle Market Benchmarks export VMB=$HOME/vehicle-market/benchmarks mkdir -p $VMB cd $VMB # Temporary directory for the reports mkdir /tmp/reports Open a new file in your favourite editor (Visual Studio Code would be a good choice) and create your first benchmark, saving it as first-benchmark.hf.yaml:\nname: first-benchmark http: host: http://localhost:8080 sharedConnections: 10 duration: 10s usersPerSec: 10 scenario: - fetchIndex: - httpRequest: GET: / This benchmark is going create 10 connections (sharedConnections property) to http://localhost:8080 and during 10 seconds (duration property) run the scenario 10 times per second in average (usersPerSec property). By default the in-VM agent (load generator) is single-threaded; the property is called shared connections because if you increase the thread count or run the benchmark in a distributed setup using multiple agents there will be still 10 connections to the tested system, evenly distributed among agents and threads.\nHyperfoil does not operate with the notion of requests per second but with (virtual) users per second. Our scenario is the most trivial one, only firing single GET request to the root path (/) and therefore the number of requests equals to number of virtual users (also called user sessions).\nWe haven’t commented yet on fetchIndex. The scenario consists of one or more reusable sequences, each comprised of one or more steps. In our example fetchIndex is the name of the sequence, and there’s a single step: httpRequest (this can have many properties, GET selecting both the method and path being one of them).\nGet it running Now we have our benchmark defined we need to get Hyperfoil running. In future posts we’ll show how to run Hyperfoil truly distributed on Openshift (it’s possible to run it distributed on bare metal, too) but for now we’ll just open the CLI in a container and start it all in-process:\npodman run -it --rm -v $VMB:/benchmarks:Z -v /tmp/reports:/tmp/reports:Z --network=host quay.io/hyperfoil/hyperfoil cli In the command above we are mounting the benchmarks directory into /benchmarks in the container and writable /tmp/reports to the same path for a report later on. We are also using host network - by default the container would have its own network and localhost:8080 could not reach Vehicle Market.\nIn the CLI type start-local (tab completion works) to start Hyperfoil controller in the same VM, and then we can upload the benchmark (using upload) and start it with run:\n[hyperfoil]$ start-local Starting controller in default directory (/tmp/hyperfoil) Controller started, listening on 127.0.0.1:45295 Connecting to the controller... Connected! [hyperfoil@in-vm]$ upload /benchmarks/first-benchmark.hf.yaml Loaded benchmark first-benchmark, uploading... ... done. [hyperfoil@in-vm]$ run first-benchmark Started run 0000 Run 0000, benchmark first-benchmark Agents: in-vm[STOPPED] Started: 2021/01/25 17:00:31.869 Terminated: 2021/01/25 17:00:41.881$ NAME STATUS STARTED REMAINING COMPLETED TOTAL DURATION DESCRIPTION main TERMINATED 17:00:31.869 17:00:41.880 10011 ms (exceeded by 11 ms) 10.00 users per second The benchmark successfully finished, it’s time to check on the results. CLI lets you display a simplified table of results using command stats; you can get all the gory details in a JSON-formatted file using export.\n[hyperfoil@in-vm]$ stats Total stats from run 0000 PHASE METRIC THROUGHPUT REQUESTS MEAN p50 p90 p99 p99.9 p99.99 2xx 3xx 4xx 5xx CACHE TIMEOUTS ERRORS BLOCKED main fetchIndex 10.60 req/s 106 5.23 ms 5.08 ms 6.91 ms 9.96 ms 10.62 ms 10.62 ms 106 0 0 0 0 0 0 0 ns You might be concerned at first by seeing 106 requests instead of 100 here; that’s by design, though. Hyperfoil does not execute the requests precisely every 100 ms because that’s not what the users would do; the incoming users are randomized using Poisson point process.\nExploring the JSON from export might not be the most convenient way, but there’s a third option: report command creates a fancy HTML report. Were you not running in a container a browser window with this report would be opened, too.\n[hyperfoil@in-vm]$ report --destination=/tmp/reports Written to /tmp/reports/0000.html The front page shows only one rather wide column as we’ve used only one phase, but when you switch to details in the top navbar you can see the progression of requests:\nReport details example\nSet phasers to kill Allright, you could easily run a similar benchmark using other tools. Let’s add a different type of request into the mix. For that, we will need to introduce you to the concept of phases. In Hyperfoil, phases are (by default) independent workloads. We’ve already seen a main phase being reported in the statistics listing; the previous benchmark used a simplified single-constant-rate-phase syntax. When adding second phase we need to use the ‘full’ syntax:\nname: first-benchmark http: host: http://localhost:8080 sharedConnections: 10 phases: - listVehicles: constantRate: usersPerSec: 10 duration: 10s scenario: - fetchIndex: - httpRequest: GET: / - seeDetails: constantRate: usersPerSec: 10 duration: 10s scenario: - fetchDetails: - httpRequest: GET: /offering/1 When you upload and run the benchmark you can see that both phases are running in parallel. Now try to schedule them one after another: In CLI, type edit first-benchmark and in the editor (vim) go to the seeDetails phase and add startAfter: listVehicles property to the phase. Save the file and quit the editor using the usual :wq.\n- seeDetails: constantRate: startAfter: listVehicles usersPerSec: 10 # ... Run the benchmark again and see that this time the phases executed one after another (check the start and completion timestamps):\nNAME STATUS STARTED REMAINING COMPLETED TOTAL DURATION DESCRIPTION listVehicles TERMINATED 10:10:12.650 10:10:22.654 10004 ms (exceeded by 4 ms) 10.00 users per second seeDetails TERMINATED 10:10:22.652 10:10:32.654 10002 ms (exceeded by 2 ms) 10.00 users per second Note that edit does not modify the file in /benchmarks/; Hyperfoil controller stores benchmark definitions and you are updating the benchmark there (CLI automatically downloads it and re-uploads when the editor is closed).\nForks The benchmark above was somewhat too verbose as the two phases (running in parallel) used the same setup. For those that don’t like to repeat themselves there’s an alternative way to execute two different scenarios: forks\nname: first-benchmark http: host: http://localhost:8080 sharedConnections: 10 phases: - main: constantRate: usersPerSec: 30 duration: 10s forks: - listVehicles: weight: 2 scenario: - fetchIndex: - httpRequest: GET: / - seeDetails: weight: 1 scenario: - fetchDetails: - httpRequest: GET: /offering/1 Notice that we’ve increased the usersPerSec rate from 10 to 30. The user arrival rate is then distributed according to the weight of the fork, therefore listVehicles got 20 users/s and seeDetails got 10:\nPHASE METRIC THROUGHPUT REQUESTS MEAN p50 p90 p99 p99.9 p99.99 2xx 3xx 4xx 5xx CACHE TIMEOUTS ERRORS BLOCKED main/listVehicles fetchIndex 19.40 req/s 194 2.11 ms 2.16 ms 2.39 ms 3.65 ms 3.87 ms 3.87 ms 194 0 0 0 0 0 0 0 ns main/seeDetails fetchDetails 11.00 req/s 110 3.45 ms 3.47 ms 3.72 ms 4.82 ms 5.64 ms 5.64 ms 110 0 0 0 0 0 0 0 ns Internally we’ve created two phases (actually there’s one more, see more about phases) and named them main/listVehicles and main/seeDetails.\nThe benchmark above does not have any warm-up nor ramp-up. Let’s add one, as a phase. However, we don’t want to repeat ourselves copypasting the scenarios or forks. Let’s use YAML anchors for that:\nname: first-benchmark http: host: http://localhost:8080 sharedConnections: 10 phases: - main: constantRate: startAfter: rampup usersPerSec: 30 duration: 10s forks: - listVehicles: \u0026listVehicles weight: 2 scenario: - fetchIndex: - httpRequest: GET: / - seeDetails: \u0026seeDetails weight: 1 scenario: - fetchDetails: - httpRequest: GET: /offering/1 - rampup: increasingRate: initialUsersPerSec: 3 targetUsersPerSec: 30 duration: 10s forks: - listVehicles: *listVehicles - seeDetails: *seeDetails We have marked each fork with an unique identifier (listVehicle and seeDetails) (the anchor matches to the fork name but that’s not a requirement) using \u0026 anchor. Then we have added the rampup phase that gradually increases the load from 3 to 30 users per second and reused the definitions using alias *. This is a standard YAML feature and your editor should understand it; Hyperfoil interprets it by cloning the definition of the fork. You can use this at multiple levels: for forks, scenarios or sequences.\nBuilding the scenario There’s more to phases and we suggest going through the quickstarts, but let’s move to another topic: the scenarios themselves. So far we’ve been hitting only two static resources, the root and one offering. Let’s get back to the very first example and add some randomization:\nname: first-benchmark http: host: http://localhost:8080 sharedConnections: 10 duration: 10s usersPerSec: 10 scenario: - fetchDetails: - randomInt: min: 1 max: 100 toVar: offering - httpRequest: GET: /offering/${offering} We have extended the fetchDetails sequence to two steps. In the first step randomInt we generate a random integer between 1 and 100 (inclusive) and store that in the user session under the key offering. Each virtual user has its own session that defines the state of the scenario and keeps all the session variables. Consider using initialSequences to ensure session variables are populated. In the second step httpRequest we specify the path for a GET request using a template interpolating ${offering} into the value of the variable.\nIf you execute the request using web browser with a network monitor you’ll find out that it’s not just the document located at http://localhost:8080/offering/1 it is fetching. There’s also images, scripts and CSS. Hyperfoil offers an easy-to-use option to download resources fetched from the HTML page:\nname: first-benchmark http: host: http://localhost:8080 sharedConnections: 10 duration: 10s usersPerSec: 10 scenario: - fetchDetails: - randomInt: min: 1 max: 100 toVar: offering - httpRequest: GET: /offering/${offering} handler: body: parseHtml: onEmbeddedResource: fetchResource: maxResources: 16 After uploading and running this you can check out stats:\n[hyperfoil@in-vm]$ stats Total stats from run 0024 PHASE METRIC THROUGHPUT REQUESTS MEAN p50 p90 p99 p99.9 p99.99 2xx 3xx 4xx 5xx CACHE TIMEOUTS ERRORS BLOCKED main /config 12.20 req/s 122 14.64 ms 12.19 ms 34.08 ms 41.68 ms 50.07 ms 50.07 ms 122 0 0 0 0 0 0 0 ns main /favicon.ico 12.20 req/s 122 9.70 ms 5.21 ms 19.53 ms 29.75 ms 37.75 ms 37.75 ms 122 0 0 0 0 0 0 0 ns main /manifest.json 12.20 req/s 122 7.39 ms 4.39 ms 15.73 ms 27.39 ms 34.87 ms 34.87 ms 122 0 0 0 0 0 0 0 ns main /static/css/2.0720d3cf.chunk.css 12.20 req/s 122 18.27 ms 12.32 ms 33.82 ms 40.37 ms 41.42 ms 41.42 ms 122 0 0 0 0 0 0 139.48 ms main /static/css/main.7fcb1519.chunk.css 12.20 req/s 122 17.04 ms 11.99 ms 33.82 ms 38.54 ms 40.11 ms 40.11 ms 122 0 0 0 0 0 0 149.66 ms main /static/js/2.256a11d3.chunk.js 12.20 req/s 122 25.66 ms 19.66 ms 43.25 ms 50.07 ms 67.11 ms 67.11 ms 122 0 0 0 0 0 0 148.54 ms main /static/js/main.656b4a9d.chunk.js 12.20 req/s 122 24.93 ms 20.05 ms 42.99 ms 51.64 ms 66.85 ms 66.85 ms 122 0 0 0 0 0 0 121.88 ms main fetchDetails 12.20 req/s 122 5.41 ms 2.06 ms 10.68 ms 41.68 ms 41.68 ms 41.68 ms 122 0 0 0 0 0 0 0 ns main//static/css/2.0720d3cf.chunk.css: Progress was blocked waiting for a free connection. Hint: increase http.sharedConnections. main//static/css/main.7fcb1519.chunk.css: Progress was blocked waiting for a free connection. Hint: increase http.sharedConnections. main//static/js/2.256a11d3.chunk.js: Progress was blocked waiting for a free connection. Hint: increase http.sharedConnections. main//static/js/main.656b4a9d.chunk.js: Progress was blocked waiting for a free connection. Hint: increase http.sharedConnections. When running this in CLI you’d see that four of these metrics would be printed in red color and have a non-zero number in the BLOCKED column. This is happening because with more HTTP requests being sent, it’s quite likely that one user starts before a previous user has received all the responses.\nWith HTTP 1.1 (pipelining disabled by default) and only 10 connections there would not be enough available connections and the virtual user couldn’t send the request right away. This wouldn’t happen to a real user - that one is not limited by other users. Had we allowed a feedback from the server (taking few moments to respond) our latency readings could be dramatically skewed. This is why Hyperfoil warns us that the benchmark wasn’t 100% correct and hints us to increase number of connections.\nAlternatively we could switch to HTTP 2 that supports multiplexing several requests over single connection.\nTo be continued… Comparing the requests to a browser’s network monitor we’ve omitted the call to http://localhost:8082/offering/${offering} (executed from script) and loading images from http://localhost:8080/images/car?.... We will cover that in the next part.\n","categories":"","description":"Meet Hyperfoil, a swiss-army knife of web benchmark driver. You'll learn how to write a simple benchmark and run it straight from the CLI.\n","excerpt":"Meet Hyperfoil, a swiss-army knife of web benchmark driver. You'll …","ref":"/hyperfoil-website-demo/blog/news/2021-01-25-hf-beginner-guide-1/","tags":"","title":"Beginner's Guide to Hyperfoil: part 1"},{"body":" This article is intended to be published on other sites, too - therefore it contains introduction to concepts this blog’s readers are probably familiar with.\nIn the previous part we’ve deployed our demo application (Vehicle Market) and exercised some basic requests against that. In this post we will focus on processing responses and user workflow through the site.\nProcessing responses We will start with a benchmark that fetches single random page with an offering, without the HTML resources part for brevity:\nname: first-benchmark http: host: http://localhost:8080 sharedConnections: 10 duration: 10s usersPerSec: 10 scenario: - fetchDetails: - randomInt: min: 1 max: 100 toVar: offering - httpRequest: GET: /offering/${offering} We have investigated what a browser would do, and found out that this page executes a request against http://localhost:8082/offering/${offering} to fetch a JSON document. Notice the different port 8082: we will need to add another endpoint to the configuration and start selecting the endpoint in httpRequest steps:\nname: vehicle-market http: - host: http://localhost:8080 sharedConnections: 10 - host: http://localhost:8082 sharedConnections: 10 duration: 10s usersPerSec: 10 scenario: - fetchWebpage: - randomInt: min: 1 max: 100 toVar: offering - httpRequest: GET: /offering/${offering} authority: localhost:8080 - fetchJson: - httpRequest: GET: /offering/${offering} authority: localhost:8082 We have added the another sequence fetchJson with a second request. When the scenario contains the sequences as a list these are executed in-order; the second sequence is not started until the last step from the previous one completes. While you could keep both requests in one sequence, the sequence name is used as the default name for the metric. Therefore a metric with the same name would be reported twice. Moving the request to its own sequence solves the problem.\nAfter receiving the JSON the script would modify the DOM and add images referenced in the JSON. Let’s replicate that in our benchmark:\nname: vehicle-market http: - host: http://localhost:8080 sharedConnections: 10 - host: http://localhost:8082 sharedConnections: 10 duration: 10s usersPerSec: 10 scenario: orderedSequences: - fetchWebpage: - randomInt: min: 1 max: 2 toVar: offering - httpRequest: GET: /offering/${offering} authority: localhost:8080 - fetchJson: - httpRequest: GET: /offering/${offering} authority: localhost:8082 handler: body: json: query: .gallery[].url toArray: gallery[10] - foreach: fromVar: gallery sequence: fetchImage counterVar: numImages - awaitInt: var: numImages equalTo: 0 sequences: - fetchImage[10]: - httpRequest: GET: ${ gallery[.] } authority: localhost:8080 sync: false handler: onCompletion: addToInt: numImages-- The scenario does not host a simple list of sequences anymore; we have moved the original sequences under orderedSequences and added another section sequences with sequence fetchImage. The scenario starts with one instance of fetchWebpage, when this completes a single instance of fetchJson is created. There are no fetchImage instances at the beginning - sequences hosts only definitions but does not create any instances. For details see documentation\nIn the request in fetchJson we have registered a handler for response body; This handler applies the .gallery[].url query and stores the URLs in an array stored in the session variable gallery. This array has 10 slots; as any other resource in Hyperfoil scenario this array is pre-allocated before the benchmark starts. Therefore we need to limit the size - if there are more images than slots the other URLs are simply discarded.\nIn the second step in fetchJson the gallery array is scanned by the foreach step. For each item in the array this steps creates a new instance of the fetchImage sequence. The [10] next to the sequence name means that there can be at most 10 instances of fetchImage running concurrently. The number of created sequences is then recorded into variable numImages.\nIn fact the foreach step stops scanning the array when it finds an unset slot - gaps in the array are not supported. This is irrelevant for our scenario, though - the toArray fills the array from the start without gaps.\nThe last step in the fetchJson sequence is not necessary for our scenario (it would be complete after downloading all the images) but shows how to synchronize after all the images are retrieved. In the awaitInt step we are blocking the completion of the sequence until numImages drops to zero. The counter is decremented after the response with the image is fully received (onCompletion handler) using action addToInt.\nWe have not explained the notation gallery[.] in the path template fetching the image yet. The [.] is called sequence-scoped access: addressing an array with current sequence index. When foreach creates new instances of the same sequence each will get a distinct index (lowest available) that it can use to read/write its private data. Indices for different sequences are not coordinated, though.\nLogin workflow Now that you know how to process responses, let’s have a look on another very common part of user workflow: authentication. We’d like to simulate user visiting the front page, clicking on the Login button and filing out the credentials, possibly multiple times to simulate fat fingers.\nYou need to get list of valid user credentials; Vehicle Market holds a copy of these (regular authentication flow uses hashed passwords) and you can get the list running:\ncurl localhost:8083/user-loader \u003e /tmp/credentials.csv Here is the benchmark:\nname: login http: # Frontend - host: http://localhost:8080 sharedConnections: 10 # User service - host: http://localhost:8083 sharedConnections: 10 duration: 10s usersPerSec: 10 scenario: orderedSequences: - fetchIndex: - httpRequest: GET: / authority: localhost:8080 - randomInt: min: 0 max: 2 toVar: failedAttempts - randomCsvRow: file: /tmp/credentials.csv removeQuotes: true columns: 0: username 1: password - wrongLogin: - breakSequence: intCondition: fromVar: failedAttempts equalTo: 0 onBreak: - newSequence: successfulLogin - httpRequest: POST: /login authority: localhost:8083 body: form: - name: username fromVar: username - name: password value: th1sIsMy$EcretPa55W%rD handler: autoRangeCheck: false - addToInt: failedAttempts-- - nextSequence: wrongLogin sequences: - successfulLogin: - httpRequest: POST: /login authority: localhost:8083 body: form: - name: username fromVar: username - name: password fromVar: password There’s nothing extraordinary in the first sequence, fetchIndex - we retrieve the landing page and decide if we should provide the correct credentials right away or have 1 or 2 failed attempts. We also select credentials using the randomCsvRow step. This step picks a random row from a CSV-formatted file, and stores the values into variables. In our case we pick the first column (columns are indexed starting from zero) into variable username and second into password.\nAfter this we automatically jump to the wrongLogin sequence (even if we’re not supposed to use wrong credentials). The first step there is the conditional breakSequence step: this step can terminate execution of its sequence prematurely (subsequent steps are not executed) and execute one or more actions. In onBreak we use the newSequence action that creates a new instance of sequence successfulLogin.\nIf the condition does not hold the execution of wrongLogin continues with the well known httpRequest step. This time we are firing a POST request, with a request body that will simulate a submitted HTML form. Hyperfoil will automatically add the Content-Type: application/x-www-form-urlencoded header and URL-encode the variables should there be any special characters. In this instance we’re using a constant value for the password that should not match any actual user password.\nBy default Hyperfoil adds handlers that will mark the response as invalid and stop session execution when the response status is not between 200 and 399. We’re expecting a 401 response with invalid credentials and therefore we disable this default behaviour by setting autoRangeCheck: false (we don’t need to disable the other handler, stopOnInvalid). Note that this behaviour can be also set globally in ergonomics.\nAfter receiving the response (the request is synchronous) we decrement the number of failed attempts by 1 using the addToInt step with shorthand syntax. We have used the addToInt action in the previous example: all actions can be used as steps, though steps (such as httpRequest) cannot be used as an action. This is not possible because a step can block sequence execution (waiting for an available connection, or until a variable is set…) but an action runs and completes without any delay - this is the main difference between those.\nThe last step is the nextSequence step (similar to the newSequence action) creating a new instance of the wrongLogin sequence. This step can be used anywhere in a sequence if it creates a different sequence or the sequence has sufficient concurrency limit (we had that fetchImage[10] in the previous example) - however had we added another step after it we would need two instances of wrongLogin running concurrently and the sequence is not marked as concurrent. When we place this as the last step there is a special case when the step only restarts current sequence, not requiring additional concurrent instance.\nThe successfulLogin sequence does not require much comment, it issues the same request as wrongSequence, only correctly picking the password from session variable. Let’s have a look on the results:\nPHASE METRIC THROUGHPUT REQUESTS MEAN p50 p90 p99 p99.9 p99.99 2xx 3xx 4xx 5xx CACHE TIMEOUTS ERRORS BLOCKED main fetchIndex 10.00 req/s 100 2.74 ms 3.01 ms 4.08 ms 4.85 ms 4.85 ms 4.85 ms 100 0 0 0 0 0 0 0 ns main successfulLogin 10.00 req/s 100 7.75 ms 8.32 ms 10.49 ms 11.53 ms 11.67 ms 11.67 ms 100 0 0 0 0 0 0 0 ns main wrongLogin 9.30 req/s 93 4.16 ms 4.98 ms 5.83 ms 6.98 ms 6.98 ms 6.98 ms 0 0 93 0 0 0 0 0 ns We can now see 2xx responses for successfulLogin and 4xx responses for wrongLogin as we expect. Also the response times for a successful login are somewhat higher, maybe because the server stores a new token in the database.\nLooking at browser network log we can see that the web-page captures this token and fetches user profile using that (it will also use this token in the Authorization header when talking to other services). Let’s add this to our test, and one more thing: while Hyperfoil can send another login request almost immediately your users would need some time to type these. Therefore we are going to add some user think time:\nname: login http: # Frontend - host: http://localhost:8080 sharedConnections: 10 # User service - host: http://localhost:8083 sharedConnections: 10 duration: 10s usersPerSec: 10 scenario: orderedSequences: - fetchIndex: - httpRequest: GET: / authority: localhost:8080 - randomInt: min: 0 max: 2 toVar: failedAttempts - randomCsvRow: file: /tmp/credentials.csv removeQuotes: true columns: 0: username 1: password - thinkTime: 2s - wrongLogin: - breakSequence: intCondition: fromVar: failedAttempts equalTo: 0 onBreak: - newSequence: successfulLogin - httpRequest: POST: /login authority: localhost:8083 body: form: - name: username fromVar: username - name: password value: th1sIsMy$EcretPa55W%rD handler: autoRangeCheck: false - addToInt: failedAttempts-- - thinkTime: duration: 2s random: NEGATIVE_EXPONENTIAL min: 500 ms max: 10s - nextSequence: wrongLogin sequences: - successfulLogin: - httpRequest: POST: /login authority: localhost:8083 body: form: - name: username fromVar: username - name: password fromVar: password handler: body: store: token - nextSequence: fetchProfile - fetchProfile: - httpRequest: GET: /info?token=${urlencode:token} authority: localhost:8083 We have added constant 2-second pause as the last step of fetchIndex, and another pause into wrongLogin using negative-exponential distribution with expected average of 2 seconds but ranging from 500 ms to 10 seconds (the actual average will be about 2044 ms due to these limits).\nThen we have added a simple body handler to the successful login request, storing the value in session variable token, and a nextSequence step to the successfulLogin sequence that will start the fetchProfile sequence with single httpRequest. You can notice that we had to use a new notation in the pattern: ${urlencode:token}. While pasting numbers into the request path is fine, a token might contain special symbols (such as +), and we need to URL-encode those. Contrary to the form used in the successfulLogin Hyperfoil cannot run the encoding automatically for you since it can’t know if the session variable contents is already URL-encoded (e.g. if you fetched an existing URL into that).\nLet’s run this and see the output of stats command:\nPHASE METRIC THROUGHPUT REQUESTS MEAN p50 p90 p99 p99.9 p99.99 2xx 3xx 4xx 5xx CACHE TIMEOUTS ERRORS BLOCKED main fetchIndex 1.59 req/s 35 4.24 ms 3.54 ms 5.73 ms 13.83 ms 13.83 ms 13.83 ms 35 0 0 0 0 0 0 0 ns main fetchProfile 1.59 req/s 35 5.15 ms 4.69 ms 6.52 ms 22.68 ms 22.68 ms 22.68 ms 35 0 0 0 0 0 0 0 ns main successfulLogin 1.59 req/s 35 11.11 ms 10.75 ms 14.81 ms 36.96 ms 36.96 ms 36.96 ms 35 0 0 0 0 0 0 0 ns main wrongLogin 1.27 req/s 28 5.27 ms 5.44 ms 6.95 ms 7.44 ms 7.44 ms 7.44 ms 0 0 28 0 0 0 0 0 ns main/fetchIndex: Exceeded session limit main/fetchProfile: Exceeded session limit main/successfulLogin: Exceeded session limit main/wrongLogin: Exceeded session limit In a colorful CLI you’d see all the lines in red and some errors listed below: “Exceeded session limit”, and we did not run all the ~100 index page hits. What happened?\nHyperfoil has a fixed limit for concurrency - number of virtual users (sessions) executed in parallel. By default this limit is equal to user arrival rate (usersPerSec), so in this scenario it was 10 concurrent users. However as with all those think-times the session takes several seconds, we will require more than 10 concurrent sessions, even if the virtual users are idle in their think-time. Average session should take 4 seconds pausing plus some time for the requests, so we can expect little over 40 concurrent users. We’ll add some margin and raise the limit to 60 sessions using the maxSessions property:\nname: login http: - host: http://localhost:8080 sharedConnections: 10 - host: http://localhost:8083 sharedConnections: 10 duration: 10s usersPerSec: 10 maxSessions: 60 scenario: # ... After running this we’ll take a look on stats:\nPHASE METRIC THROUGHPUT REQUESTS MEAN p50 p90 p99 p99.9 p99.99 2xx 3xx 4xx 5xx CACHE TIMEOUTS ERRORS BLOCKED main fetchIndex 4.46 req/s 106 2.58 ms 2.56 ms 3.88 ms 6.46 ms 10.03 ms 10.03 ms 106 0 0 0 0 0 0 0 ns main fetchProfile 4.46 req/s 106 3.44 ms 3.52 ms 4.46 ms 7.01 ms 9.90 ms 9.90 ms 106 0 0 0 0 0 0 0 ns main successfulLogin 4.46 req/s 106 8.47 ms 8.36 ms 11.40 ms 15.07 ms 28.70 ms 28.70 ms 106 0 0 0 0 0 0 0 ns main wrongLogin 4.92 req/s 117 4.12 ms 4.33 ms 4.98 ms 14.48 ms 28.70 ms 28.70 ms 0 0 117 0 0 0 0 0 ns There are no errors and the request numbers are as expected. The throughput is somewhat off because the total duration of the phase was several seconds past - Hyperfoil starts the sessions within the configured 10 seconds, then the phase moves to a FINISHED state but it won’t complete (state TERMINATED) until all sessions don’t execute its last step and receive response for the last request.\nWe can also take a look on number of sessions running concurrently using the sessions command in the CLI:\n[hyperfoil@in-vm]$ sessions Run 003E has terminated. PHASE AGENT MIN MAX main in-vm 1 53 Our guess that we’ll need 60 concurrent sessions was not too far off as at one moment we had 53 sessions running concurrently. You can also run this command when the test is being executed to see actual number of sessions rather than grand total for the whole phase.\nThis concludes our second blog post with a deep dive into complex scenarios. In the next article we’ll go through setting Hyperfoil up in an OpenShift cluster.\n","categories":"","description":"In this post we will focus on processing of responses and user workflow through the site.\n","excerpt":"In this post we will focus on processing of responses and user …","ref":"/hyperfoil-website-demo/blog/news/2021-02-09-hf-beginner-guide-2/","tags":"","title":"Beginner's Guide to Hyperfoil: part 2"},{"body":"In this article we’ll show how to run Hyperfoil inside an Openshift cluster, benchmarking workload within the same cluster. This assumes that you have sufficient privileges to install operators and create new namespaces (projects).\nDemo workload We will install Vehicle Market, our demo application we’ve used in the first article using console and Openshift Template.\nLogin into your cluster and run this:\n# Fetch the default domain your cluster uses export DOMAIN=$(oc get ingresscontrollers.operator.openshift.io \\ -n openshift-ingress-operator default -o jsonpath='{ .status.domain }') oc new-project vehicle-market curl -Ls http://vehicle-market-template.hyperfoil.io | \\ oc process -f - -p DOMAIN=vehicle-market.$DOMAIN | oc apply -f - echo http://vehicle-market.$DOMAIN This will deploy 5 pods, 5 services and 4 routes in the vehicle-market namespace, and load some example data. You can open the URL printed as the last line in your browser and explore the application.\nInstalling Hyperfoil You can install Hyperfoil Operator either through web-console, or on command-line using oc. For the web-console installation switch to the ‘Administrator view’ and go to Operators/OperatorHub. Filter ‘Hyperfoil’ and you should see the operator:\nClick on Hyperfoil and go through the wizard with all settings on default values (install to all namespaces with automatic approval).\nAlternatively you can create the subscription by defining this subscription:\napiVersion: operators.coreos.com/v1alpha1 kind: Subscription metadata: name: hyperfoil-operator namespace: openshift-operators spec: channel: alpha name: hyperfoil-bundle source: community-operators sourceNamespace: openshift-marketplace In any case you should end up with Hyperfoil listed amongst the installed operators:\nNow you can create a new namespace for Hyperfoil and add the custom resource. In web-console open the dropdown on top and create a new namespace hyperfoil. When the page reloads with all operators (that can take a couple of seconds) click on ‘Hyperfoil’ in the Provided APIs column (highlighted with red ellipse above). Press the ‘Create Hyperfoil’ button on the right side and switch to YAML View, filling the definition below and push ‘Create’ button below the editor.\napiVersion: hyperfoil.io/v1alpha2 kind: Hyperfoil metadata: name: hyperfoil spec: route: host: hyperfoil.apps.your.domain.com The only non-default value in this example is the hostname for the route; default hostname would be probably a bit longer. By default the route uses edge termination (the TLS connection is terminated at the router, the communication inside cluster is not encrypted). Therefore we will be connecting to port 443.\nOn command line just use commands below, passing the CR above as hyperfoil.yaml.\n$ oc new-project hyperfoil $ oc apply -f hyperfoil.yaml $ oc get hf NAME VERSION ROUTE PVC STATUS hyperfoil hyperfoil.apps.your.domain.com Ready Using Hyperfoil Now it’s time to open CLI as we’ve done in the previous articles:\nexport VMB=$HOME/vehicle-market/benchmarks podman run -it --rm -v $VMB:/benchmarks:Z -v /tmp/reports:/tmp/reports:Z \\ --network=host quay.io/hyperfoil/hyperfoil cli ```sh [hyperfoil]$ connect hyperfoil.apps.your.domain.com:443 ERROR: javax.net.ssl.SSLHandshakeException: Failed to create SSL connection: Failed to create SSL connection: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target: unable to find valid certification path to requested target Hint: TLS certificate verification might have failed. Use --insecure to disable validation. Failed connecting to hyperfoil.apps.your.domain.com:443 ``` We are connecting to the route on port 443 (you could also use connect https://hyperfoil.apps.your.domain.com or connect hyperfoi.apps.your.domain.com -p 443) but the certificate issued by the router might not be valid if this is not a production cluster. Use --insecure (or -k) in that case:\n[hyperfoil]$ connect hyperfoil.apps.ocp.scalelab:443 -k WARNING: Hyperfoil TLS certificate validity is not checked. Your credentials might get compromised. Connected! [hyperfoil@hyperfoil]$ upload /benchmarks/first-benchmark.hf.yaml Loaded benchmark first-benchmark, uploading... ... done. [hyperfoil@hyperfoil]$ run ERROR: Server responded with unexpected code: 403, Forbidden: Server is started in clustered mode; benchmarks must define agents. Failed to start benchmark first-benchmark Oops, what happened now? We have tried to execute the benchmark from Part 1 that worked just fine when executed from start-local. The controller in Openshift is started in a clustered mode, though, and single-vm runs are prohibited. We need to tell Hyperfoil to run this benchmark using an agent - and the controller will spin up another pod that will fire the load.\nname: clustered-benchmark agents: agent-one: agent-two: http: host: http://vehicle-market.apps.your.domain.com sharedConnections: 10 usersPerSec: 10 duration: 120s scenario: - fetchIndex: - httpRequest: GET: / Besides adding the agents (with empty definition) we have corrected the endpoint hostname and increased duration to 2 minutes. While the benchmark is running you can verify that controller created another pod:\n$ oc get pods -n hyperfoil NAME READY STATUS RESTARTS AGE agent-0001-agent-one 1/1 Running 0 13s agent-0001-agent-two 1/1 Running 0 13s hyperfoil-controller 1/1 Running 0 17m Both the sharedConnections and usersPerSec have been evenly distributed between the two agents; each will use 5 connections and run 5 users per second.\nSee the agents section documentation for further customization of the agents.\nConfiguration options such as securing the controller with password, persistence, logging, hooks etc. can be found in the installation guide.\nWebCLI You are already familiar with Hyperfoil CLI but starting it up in Podman might not be the most convenient way (and neither is keeping Hyperfoil distribution locally). There’s an easy solution for that: just use your browser. Since Hyperfoil 0.14 the controller exposes a CLI — let’s navigate to https://hyperfoil.apps.your.domain.com:\nThis CLI is automatically connected to the controller where it is running and cannot connect to any other controller (the command connect is missing, as well as exit and few other ones). Some commands are altered, e.g. upload cannot accept path on your machine while in browser — type just upload and then press a button that lets you select the benchmark file. edit does not open vi/vim/your favorite editor but displays a Monaco editor inside the browser. export and report cannot take --destination, instead these commands open download dialogue in the browser.\nTips and tricks http://vehicle-market.apps.your.domain.com is probably resolved to the load balancer that routes the traffic even before Openshift Ingresses. You might want to bypass this component, hitting the Ingresses directly. You can do that by setting addresses for the endpoints manually:\n$ oc get po -n openshift-ingress -o wide NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES router-default-56b959876c-94x2f 1/1 Running 1 60d 192.168.222.19 worker006 \u003cnone\u003e \u003cnone\u003e router-default-56b959876c-9tqvb 1/1 Running 0 60d 192.168.222.22 worker009 \u003cnone\u003e \u003cnone\u003e http: host: http://vehicle-market.apps.your.domain.com sharedConnections: 10 addresses: - 192.168.222.19 - 192.168.222.22 The connections will be randomly assigned to one of those IPs. You can also use bypass ingress completely and target the service directly - addresses can use hostnames and customize the actual port as well:\nhttp: host: http://vehicle-market.apps.your.domain.com sharedConnections: 10 addresses: - frontend.vehicle-market.svc.cluster.local:8080 ","categories":"","description":"In this article we'll show how to run Hyperfoil inside an Openshift cluster, benchmarking workload within the same cluster.\n","excerpt":"In this article we'll show how to run Hyperfoil inside an Openshift …","ref":"/hyperfoil-website-demo/blog/news/2021-02-16-hf-beginner-guide-3/","tags":"","title":"Beginner's Guide to Hyperfoil: part 3"},{"body":"Results for closed-model tests show maximum throughput your SUT can achieve; the response times are skewed though due to the coordinated omission. There are still cases where you’d like to run in this mode and check the size of the error you’re accumulating.\nMany benchmarks use closed-model with fixed concurrency and cycle-time, expecting the request to be fired every X milliseconds. When the requests fall behind in schedule due to some requests taking more than this period (cycle-time) the subsequent requests are fired as quickly as possible to catch up. The ‘compensated’ results estimate what would the latency be if you fired the requests on time. With open model the actual latencies could be the same (assuming that the previous request was delayed due waiting in a queue on server), better (the response was incidentally delayed on the network) or worse (the server queue would perform worse if hosting more requests).\nHyperfoil will tell you both values - the actually observed latencies AND the compensated estimate of latencies. You can use this mode only in always phases where you fix the cycle-time by providing a target rate of starting user sessions (contrary to the regular always behaviour starting user sessions as soon as possible). Note that the compensated time will be correct only if you don’t execute any blocking steps before firing the request(s).\nExample:\nname: test http: - host: http://example.com sharedConnections: 2 phases: - test: always: users: 10 duration: 20s scenario: - test: - httpRequest: GET: / compensation: targetRate: 10 The test above uses 10 concurrent users and tries to run at 10 requests/s. Below you can see CLI listing from the stats command, showing mean response time of 113 ms (real) vs. 172 ms (compensated). In this case the difference is not caused by a responses taking more than 1 second (the cycle-time for each user) but because sending the request is blocked by lack of available connections (we are using only 2): see that the BLOCKED column says that requests have been blocked for more than 6 seconds waiting for a free connection.\n[hyperfoil@in-vm]$ stats Total stats from run 0025 PHASE METRIC THROUGHPUT REQUESTS MEAN p50 p90 p99 p99.9 p99.99 2xx 3xx 4xx 5xx CACHE TIMEOUTS ERRORS BLOCKED test compensated-test 9.97 req/s 208 171.78 ms 148.90 ms 216.01 ms 641.73 ms 968.88 ms 968.88 ms 0 0 0 0 0 0 0 0 ns test test 9.97 req/s 208 113.42 ms 103.28 ms 149.95 ms 312.48 ms 392.17 ms 392.17 ms 208 0 0 0 0 0 0 6.23 s What happens underhood? You can see that using the inspect command in the CLI (some parts removed for brevity):\nscenario: initialSequences: - __delay-session-start: - delaySessionStart: randomize: true sequences: - test targetRate: 10.0 targetRateIncrement: 0.0 sequences: - test: - beforeSyncRequest: {} - httpRequest: handler: completionHandlers: - releaseSync: {} - compensatedResponseRecorder: metricSelector: prefixMetricSelector: delegate: providedMetricSelector: name: test prefix: compensated- stepId: 21 ... The sequence test is removed from the initialSequences set and sequence __delay-session-start takes place instead. This contains single step delaySessionStart that waits until its due and then schedules the sequence test. The compensated time is recorded by another handler that reuses the metric selector from the request but adds compensated- prefix.\n","categories":"","description":"Measure true performance with Hyperfoil: compare actual and compensated latencies in closed-model benchmarks\n","excerpt":"Measure true performance with Hyperfoil: compare actual and …","ref":"/hyperfoil-website-demo/blog/news/2020-12-9-compensation/","tags":"","title":"Compensation for coordinated omission"},{"body":"When browsing a website it’s not only the main page the webserver needs to serve - usually there are static resources such as images, stylesheets, scripts and more. Hyperfoil can automatically download these.\nHyperfoil implements a non-allocating HTML parser, with a pre-baked onEmbeddedResource handler: This selects HTML tags with appropriate attributes that represent an URL:\nImages: \u003cimg src=\"...\"\u003e Stylesheets: \u003clink href=\"...\"\u003e Scripts: \u003cscript src=\"...\"\u003e Embedded media: \u003cembed src=\"...\"\u003e, \u003cobject data=\"...\"\u003e Frames: \u003cframe src=\"...\"\u003e, \u003ciframe src=\"...\"\u003e The other part of the solution is executing a GET request at given URL. Modern browsers don’t download the resources one-by-one, nor do they fetch them all at once - usually these download around 6-8 resources in parallel. In Hyperfoil this is implemented by adding the URL to a queue. The queue delivers each URL to a new instance of a sequence (automatically generated) that fires the HTTP request, and limits the number of these sequences.\nSince Hyperfoil pre-allocates all data structures ahead, you need to declare a limit on number of resources that can be fetched. If the queue cannot store more than maxResources URLs it simply discards the other URLs, emitting a warning to the log.\nThe parser signals the queue when there’s no more data on the producing side, and when all of them are consumed the queue can fire some extra action. Note that completion of the original request does not wait until all the resources are fetched.\nBelow is an example of a configuration fetching embedded resources:\n- fetching: - httpRequest: GET: /foobar/index.html handler: body: parseHtml: onEmbeddedResource: fetchResource: maxResources: 16 metric: # Drop the query part - ([^?]*)(\\?.*)? -\u003e $1 onCompletion: set: allFetched \u003c- true For details please see the reference.\n","categories":"","description":"Simulate realistic website browsing with Hyperfoil's support for automated downloading  and managing of embedded resources like images, stylesheets, and scripts\n","excerpt":"Simulate realistic website browsing with Hyperfoil's support for …","ref":"/hyperfoil-website-demo/blog/news/2020-11-16-fetch-embedded/","tags":"","title":"Fetch embedded resources"},{"body":"Hyperfoil is trying to imitate how users will hit your site with requests as realistically as possible. Therefore it supports one of the browser features: redirections.\nThere are two ways how webservers tell browsers where to fetch another page: HTTP-level redirects where the server returns status 3xx and the new URL in the Location header, and HTML with \u003cmeta http-equiv=\"refresh\" content=\"5; url=http://example.com\" /\u003e. The webpage can also use Javascript to switch to another page but Hyperfoil is not interpretting any Javascript.\nYou could implement the location-based redirect in YAML straight away:\n- redirectMe: - unset: location - httpRequest: GET: /redirectMe metric: first_request handler: header: filter: header: value: location processor: store: location - httpRequest: GET: fromVar: location metric: second_request This would work in simple cases but it comes with several down-sides:\nYou assume that the /redirectMe always responds with redirecting status. If the server can respond with other status you need to check its value and fence any handlers with sentinel based on status+location presence. Even with extra conditions the presented approach would not work if there is a series of redirections. If you want to apply the same data (headers, body…) or handlers to both requests, you’d need to copy-paste them. If you’re issuing a POST instead of GET request some status values require that the second request is a GET. If the redirection URL is a relative one you’d need to compose the final URL yourselves. If there’s a chance that the sequence is insantiated multiple times concurrently you’d need to transform location to a sequence-scoped variable. Coding a general solution in YAML would be cumbersome, but you don’t need to do that - all you need is:\n- redirectMe: - httpRequest: GET: /redirectMe handler: followRedirect: ALWAYS Underhood this simple option adds/rewraps all the handlers (not presented in the example) as needed. If the response has a non-3xx status and there’s no refresh \u003cmeta /\u003e tag everything is applied as usual. When the response suggests a redirect the request is executed in a new sequence. The request uses the same headers and body as the original request (evaluating the handlers second time, though) and all the original handlers are applied to the response. That includes handlers inserted through other ‘magic’ options, e.g. the sync option: if the original request was marked as synchronous the original sequence won’t continue until the series of redirections ends with a non-redirecting request.\nYou might also want to react only to HTTP-level redirections (use followRedirect: LOCATION_ONLY) or the \u003cmeta /\u003e tag (use followRedirect: HTML_ONLY); the subsequent requests in the redirect chain will keep the same policy. The default value for the redirect is NEVER - both because of the principle of least surprise, to reduce memory footprint of the session and not complicate the debugging when redirects are not needed. If you prefer to keep the same policy for all requests in the benchmark you can change the default in the ergonomics section.\nNote that while location-based redirect suppresses execution of all status-, headers- and body-handlers the HTML-redirect option (HTML redirect) runs all of them as usual even on the body part that does the redirect. Also, HTML-redirect supports the refresh timeout (load the page after X seconds) - this case warrants another generated sequence where the request is waiting to be executed.\n","categories":"","description":"Simulate realistic user navigation with Hyperfoil's support for HTTP and HTML redirects\n","excerpt":"Simulate realistic user navigation with Hyperfoil's support for HTTP …","ref":"/hyperfoil-website-demo/blog/news/2020-11-16-follow-redirect/","tags":"","title":"Automatic follow of redirects"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hyperfoil-website-demo/tags/actions/","tags":"","title":"actions"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hyperfoil-website-demo/categories/actions/","tags":"","title":"Actions"},{"body":"Appends value to an array stored in another variable.\nProperty Type Description fromVar String Fetch value from session variable. toVar String Destination variable with the array. value String Verbatim value. ","categories":"","description":"Appends value to an array stored in another variable.","excerpt":"Appends value to an array stored in another variable.","ref":"/hyperfoil-website-demo/docs/reference/actions/action_additem/","tags":"","title":"addItem"},{"body":"Appends value to an array stored in another variable.\nProperty Type Description fromVar String Fetch value from session variable. toVar String Destination variable with the array. value String Verbatim value. ","categories":"","description":"Appends value to an array stored in another variable.","excerpt":"Appends value to an array stored in another variable.","ref":"/hyperfoil-website-demo/docs/reference/processors/processor_additem/","tags":"","title":"addItem"},{"body":"Appends value to an array stored in another variable.\nProperty Type Description fromVar String Fetch value from session variable. toVar String Destination variable with the array. value String Verbatim value. ","categories":"","description":"Appends value to an array stored in another variable.","excerpt":"Appends value to an array stored in another variable.","ref":"/hyperfoil-website-demo/docs/reference/steps/step_additem/","tags":"","title":"addItem"},{"body":"Add value to integer variable in the session.\nInline definition Accepting one of: var++, var–, var += value, var -= value. Property Type Description orElseSetTo int If the variable is currently not set, set it to this value instead of addition. value int Value added (can be negative). var String Variable name. ","categories":"","description":"Add value to integer variable in the session.","excerpt":"Add value to integer variable in the session.","ref":"/hyperfoil-website-demo/docs/reference/actions/action_addtoint/","tags":"","title":"addToInt"},{"body":"Add value to integer variable in the session.\nInline definition Accepting one of: var++, var–, var += value, var -= value. Property Type Description orElseSetTo int If the variable is currently not set, set it to this value instead of addition. value int Value added (can be negative). var String Variable name. ","categories":"","description":"Add value to integer variable in the session.","excerpt":"Add value to integer variable in the session.","ref":"/hyperfoil-website-demo/docs/reference/processors/processor_addtoint/","tags":"","title":"addToInt"},{"body":"Add value to integer variable in the session.\nInline definition Accepting one of: var++, var–, var += value, var -= value. Property Type Description orElseSetTo int If the variable is currently not set, set it to this value instead of addition. value int Value added (can be negative). var String Variable name. ","categories":"","description":"Add value to integer variable in the session.","excerpt":"Add value to integer variable in the session.","ref":"/hyperfoil-website-demo/docs/reference/steps/step_addtoint/","tags":"","title":"addToInt"},{"body":"Adds value to a counter shared by all sessions in the same executor.\nInline definition Use on of: counter++, counter–, counter += \u003cvalue\u003e, counter -= \u003cvalue\u003e Property Type Description fromVar String Input variable name. key String Identifier for the counter. operator enum Operation to perform on the counter. Default is ADD.\nOptions:{::nomarkdown}ADDSUBTRACT{:/} value int Value (integer). ","categories":"","description":"Adds value to a counter shared by all sessions in the same executor.","excerpt":"Adds value to a counter shared by all sessions in the same executor.","ref":"/hyperfoil-website-demo/docs/reference/actions/action_addtosharedcounter/","tags":"","title":"addToSharedCounter"},{"body":"Adds value to a counter shared by all sessions in the same executor.\nInline definition Use on of: counter++, counter–, counter += \u003cvalue\u003e, counter -= \u003cvalue\u003e Property Type Description fromVar String Input variable name. key String Identifier for the counter. operator enum Operation to perform on the counter. Default is ADD.\nOptions:{::nomarkdown}ADDSUBTRACT{:/} value int Value (integer). ","categories":"","description":"Adds value to a counter shared by all sessions in the same executor.","excerpt":"Adds value to a counter shared by all sessions in the same executor.","ref":"/hyperfoil-website-demo/docs/reference/processors/processor_addtosharedcounter/","tags":"","title":"addToSharedCounter"},{"body":"Adds value to a counter shared by all sessions in the same executor.\nInline definition Use on of: counter++, counter–, counter += \u003cvalue\u003e, counter -= \u003cvalue\u003e Property Type Description fromVar String Input variable name. key String Identifier for the counter. operator enum Operation to perform on the counter. Default is ADD.\nOptions:{::nomarkdown}ADDSUBTRACT{:/} value int Value (integer). ","categories":"","description":"Adds value to a counter shared by all sessions in the same executor.","excerpt":"Adds value to a counter shared by all sessions in the same executor.","ref":"/hyperfoil-website-demo/docs/reference/steps/step_addtosharedcounter/","tags":"","title":"addToSharedCounter"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hyperfoil-website-demo/tags/agents/","tags":"","title":"agents"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hyperfoil-website-demo/tags/ansible/","tags":"","title":"ansible"},{"body":"Stores data in an array stored as session variable.\nInline definition Use format toVar[maxSize]. Property Type Description format enum Format into which should this processor convert the buffers before storing. Default is STRING.\nOptions:{::nomarkdown}BYTEBUF: {:/}Store the buffer directly. Beware that this may cause memory leaks!{::nomarkdown}BYTES: {:/}Store data as byte array.{::nomarkdown}STRING: {:/}Interprets the bytes as UTF-8 string.{::nomarkdown}{:/} maxSize int Maximum size of the array. silent boolean Do not log warnings when the maximum size is exceeded. toVar String Variable name. ","categories":"","description":"Stores data in an array stored as session variable.","excerpt":"Stores data in an array stored as session variable.","ref":"/hyperfoil-website-demo/docs/reference/processors/processor_array/","tags":"","title":"array"},{"body":"Block current sequence until all requests receive the response.\n","categories":"","description":"Block current sequence until all requests receive the response.","excerpt":"Block current sequence until all requests receive the response.","ref":"/hyperfoil-website-demo/docs/reference/steps/step_awaitallresponses/","tags":"","title":"awaitAllResponses"},{"body":"Block this sequence until referenced delay point.\nInline definition Delay point created in scheduleDelay.key. Property Type Description key String Delay point created in scheduleDelay.key. ","categories":"","description":"Block this sequence until referenced delay point.","excerpt":"Block this sequence until referenced delay point.","ref":"/hyperfoil-website-demo/docs/reference/steps/step_awaitdelay/","tags":"","title":"awaitDelay"},{"body":"Block current sequence until condition becomes true.\nProperty Type Description equalTo Builder Compared variable must be equal to this value. greaterOrEqualTo Builder Compared variable must be greater or equal to this value. greaterThan Builder Compared variable must be greater than this value. lessOrEqualTo Builder Compared variable must be lower or equal to this value. lessThan Builder Compared variable must be lower than this value. notEqualTo Builder Compared variable must not be equal to this value. var String Variable name storing the compared value. equalTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). greaterOrEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). greaterThan Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). lessOrEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). lessThan Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). notEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). ","categories":"","description":"Block current sequence until condition becomes true.","excerpt":"Block current sequence until condition becomes true.","ref":"/hyperfoil-website-demo/docs/reference/steps/step_awaitint/","tags":"","title":"awaitInt"},{"body":"Block current sequence until this variable gets set/unset.\nInline definition Variable name or !variable if we are waiting for it to be unset. Property Type Description var String Variable name or !variable if we are waiting for it to be unset. ","categories":"","description":"Block current sequence until this variable gets set/unset.","excerpt":"Block current sequence until this variable gets set/unset.","ref":"/hyperfoil-website-demo/docs/reference/steps/step_awaitvar/","tags":"","title":"awaitVar"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hyperfoil-website-demo/tags/benchmark/","tags":"","title":"benchmark"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hyperfoil-website-demo/categories/benchmark/","tags":"","title":"Benchmark"},{"body":"This is the blog section. It has two categories: News and Releases.\n","categories":"","description":"","excerpt":"This is the blog section. It has two categories: News and Releases.\n","ref":"/hyperfoil-website-demo/blog/","tags":"","title":"Blog"},{"body":"Stop execution of current sequence if the phase is in finished state.\nThis is useful for a long-running (looping) sequence that should not extend the duration of its phase.\n","categories":"","description":"Stop execution of current sequence if the phase is in finished state. ","excerpt":"Stop execution of current sequence if the phase is in finished state. ","ref":"/hyperfoil-website-demo/docs/reference/steps/step_breakiffinished/","tags":"","title":"breakIfFinished"},{"body":"Prematurely stops execution of this sequence if the condition is satisfied.\nProperty Type Description allConditions Builder Condition combining multiple other conditions with ‘AND’ logic. boolCondition Builder Condition comparing boolean variables. dependency String This step is blocked if this variable does not have set value (none by default). intCondition Builder Condition comparing integer variables. onBreak Action.Builder Action performed when the condition is true and the sequence is to be ended. stringCondition Builder Condition comparing string variables. allConditions Test more conditions and combine the results using AND logic.\nProperty Type Description \u003clist of mappings\u003e \u003clist of builders\u003e List of conditions. allConditions.\u003clist of mappings\u003e Selector for condition type.\nProperty Type Description allConditions Builder Condition combining multiple other conditions with ‘AND’ logic. boolCondition Builder Condition comparing boolean variables. intCondition Builder Condition comparing integer variables. stringCondition Builder Condition comparing string variables. allConditions.\u003clist of mappings\u003e.allConditions Test more conditions and combine the results using AND logic.\nProperty Type Description \u003clist of mappings\u003e \u003clist of builders\u003e List of conditions. allConditions.\u003clist of mappings\u003e.boolCondition Tests session variable containing boolean value.\nProperty Type Description fromVar String Variable name. value boolean Expected value. allConditions.\u003clist of mappings\u003e.intCondition Condition comparing integer in session variable.\nInline definition Parses condition in the form \u003cvariable\u003e \u003coperator\u003e \u003cvalue\u003e where operator is one of: ==, !=, \u003c\u003e (the same as !=), \u003e=, \u003e, \u003c=, \u003c. Property Type Description equalTo Builder Compared variable must be equal to this value. fromVar Object Variable name. greaterOrEqualTo Builder Compared variable must be greater or equal to this value. greaterThan Builder Compared variable must be greater than this value. isSet boolean Check if the value is set or unset. By default the variable must be set. lessOrEqualTo Builder Compared variable must be lower or equal to this value. lessThan Builder Compared variable must be lower than this value. notEqualTo Builder Compared variable must not be equal to this value. allConditions.\u003clist of mappings\u003e.stringCondition Condition comparing string in session variable.\nProperty Type Description caseSensitive boolean True if the case must match, false if the check is case-insensitive. endsWith CharSequence Suffix for the string. equalTo CharSequence Literal value the string should match (the same as {@link #value}). fromVar Object Variable name. isSet boolean Check if the value is set or unset. By default the variable must be set. length int Check the length of the string. length (alternative) Builder Check the length of the string. matchVar String Fetch the value from a variable. negate boolean Invert the logic of this condition. Defaults to false. notEqualTo CharSequence Value that the string must not match. startsWith CharSequence Prefix for the string. value CharSequence Literal value the string should match. boolCondition Tests session variable containing boolean value.\nProperty Type Description fromVar String Variable name. value boolean Expected value. intCondition Condition comparing integer in session variable.\nInline definition Parses condition in the form \u003cvariable\u003e \u003coperator\u003e \u003cvalue\u003e where operator is one of: ==, !=, \u003c\u003e (the same as !=), \u003e=, \u003e, \u003c=, \u003c. Property Type Description equalTo Builder Compared variable must be equal to this value. fromVar Object Variable name. greaterOrEqualTo Builder Compared variable must be greater or equal to this value. greaterThan Builder Compared variable must be greater than this value. isSet boolean Check if the value is set or unset. By default the variable must be set. lessOrEqualTo Builder Compared variable must be lower or equal to this value. lessThan Builder Compared variable must be lower than this value. notEqualTo Builder Compared variable must not be equal to this value. intCondition.equalTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intCondition.greaterOrEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intCondition.greaterThan Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intCondition.lessOrEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intCondition.lessThan Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intCondition.notEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). stringCondition Condition comparing string in session variable.\nProperty Type Description caseSensitive boolean True if the case must match, false if the check is case-insensitive. endsWith CharSequence Suffix for the string. equalTo CharSequence Literal value the string should match (the same as {@link #value}). fromVar Object Variable name. isSet boolean Check if the value is set or unset. By default the variable must be set. length int Check the length of the string. length (alternative) Builder Check the length of the string. matchVar String Fetch the value from a variable. negate boolean Invert the logic of this condition. Defaults to false. notEqualTo CharSequence Value that the string must not match. startsWith CharSequence Prefix for the string. value CharSequence Literal value the string should match. stringCondition.length Property Type Description equalTo Builder Compared variable must be equal to this value. greaterOrEqualTo Builder Compared variable must be greater or equal to this value. greaterThan Builder Compared variable must be greater than this value. lessOrEqualTo Builder Compared variable must be lower or equal to this value. lessThan Builder Compared variable must be lower than this value. notEqualTo Builder Compared variable must not be equal to this value. stringCondition.length.equalTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). stringCondition.length.greaterOrEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). stringCondition.length.greaterThan Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). stringCondition.length.lessOrEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). stringCondition.length.lessThan Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). stringCondition.length.notEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). ","categories":"","description":"Prematurely stops execution of this sequence if the condition is satisfied.","excerpt":"Prematurely stops execution of this sequence if the condition is …","ref":"/hyperfoil-website-demo/docs/reference/steps/step_breaksequence/","tags":"","title":"breakSequence"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hyperfoil-website-demo/categories/","tags":"","title":"Categories"},{"body":"Drops all entries from HTTP cache in the session.\n","categories":"","description":"Drops all entries from HTTP cache in the session.","excerpt":"Drops all entries from HTTP cache in the session.","ref":"/hyperfoil-website-demo/docs/reference/actions/action_clearhttpcache/","tags":"","title":"clearHttpCache"},{"body":"Drops all entries from HTTP cache in the session.\n","categories":"","description":"Drops all entries from HTTP cache in the session.","excerpt":"Drops all entries from HTTP cache in the session.","ref":"/hyperfoil-website-demo/docs/reference/processors/processor_clearhttpcache/","tags":"","title":"clearHttpCache"},{"body":"Drops all entries from HTTP cache in the session.\n","categories":"","description":"Drops all entries from HTTP cache in the session.","excerpt":"Drops all entries from HTTP cache in the session.","ref":"/hyperfoil-website-demo/docs/reference/steps/step_clearhttpcache/","tags":"","title":"clearHttpCache"},{"body":"Prevents reuse connection after the response has been handled.\n","categories":"","description":"Prevents reuse connection after the response has been handled.","excerpt":"Prevents reuse connection after the response has been handled.","ref":"/hyperfoil-website-demo/docs/reference/processors/processor_closeconnection/","tags":"","title":"closeConnection"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hyperfoil-website-demo/tags/clustered/","tags":"","title":"clustered"},{"body":"Collects results of processor invocation into a unbounded list. WARNING: This processor should be used rarely as it allocates memory during the benchmark.\nInline definition Variable name to store the list. Property Type Description format enum Format into which should this processor convert the buffers before storing. Default is STRING.\nOptions:{::nomarkdown}BYTEBUF: {:/}Store the buffer directly. Beware that this may cause memory leaks!{::nomarkdown}BYTES: {:/}Store data as byte array.{::nomarkdown}STRING: {:/}Interprets the bytes as UTF-8 string.{::nomarkdown}{:/} toVar String Variable name. ","categories":"","description":"Collects results of processor invocation into a unbounded list. ","excerpt":"Collects results of processor invocation into a unbounded list. ","ref":"/hyperfoil-website-demo/docs/reference/processors/processor_collection/","tags":"","title":"collection"},{"body":" ","categories":"","description":"","excerpt":" ","ref":"/hyperfoil-website-demo/community/","tags":"","title":"Community"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hyperfoil-website-demo/tags/concepts/","tags":"","title":"concepts"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hyperfoil-website-demo/categories/concepts/","tags":"","title":"Concepts"},{"body":"Perform an action or sequence of actions conditionally.\nProperty Type Description actions Action.Builder Actions that should be executed should the condition hold. allConditions Builder Condition combining multiple other conditions with ‘AND’ logic. boolCondition Builder Condition comparing boolean variables. intCondition Builder Condition comparing integer variables. stringCondition Builder Condition comparing string variables. allConditions Test more conditions and combine the results using AND logic.\nProperty Type Description \u003clist of mappings\u003e \u003clist of builders\u003e List of conditions. allConditions.\u003clist of mappings\u003e Selector for condition type.\nProperty Type Description allConditions Builder Condition combining multiple other conditions with ‘AND’ logic. boolCondition Builder Condition comparing boolean variables. intCondition Builder Condition comparing integer variables. stringCondition Builder Condition comparing string variables. allConditions.\u003clist of mappings\u003e.allConditions Test more conditions and combine the results using AND logic.\nProperty Type Description \u003clist of mappings\u003e \u003clist of builders\u003e List of conditions. allConditions.\u003clist of mappings\u003e.boolCondition Tests session variable containing boolean value.\nProperty Type Description fromVar String Variable name. value boolean Expected value. allConditions.\u003clist of mappings\u003e.intCondition Condition comparing integer in session variable.\nInline definition Parses condition in the form \u003cvariable\u003e \u003coperator\u003e \u003cvalue\u003e where operator is one of: ==, !=, \u003c\u003e (the same as !=), \u003e=, \u003e, \u003c=, \u003c. Property Type Description equalTo Builder Compared variable must be equal to this value. fromVar Object Variable name. greaterOrEqualTo Builder Compared variable must be greater or equal to this value. greaterThan Builder Compared variable must be greater than this value. isSet boolean Check if the value is set or unset. By default the variable must be set. lessOrEqualTo Builder Compared variable must be lower or equal to this value. lessThan Builder Compared variable must be lower than this value. notEqualTo Builder Compared variable must not be equal to this value. allConditions.\u003clist of mappings\u003e.stringCondition Condition comparing string in session variable.\nProperty Type Description caseSensitive boolean True if the case must match, false if the check is case-insensitive. endsWith CharSequence Suffix for the string. equalTo CharSequence Literal value the string should match (the same as {@link #value}). fromVar Object Variable name. isSet boolean Check if the value is set or unset. By default the variable must be set. length int Check the length of the string. length (alternative) Builder Check the length of the string. matchVar String Fetch the value from a variable. negate boolean Invert the logic of this condition. Defaults to false. notEqualTo CharSequence Value that the string must not match. startsWith CharSequence Prefix for the string. value CharSequence Literal value the string should match. boolCondition Tests session variable containing boolean value.\nProperty Type Description fromVar String Variable name. value boolean Expected value. intCondition Condition comparing integer in session variable.\nInline definition Parses condition in the form \u003cvariable\u003e \u003coperator\u003e \u003cvalue\u003e where operator is one of: ==, !=, \u003c\u003e (the same as !=), \u003e=, \u003e, \u003c=, \u003c. Property Type Description equalTo Builder Compared variable must be equal to this value. fromVar Object Variable name. greaterOrEqualTo Builder Compared variable must be greater or equal to this value. greaterThan Builder Compared variable must be greater than this value. isSet boolean Check if the value is set or unset. By default the variable must be set. lessOrEqualTo Builder Compared variable must be lower or equal to this value. lessThan Builder Compared variable must be lower than this value. notEqualTo Builder Compared variable must not be equal to this value. intCondition.equalTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intCondition.greaterOrEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intCondition.greaterThan Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intCondition.lessOrEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intCondition.lessThan Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intCondition.notEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). stringCondition Condition comparing string in session variable.\nProperty Type Description caseSensitive boolean True if the case must match, false if the check is case-insensitive. endsWith CharSequence Suffix for the string. equalTo CharSequence Literal value the string should match (the same as {@link #value}). fromVar Object Variable name. isSet boolean Check if the value is set or unset. By default the variable must be set. length int Check the length of the string. length (alternative) Builder Check the length of the string. matchVar String Fetch the value from a variable. negate boolean Invert the logic of this condition. Defaults to false. notEqualTo CharSequence Value that the string must not match. startsWith CharSequence Prefix for the string. value CharSequence Literal value the string should match. stringCondition.length Property Type Description equalTo Builder Compared variable must be equal to this value. greaterOrEqualTo Builder Compared variable must be greater or equal to this value. greaterThan Builder Compared variable must be greater than this value. lessOrEqualTo Builder Compared variable must be lower or equal to this value. lessThan Builder Compared variable must be lower than this value. notEqualTo Builder Compared variable must not be equal to this value. stringCondition.length.equalTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). stringCondition.length.greaterOrEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). stringCondition.length.greaterThan Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). stringCondition.length.lessOrEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). stringCondition.length.lessThan Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). stringCondition.length.notEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). ","categories":"","description":"Perform an action or sequence of actions conditionally.","excerpt":"Perform an action or sequence of actions conditionally.","ref":"/hyperfoil-website-demo/docs/reference/actions/action_conditional/","tags":"","title":"conditional"},{"body":"Passes the data to nested processor if the condition holds. Note that the condition may be evaluated multiple times and therefore any nested processors should not change the results of the condition.\nProperty Type Description allConditions Builder Condition combining multiple other conditions with ‘AND’ logic. boolCondition Builder Condition comparing boolean variables. intCondition Builder Condition comparing integer variables. processor Processor.Builder One or more processors that should be invoked if the condition holds. stringCondition Builder Condition comparing string variables. allConditions Test more conditions and combine the results using AND logic.\nProperty Type Description \u003clist of mappings\u003e \u003clist of builders\u003e List of conditions. allConditions.\u003clist of mappings\u003e Selector for condition type.\nProperty Type Description allConditions Builder Condition combining multiple other conditions with ‘AND’ logic. boolCondition Builder Condition comparing boolean variables. intCondition Builder Condition comparing integer variables. stringCondition Builder Condition comparing string variables. allConditions.\u003clist of mappings\u003e.allConditions Test more conditions and combine the results using AND logic.\nProperty Type Description \u003clist of mappings\u003e \u003clist of builders\u003e List of conditions. allConditions.\u003clist of mappings\u003e.boolCondition Tests session variable containing boolean value.\nProperty Type Description fromVar String Variable name. value boolean Expected value. allConditions.\u003clist of mappings\u003e.intCondition Condition comparing integer in session variable.\nInline definition Parses condition in the form \u003cvariable\u003e \u003coperator\u003e \u003cvalue\u003e where operator is one of: ==, !=, \u003c\u003e (the same as !=), \u003e=, \u003e, \u003c=, \u003c. Property Type Description equalTo Builder Compared variable must be equal to this value. fromVar Object Variable name. greaterOrEqualTo Builder Compared variable must be greater or equal to this value. greaterThan Builder Compared variable must be greater than this value. isSet boolean Check if the value is set or unset. By default the variable must be set. lessOrEqualTo Builder Compared variable must be lower or equal to this value. lessThan Builder Compared variable must be lower than this value. notEqualTo Builder Compared variable must not be equal to this value. allConditions.\u003clist of mappings\u003e.stringCondition Condition comparing string in session variable.\nProperty Type Description caseSensitive boolean True if the case must match, false if the check is case-insensitive. endsWith CharSequence Suffix for the string. equalTo CharSequence Literal value the string should match (the same as {@link #value}). fromVar Object Variable name. isSet boolean Check if the value is set or unset. By default the variable must be set. length int Check the length of the string. length (alternative) Builder Check the length of the string. matchVar String Fetch the value from a variable. negate boolean Invert the logic of this condition. Defaults to false. notEqualTo CharSequence Value that the string must not match. startsWith CharSequence Prefix for the string. value CharSequence Literal value the string should match. boolCondition Tests session variable containing boolean value.\nProperty Type Description fromVar String Variable name. value boolean Expected value. intCondition Condition comparing integer in session variable.\nInline definition Parses condition in the form \u003cvariable\u003e \u003coperator\u003e \u003cvalue\u003e where operator is one of: ==, !=, \u003c\u003e (the same as !=), \u003e=, \u003e, \u003c=, \u003c. Property Type Description equalTo Builder Compared variable must be equal to this value. fromVar Object Variable name. greaterOrEqualTo Builder Compared variable must be greater or equal to this value. greaterThan Builder Compared variable must be greater than this value. isSet boolean Check if the value is set or unset. By default the variable must be set. lessOrEqualTo Builder Compared variable must be lower or equal to this value. lessThan Builder Compared variable must be lower than this value. notEqualTo Builder Compared variable must not be equal to this value. intCondition.equalTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intCondition.greaterOrEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intCondition.greaterThan Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intCondition.lessOrEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intCondition.lessThan Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intCondition.notEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). stringCondition Condition comparing string in session variable.\nProperty Type Description caseSensitive boolean True if the case must match, false if the check is case-insensitive. endsWith CharSequence Suffix for the string. equalTo CharSequence Literal value the string should match (the same as {@link #value}). fromVar Object Variable name. isSet boolean Check if the value is set or unset. By default the variable must be set. length int Check the length of the string. length (alternative) Builder Check the length of the string. matchVar String Fetch the value from a variable. negate boolean Invert the logic of this condition. Defaults to false. notEqualTo CharSequence Value that the string must not match. startsWith CharSequence Prefix for the string. value CharSequence Literal value the string should match. stringCondition.length Property Type Description equalTo Builder Compared variable must be equal to this value. greaterOrEqualTo Builder Compared variable must be greater or equal to this value. greaterThan Builder Compared variable must be greater than this value. lessOrEqualTo Builder Compared variable must be lower or equal to this value. lessThan Builder Compared variable must be lower than this value. notEqualTo Builder Compared variable must not be equal to this value. stringCondition.length.equalTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). stringCondition.length.greaterOrEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). stringCondition.length.greaterThan Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). stringCondition.length.lessOrEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). stringCondition.length.lessThan Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). stringCondition.length.notEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). ","categories":"","description":"Passes the data to nested processor if the condition holds. ","excerpt":"Passes the data to nested processor if the condition holds. ","ref":"/hyperfoil-website-demo/docs/reference/processors/processor_conditional/","tags":"","title":"conditional"},{"body":"Perform an action or sequence of actions conditionally.\nProperty Type Description actions Action.Builder Actions that should be executed should the condition hold. allConditions Builder Condition combining multiple other conditions with ‘AND’ logic. boolCondition Builder Condition comparing boolean variables. intCondition Builder Condition comparing integer variables. stringCondition Builder Condition comparing string variables. allConditions Test more conditions and combine the results using AND logic.\nProperty Type Description \u003clist of mappings\u003e \u003clist of builders\u003e List of conditions. allConditions.\u003clist of mappings\u003e Selector for condition type.\nProperty Type Description allConditions Builder Condition combining multiple other conditions with ‘AND’ logic. boolCondition Builder Condition comparing boolean variables. intCondition Builder Condition comparing integer variables. stringCondition Builder Condition comparing string variables. allConditions.\u003clist of mappings\u003e.allConditions Test more conditions and combine the results using AND logic.\nProperty Type Description \u003clist of mappings\u003e \u003clist of builders\u003e List of conditions. allConditions.\u003clist of mappings\u003e.boolCondition Tests session variable containing boolean value.\nProperty Type Description fromVar String Variable name. value boolean Expected value. allConditions.\u003clist of mappings\u003e.intCondition Condition comparing integer in session variable.\nInline definition Parses condition in the form \u003cvariable\u003e \u003coperator\u003e \u003cvalue\u003e where operator is one of: ==, !=, \u003c\u003e (the same as !=), \u003e=, \u003e, \u003c=, \u003c. Property Type Description equalTo Builder Compared variable must be equal to this value. fromVar Object Variable name. greaterOrEqualTo Builder Compared variable must be greater or equal to this value. greaterThan Builder Compared variable must be greater than this value. isSet boolean Check if the value is set or unset. By default the variable must be set. lessOrEqualTo Builder Compared variable must be lower or equal to this value. lessThan Builder Compared variable must be lower than this value. notEqualTo Builder Compared variable must not be equal to this value. allConditions.\u003clist of mappings\u003e.stringCondition Condition comparing string in session variable.\nProperty Type Description caseSensitive boolean True if the case must match, false if the check is case-insensitive. endsWith CharSequence Suffix for the string. equalTo CharSequence Literal value the string should match (the same as {@link #value}). fromVar Object Variable name. isSet boolean Check if the value is set or unset. By default the variable must be set. length int Check the length of the string. length (alternative) Builder Check the length of the string. matchVar String Fetch the value from a variable. negate boolean Invert the logic of this condition. Defaults to false. notEqualTo CharSequence Value that the string must not match. startsWith CharSequence Prefix for the string. value CharSequence Literal value the string should match. boolCondition Tests session variable containing boolean value.\nProperty Type Description fromVar String Variable name. value boolean Expected value. intCondition Condition comparing integer in session variable.\nInline definition Parses condition in the form \u003cvariable\u003e \u003coperator\u003e \u003cvalue\u003e where operator is one of: ==, !=, \u003c\u003e (the same as !=), \u003e=, \u003e, \u003c=, \u003c. Property Type Description equalTo Builder Compared variable must be equal to this value. fromVar Object Variable name. greaterOrEqualTo Builder Compared variable must be greater or equal to this value. greaterThan Builder Compared variable must be greater than this value. isSet boolean Check if the value is set or unset. By default the variable must be set. lessOrEqualTo Builder Compared variable must be lower or equal to this value. lessThan Builder Compared variable must be lower than this value. notEqualTo Builder Compared variable must not be equal to this value. intCondition.equalTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intCondition.greaterOrEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intCondition.greaterThan Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intCondition.lessOrEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intCondition.lessThan Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intCondition.notEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). stringCondition Condition comparing string in session variable.\nProperty Type Description caseSensitive boolean True if the case must match, false if the check is case-insensitive. endsWith CharSequence Suffix for the string. equalTo CharSequence Literal value the string should match (the same as {@link #value}). fromVar Object Variable name. isSet boolean Check if the value is set or unset. By default the variable must be set. length int Check the length of the string. length (alternative) Builder Check the length of the string. matchVar String Fetch the value from a variable. negate boolean Invert the logic of this condition. Defaults to false. notEqualTo CharSequence Value that the string must not match. startsWith CharSequence Prefix for the string. value CharSequence Literal value the string should match. stringCondition.length Property Type Description equalTo Builder Compared variable must be equal to this value. greaterOrEqualTo Builder Compared variable must be greater or equal to this value. greaterThan Builder Compared variable must be greater than this value. lessOrEqualTo Builder Compared variable must be lower or equal to this value. lessThan Builder Compared variable must be lower than this value. notEqualTo Builder Compared variable must not be equal to this value. stringCondition.length.equalTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). stringCondition.length.greaterOrEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). stringCondition.length.greaterThan Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). stringCondition.length.lessOrEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). stringCondition.length.lessThan Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). stringCondition.length.notEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). ","categories":"","description":"Perform an action or sequence of actions conditionally.","excerpt":"Perform an action or sequence of actions conditionally.","ref":"/hyperfoil-website-demo/docs/reference/steps/step_conditional/","tags":"","title":"conditional"},{"body":"Records number of parts this processor is invoked on.\nInline definition Name of variable for the number of occurrences. Property Type Description toVar String Variable where to store number of occurrences. ","categories":"","description":"Records number of parts this processor is invoked on.","excerpt":"Records number of parts this processor is invoked on.","ref":"/hyperfoil-website-demo/docs/reference/processors/processor_count/","tags":"","title":"count"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hyperfoil-website-demo/tags/credentials/","tags":"","title":"credentials"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hyperfoil-website-demo/tags/custom/","tags":"","title":"custom"},{"body":"Here you can find an exhaustive documentation for the Hyperfoil tool, let’s start!\n","categories":"","description":"","excerpt":"Here you can find an exhaustive documentation for the Hyperfoil tool, …","ref":"/hyperfoil-website-demo/docs/","tags":"","title":"Documentation"},{"body":" Download It seems you're ready to try Hyperfoil! Check out the latest release.\nDownload 0.26.0 If you're interested in exploring older releases, feel free to check out our full release archive. ","categories":"","description":"A Hugo theme for creating great technical documentation sites","excerpt":"A Hugo theme for creating great technical documentation sites","ref":"/hyperfoil-website-demo/download/","tags":"","title":"Download"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hyperfoil-website-demo/tags/editor/","tags":"","title":"editor"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hyperfoil-website-demo/tags/ergonomics/","tags":"","title":"ergonomics"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hyperfoil-website-demo/tags/examples/","tags":"","title":"examples"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hyperfoil-website-demo/categories/examples/","tags":"","title":"Examples"},{"body":"Fail the phase with given message. Used mostly for testing/debugging.\nInline definition Message to fail with (unconditionally). Property Type Description allConditions Builder Condition combining multiple other conditions with ‘AND’ logic. boolCondition Builder Condition comparing boolean variables. intCondition Builder Condition comparing integer variables. message String Message attached to the failure exception. stringCondition Builder Condition comparing string variables. allConditions Test more conditions and combine the results using AND logic.\nProperty Type Description \u003clist of mappings\u003e \u003clist of builders\u003e List of conditions. allConditions.\u003clist of mappings\u003e Selector for condition type.\nProperty Type Description allConditions Builder Condition combining multiple other conditions with ‘AND’ logic. boolCondition Builder Condition comparing boolean variables. intCondition Builder Condition comparing integer variables. stringCondition Builder Condition comparing string variables. allConditions.\u003clist of mappings\u003e.allConditions Test more conditions and combine the results using AND logic.\nProperty Type Description \u003clist of mappings\u003e \u003clist of builders\u003e List of conditions. allConditions.\u003clist of mappings\u003e.boolCondition Tests session variable containing boolean value.\nProperty Type Description fromVar String Variable name. value boolean Expected value. allConditions.\u003clist of mappings\u003e.intCondition Condition comparing integer in session variable.\nInline definition Parses condition in the form \u003cvariable\u003e \u003coperator\u003e \u003cvalue\u003e where operator is one of: ==, !=, \u003c\u003e (the same as !=), \u003e=, \u003e, \u003c=, \u003c. Property Type Description equalTo Builder Compared variable must be equal to this value. fromVar Object Variable name. greaterOrEqualTo Builder Compared variable must be greater or equal to this value. greaterThan Builder Compared variable must be greater than this value. isSet boolean Check if the value is set or unset. By default the variable must be set. lessOrEqualTo Builder Compared variable must be lower or equal to this value. lessThan Builder Compared variable must be lower than this value. notEqualTo Builder Compared variable must not be equal to this value. allConditions.\u003clist of mappings\u003e.stringCondition Condition comparing string in session variable.\nProperty Type Description caseSensitive boolean True if the case must match, false if the check is case-insensitive. endsWith CharSequence Suffix for the string. equalTo CharSequence Literal value the string should match (the same as {@link #value}). fromVar Object Variable name. isSet boolean Check if the value is set or unset. By default the variable must be set. length int Check the length of the string. length (alternative) Builder Check the length of the string. matchVar String Fetch the value from a variable. negate boolean Invert the logic of this condition. Defaults to false. notEqualTo CharSequence Value that the string must not match. startsWith CharSequence Prefix for the string. value CharSequence Literal value the string should match. boolCondition Tests session variable containing boolean value.\nProperty Type Description fromVar String Variable name. value boolean Expected value. intCondition Condition comparing integer in session variable.\nInline definition Parses condition in the form \u003cvariable\u003e \u003coperator\u003e \u003cvalue\u003e where operator is one of: ==, !=, \u003c\u003e (the same as !=), \u003e=, \u003e, \u003c=, \u003c. Property Type Description equalTo Builder Compared variable must be equal to this value. fromVar Object Variable name. greaterOrEqualTo Builder Compared variable must be greater or equal to this value. greaterThan Builder Compared variable must be greater than this value. isSet boolean Check if the value is set or unset. By default the variable must be set. lessOrEqualTo Builder Compared variable must be lower or equal to this value. lessThan Builder Compared variable must be lower than this value. notEqualTo Builder Compared variable must not be equal to this value. intCondition.equalTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intCondition.greaterOrEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intCondition.greaterThan Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intCondition.lessOrEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intCondition.lessThan Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intCondition.notEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). stringCondition Condition comparing string in session variable.\nProperty Type Description caseSensitive boolean True if the case must match, false if the check is case-insensitive. endsWith CharSequence Suffix for the string. equalTo CharSequence Literal value the string should match (the same as {@link #value}). fromVar Object Variable name. isSet boolean Check if the value is set or unset. By default the variable must be set. length int Check the length of the string. length (alternative) Builder Check the length of the string. matchVar String Fetch the value from a variable. negate boolean Invert the logic of this condition. Defaults to false. notEqualTo CharSequence Value that the string must not match. startsWith CharSequence Prefix for the string. value CharSequence Literal value the string should match. stringCondition.length Property Type Description equalTo Builder Compared variable must be equal to this value. greaterOrEqualTo Builder Compared variable must be greater or equal to this value. greaterThan Builder Compared variable must be greater than this value. lessOrEqualTo Builder Compared variable must be lower or equal to this value. lessThan Builder Compared variable must be lower than this value. notEqualTo Builder Compared variable must not be equal to this value. stringCondition.length.equalTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). stringCondition.length.greaterOrEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). stringCondition.length.greaterThan Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). stringCondition.length.lessOrEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). stringCondition.length.lessThan Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). stringCondition.length.notEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). ","categories":"","description":"Fail the phase with given message. Used mostly for testing/debugging.","excerpt":"Fail the phase with given message. Used mostly for testing/debugging.","ref":"/hyperfoil-website-demo/docs/reference/actions/action_fail/","tags":"","title":"fail"},{"body":"Fail the phase with given message. Used mostly for testing/debugging.\nInline definition Message to fail with (unconditionally). Property Type Description allConditions Builder Condition combining multiple other conditions with ‘AND’ logic. boolCondition Builder Condition comparing boolean variables. intCondition Builder Condition comparing integer variables. message String Message attached to the failure exception. stringCondition Builder Condition comparing string variables. allConditions Test more conditions and combine the results using AND logic.\nProperty Type Description \u003clist of mappings\u003e \u003clist of builders\u003e List of conditions. allConditions.\u003clist of mappings\u003e Selector for condition type.\nProperty Type Description allConditions Builder Condition combining multiple other conditions with ‘AND’ logic. boolCondition Builder Condition comparing boolean variables. intCondition Builder Condition comparing integer variables. stringCondition Builder Condition comparing string variables. allConditions.\u003clist of mappings\u003e.allConditions Test more conditions and combine the results using AND logic.\nProperty Type Description \u003clist of mappings\u003e \u003clist of builders\u003e List of conditions. allConditions.\u003clist of mappings\u003e.boolCondition Tests session variable containing boolean value.\nProperty Type Description fromVar String Variable name. value boolean Expected value. allConditions.\u003clist of mappings\u003e.intCondition Condition comparing integer in session variable.\nInline definition Parses condition in the form \u003cvariable\u003e \u003coperator\u003e \u003cvalue\u003e where operator is one of: ==, !=, \u003c\u003e (the same as !=), \u003e=, \u003e, \u003c=, \u003c. Property Type Description equalTo Builder Compared variable must be equal to this value. fromVar Object Variable name. greaterOrEqualTo Builder Compared variable must be greater or equal to this value. greaterThan Builder Compared variable must be greater than this value. isSet boolean Check if the value is set or unset. By default the variable must be set. lessOrEqualTo Builder Compared variable must be lower or equal to this value. lessThan Builder Compared variable must be lower than this value. notEqualTo Builder Compared variable must not be equal to this value. allConditions.\u003clist of mappings\u003e.stringCondition Condition comparing string in session variable.\nProperty Type Description caseSensitive boolean True if the case must match, false if the check is case-insensitive. endsWith CharSequence Suffix for the string. equalTo CharSequence Literal value the string should match (the same as {@link #value}). fromVar Object Variable name. isSet boolean Check if the value is set or unset. By default the variable must be set. length int Check the length of the string. length (alternative) Builder Check the length of the string. matchVar String Fetch the value from a variable. negate boolean Invert the logic of this condition. Defaults to false. notEqualTo CharSequence Value that the string must not match. startsWith CharSequence Prefix for the string. value CharSequence Literal value the string should match. boolCondition Tests session variable containing boolean value.\nProperty Type Description fromVar String Variable name. value boolean Expected value. intCondition Condition comparing integer in session variable.\nInline definition Parses condition in the form \u003cvariable\u003e \u003coperator\u003e \u003cvalue\u003e where operator is one of: ==, !=, \u003c\u003e (the same as !=), \u003e=, \u003e, \u003c=, \u003c. Property Type Description equalTo Builder Compared variable must be equal to this value. fromVar Object Variable name. greaterOrEqualTo Builder Compared variable must be greater or equal to this value. greaterThan Builder Compared variable must be greater than this value. isSet boolean Check if the value is set or unset. By default the variable must be set. lessOrEqualTo Builder Compared variable must be lower or equal to this value. lessThan Builder Compared variable must be lower than this value. notEqualTo Builder Compared variable must not be equal to this value. intCondition.equalTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intCondition.greaterOrEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intCondition.greaterThan Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intCondition.lessOrEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intCondition.lessThan Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intCondition.notEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). stringCondition Condition comparing string in session variable.\nProperty Type Description caseSensitive boolean True if the case must match, false if the check is case-insensitive. endsWith CharSequence Suffix for the string. equalTo CharSequence Literal value the string should match (the same as {@link #value}). fromVar Object Variable name. isSet boolean Check if the value is set or unset. By default the variable must be set. length int Check the length of the string. length (alternative) Builder Check the length of the string. matchVar String Fetch the value from a variable. negate boolean Invert the logic of this condition. Defaults to false. notEqualTo CharSequence Value that the string must not match. startsWith CharSequence Prefix for the string. value CharSequence Literal value the string should match. stringCondition.length Property Type Description equalTo Builder Compared variable must be equal to this value. greaterOrEqualTo Builder Compared variable must be greater or equal to this value. greaterThan Builder Compared variable must be greater than this value. lessOrEqualTo Builder Compared variable must be lower or equal to this value. lessThan Builder Compared variable must be lower than this value. notEqualTo Builder Compared variable must not be equal to this value. stringCondition.length.equalTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). stringCondition.length.greaterOrEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). stringCondition.length.greaterThan Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). stringCondition.length.lessOrEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). stringCondition.length.lessThan Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). stringCondition.length.notEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). ","categories":"","description":"Fail the phase with given message. Used mostly for testing/debugging.","excerpt":"Fail the phase with given message. Used mostly for testing/debugging.","ref":"/hyperfoil-website-demo/docs/reference/processors/processor_fail/","tags":"","title":"fail"},{"body":"Fail the phase with given message. Used mostly for testing/debugging.\nInline definition Message to fail with (unconditionally). Property Type Description allConditions Builder Condition combining multiple other conditions with ‘AND’ logic. boolCondition Builder Condition comparing boolean variables. intCondition Builder Condition comparing integer variables. message String Message attached to the failure exception. stringCondition Builder Condition comparing string variables. allConditions Test more conditions and combine the results using AND logic.\nProperty Type Description \u003clist of mappings\u003e \u003clist of builders\u003e List of conditions. allConditions.\u003clist of mappings\u003e Selector for condition type.\nProperty Type Description allConditions Builder Condition combining multiple other conditions with ‘AND’ logic. boolCondition Builder Condition comparing boolean variables. intCondition Builder Condition comparing integer variables. stringCondition Builder Condition comparing string variables. allConditions.\u003clist of mappings\u003e.allConditions Test more conditions and combine the results using AND logic.\nProperty Type Description \u003clist of mappings\u003e \u003clist of builders\u003e List of conditions. allConditions.\u003clist of mappings\u003e.boolCondition Tests session variable containing boolean value.\nProperty Type Description fromVar String Variable name. value boolean Expected value. allConditions.\u003clist of mappings\u003e.intCondition Condition comparing integer in session variable.\nInline definition Parses condition in the form \u003cvariable\u003e \u003coperator\u003e \u003cvalue\u003e where operator is one of: ==, !=, \u003c\u003e (the same as !=), \u003e=, \u003e, \u003c=, \u003c. Property Type Description equalTo Builder Compared variable must be equal to this value. fromVar Object Variable name. greaterOrEqualTo Builder Compared variable must be greater or equal to this value. greaterThan Builder Compared variable must be greater than this value. isSet boolean Check if the value is set or unset. By default the variable must be set. lessOrEqualTo Builder Compared variable must be lower or equal to this value. lessThan Builder Compared variable must be lower than this value. notEqualTo Builder Compared variable must not be equal to this value. allConditions.\u003clist of mappings\u003e.stringCondition Condition comparing string in session variable.\nProperty Type Description caseSensitive boolean True if the case must match, false if the check is case-insensitive. endsWith CharSequence Suffix for the string. equalTo CharSequence Literal value the string should match (the same as {@link #value}). fromVar Object Variable name. isSet boolean Check if the value is set or unset. By default the variable must be set. length int Check the length of the string. length (alternative) Builder Check the length of the string. matchVar String Fetch the value from a variable. negate boolean Invert the logic of this condition. Defaults to false. notEqualTo CharSequence Value that the string must not match. startsWith CharSequence Prefix for the string. value CharSequence Literal value the string should match. boolCondition Tests session variable containing boolean value.\nProperty Type Description fromVar String Variable name. value boolean Expected value. intCondition Condition comparing integer in session variable.\nInline definition Parses condition in the form \u003cvariable\u003e \u003coperator\u003e \u003cvalue\u003e where operator is one of: ==, !=, \u003c\u003e (the same as !=), \u003e=, \u003e, \u003c=, \u003c. Property Type Description equalTo Builder Compared variable must be equal to this value. fromVar Object Variable name. greaterOrEqualTo Builder Compared variable must be greater or equal to this value. greaterThan Builder Compared variable must be greater than this value. isSet boolean Check if the value is set or unset. By default the variable must be set. lessOrEqualTo Builder Compared variable must be lower or equal to this value. lessThan Builder Compared variable must be lower than this value. notEqualTo Builder Compared variable must not be equal to this value. intCondition.equalTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intCondition.greaterOrEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intCondition.greaterThan Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intCondition.lessOrEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intCondition.lessThan Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intCondition.notEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). stringCondition Condition comparing string in session variable.\nProperty Type Description caseSensitive boolean True if the case must match, false if the check is case-insensitive. endsWith CharSequence Suffix for the string. equalTo CharSequence Literal value the string should match (the same as {@link #value}). fromVar Object Variable name. isSet boolean Check if the value is set or unset. By default the variable must be set. length int Check the length of the string. length (alternative) Builder Check the length of the string. matchVar String Fetch the value from a variable. negate boolean Invert the logic of this condition. Defaults to false. notEqualTo CharSequence Value that the string must not match. startsWith CharSequence Prefix for the string. value CharSequence Literal value the string should match. stringCondition.length Property Type Description equalTo Builder Compared variable must be equal to this value. greaterOrEqualTo Builder Compared variable must be greater or equal to this value. greaterThan Builder Compared variable must be greater than this value. lessOrEqualTo Builder Compared variable must be lower or equal to this value. lessThan Builder Compared variable must be lower than this value. notEqualTo Builder Compared variable must not be equal to this value. stringCondition.length.equalTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). stringCondition.length.greaterOrEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). stringCondition.length.greaterThan Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). stringCondition.length.lessOrEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). stringCondition.length.lessThan Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). stringCondition.length.notEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). ","categories":"","description":"Fail the phase with given message. Used mostly for testing/debugging.","excerpt":"Fail the phase with given message. Used mostly for testing/debugging.","ref":"/hyperfoil-website-demo/docs/reference/steps/step_fail/","tags":"","title":"fail"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hyperfoil-website-demo/tags/faq/","tags":"","title":"faq"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hyperfoil-website-demo/categories/faq/","tags":"","title":"FAQ"},{"body":"Instantiate new sequences based on array variable content.\nProperty Type Description counterVar String Variable to be set to the number of created sequences (optional). dependency String This step is blocked if this variable does not have set value (none by default). fromVar String Variable holding the array. sequence String Name of the instantiated sequence. ","categories":"","description":"Instantiate new sequences based on array variable content.","excerpt":"Instantiate new sequences based on array variable content.","ref":"/hyperfoil-website-demo/docs/reference/steps/step_foreach/","tags":"","title":"foreach"},{"body":"Lookup index of an item in an array/collection.\nProperty Type Description collection String Variable to fetch the collection from. item Builder Item that should be looked up (using equality). toVar String Integer variable to store the index, or -1 if the item is not found. item Inline definition Verbatim value. Property Type Description fromVar String Fetch value from session variable. value String Verbatim value. ","categories":"","description":"Lookup index of an item in an array/collection.","excerpt":"Lookup index of an item in an array/collection.","ref":"/hyperfoil-website-demo/docs/reference/actions/action_getindex/","tags":"","title":"getIndex"},{"body":"Lookup index of an item in an array/collection.\nProperty Type Description collection String Variable to fetch the collection from. item Builder Item that should be looked up (using equality). toVar String Integer variable to store the index, or -1 if the item is not found. item Inline definition Verbatim value. Property Type Description fromVar String Fetch value from session variable. value String Verbatim value. ","categories":"","description":"Lookup index of an item in an array/collection.","excerpt":"Lookup index of an item in an array/collection.","ref":"/hyperfoil-website-demo/docs/reference/processors/processor_getindex/","tags":"","title":"getIndex"},{"body":"Lookup index of an item in an array/collection.\nProperty Type Description collection String Variable to fetch the collection from. item Builder Item that should be looked up (using equality). toVar String Integer variable to store the index, or -1 if the item is not found. item Inline definition Verbatim value. Property Type Description fromVar String Fetch value from session variable. value String Verbatim value. ","categories":"","description":"Lookup index of an item in an array/collection.","excerpt":"Lookup index of an item in an array/collection.","ref":"/hyperfoil-website-demo/docs/reference/steps/step_getindex/","tags":"","title":"getIndex"},{"body":"Retrieves n-th item from an array or collection.\nProperty Type Description fromVar String Source variable with an array or list. index Builder Source for index into the array/list. toVar String Destination variable for the n-th element. index Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). ","categories":"","description":"Retrieves n-th item from an array or collection.","excerpt":"Retrieves n-th item from an array or collection.","ref":"/hyperfoil-website-demo/docs/reference/actions/action_getitem/","tags":"","title":"getItem"},{"body":"Retrieves n-th item from an array or collection.\nProperty Type Description fromVar String Source variable with an array or list. index Builder Source for index into the array/list. toVar String Destination variable for the n-th element. index Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). ","categories":"","description":"Retrieves n-th item from an array or collection.","excerpt":"Retrieves n-th item from an array or collection.","ref":"/hyperfoil-website-demo/docs/reference/processors/processor_getitem/","tags":"","title":"getItem"},{"body":"Retrieves n-th item from an array or collection.\nProperty Type Description fromVar String Source variable with an array or list. index Builder Source for index into the array/list. toVar String Destination variable for the n-th element. index Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). ","categories":"","description":"Retrieves n-th item from an array or collection.","excerpt":"Retrieves n-th item from an array or collection.","ref":"/hyperfoil-website-demo/docs/reference/steps/step_getitem/","tags":"","title":"getItem"},{"body":"Retrieves value from a counter shared by all sessions in the same executor and stores that in a session variable. If the value exceeds allowed integer range (-2^31 .. 2^31 - 1) it is capped.\nInline definition Both the key and variable name. Property Type Description key String Identifier for the counter. toVar String Session variable for storing the value. ","categories":"","description":"Retrieves value from a counter shared by all sessions in the same executor and stores that in a session variable. ","excerpt":"Retrieves value from a counter shared by all sessions in the same …","ref":"/hyperfoil-website-demo/docs/reference/actions/action_getsharedcounter/","tags":"","title":"getSharedCounter"},{"body":"Retrieves value from a counter shared by all sessions in the same executor and stores that in a session variable. If the value exceeds allowed integer range (-2^31 .. 2^31 - 1) it is capped.\nInline definition Both the key and variable name. Property Type Description key String Identifier for the counter. toVar String Session variable for storing the value. ","categories":"","description":"Retrieves value from a counter shared by all sessions in the same executor and stores that in a session variable. ","excerpt":"Retrieves value from a counter shared by all sessions in the same …","ref":"/hyperfoil-website-demo/docs/reference/processors/processor_getsharedcounter/","tags":"","title":"getSharedCounter"},{"body":"Retrieves value from a counter shared by all sessions in the same executor and stores that in a session variable. If the value exceeds allowed integer range (-2^31 .. 2^31 - 1) it is capped.\nInline definition Both the key and variable name. Property Type Description key String Identifier for the counter. toVar String Session variable for storing the value. ","categories":"","description":"Retrieves value from a counter shared by all sessions in the same executor and stores that in a session variable. ","excerpt":"Retrieves value from a counter shared by all sessions in the same …","ref":"/hyperfoil-website-demo/docs/reference/steps/step_getsharedcounter/","tags":"","title":"getSharedCounter"},{"body":"Calculates size of an array/collection held in variable into another variable\nProperty Type Description boolFilter Builder Count only items matching the condition. fromVar String Variable holding the collection. intFilter Builder Count only items matching the condition. stringFilter Builder Count only items matching the condition. toVar String Variable storing the size. undefinedValue int Value to use when fromVar is unset or it does not contain any array/collection. boolFilter Property Type Description value boolean Expected value. intFilter Property Type Description equalTo Builder Compared variable must be equal to this value. greaterOrEqualTo Builder Compared variable must be greater or equal to this value. greaterThan Builder Compared variable must be greater than this value. lessOrEqualTo Builder Compared variable must be lower or equal to this value. lessThan Builder Compared variable must be lower than this value. notEqualTo Builder Compared variable must not be equal to this value. intFilter.equalTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intFilter.greaterOrEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intFilter.greaterThan Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intFilter.lessOrEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intFilter.lessThan Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intFilter.notEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). stringFilter Property Type Description caseSensitive boolean True if the case must match, false if the check is case-insensitive. endsWith CharSequence Suffix for the string. equalTo CharSequence Literal value the string should match (the same as {@link #value}). length int Check the length of the string. length (alternative) Builder Check the length of the string. matchVar String Fetch the value from a variable. negate boolean Invert the logic of this condition. Defaults to false. notEqualTo CharSequence Value that the string must not match. startsWith CharSequence Prefix for the string. value CharSequence Literal value the string should match. stringFilter.length Property Type Description equalTo Builder Compared variable must be equal to this value. greaterOrEqualTo Builder Compared variable must be greater or equal to this value. greaterThan Builder Compared variable must be greater than this value. lessOrEqualTo Builder Compared variable must be lower or equal to this value. lessThan Builder Compared variable must be lower than this value. notEqualTo Builder Compared variable must not be equal to this value. stringFilter.length.equalTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). stringFilter.length.greaterOrEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). stringFilter.length.greaterThan Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). stringFilter.length.lessOrEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). stringFilter.length.lessThan Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). stringFilter.length.notEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). ","categories":"","description":"Calculates size of an array/collection held in variable into another variable","excerpt":"Calculates size of an array/collection held in variable into another …","ref":"/hyperfoil-website-demo/docs/reference/actions/action_getsize/","tags":"","title":"getSize"},{"body":"Calculates size of an array/collection held in variable into another variable\nProperty Type Description boolFilter Builder Count only items matching the condition. fromVar String Variable holding the collection. intFilter Builder Count only items matching the condition. stringFilter Builder Count only items matching the condition. toVar String Variable storing the size. undefinedValue int Value to use when fromVar is unset or it does not contain any array/collection. boolFilter Property Type Description value boolean Expected value. intFilter Property Type Description equalTo Builder Compared variable must be equal to this value. greaterOrEqualTo Builder Compared variable must be greater or equal to this value. greaterThan Builder Compared variable must be greater than this value. lessOrEqualTo Builder Compared variable must be lower or equal to this value. lessThan Builder Compared variable must be lower than this value. notEqualTo Builder Compared variable must not be equal to this value. intFilter.equalTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intFilter.greaterOrEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intFilter.greaterThan Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intFilter.lessOrEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intFilter.lessThan Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intFilter.notEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). stringFilter Property Type Description caseSensitive boolean True if the case must match, false if the check is case-insensitive. endsWith CharSequence Suffix for the string. equalTo CharSequence Literal value the string should match (the same as {@link #value}). length int Check the length of the string. length (alternative) Builder Check the length of the string. matchVar String Fetch the value from a variable. negate boolean Invert the logic of this condition. Defaults to false. notEqualTo CharSequence Value that the string must not match. startsWith CharSequence Prefix for the string. value CharSequence Literal value the string should match. stringFilter.length Property Type Description equalTo Builder Compared variable must be equal to this value. greaterOrEqualTo Builder Compared variable must be greater or equal to this value. greaterThan Builder Compared variable must be greater than this value. lessOrEqualTo Builder Compared variable must be lower or equal to this value. lessThan Builder Compared variable must be lower than this value. notEqualTo Builder Compared variable must not be equal to this value. stringFilter.length.equalTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). stringFilter.length.greaterOrEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). stringFilter.length.greaterThan Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). stringFilter.length.lessOrEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). stringFilter.length.lessThan Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). stringFilter.length.notEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). ","categories":"","description":"Calculates size of an array/collection held in variable into another variable","excerpt":"Calculates size of an array/collection held in variable into another …","ref":"/hyperfoil-website-demo/docs/reference/processors/processor_getsize/","tags":"","title":"getSize"},{"body":"Calculates size of an array/collection held in variable into another variable\nProperty Type Description boolFilter Builder Count only items matching the condition. fromVar String Variable holding the collection. intFilter Builder Count only items matching the condition. stringFilter Builder Count only items matching the condition. toVar String Variable storing the size. undefinedValue int Value to use when fromVar is unset or it does not contain any array/collection. boolFilter Property Type Description value boolean Expected value. intFilter Property Type Description equalTo Builder Compared variable must be equal to this value. greaterOrEqualTo Builder Compared variable must be greater or equal to this value. greaterThan Builder Compared variable must be greater than this value. lessOrEqualTo Builder Compared variable must be lower or equal to this value. lessThan Builder Compared variable must be lower than this value. notEqualTo Builder Compared variable must not be equal to this value. intFilter.equalTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intFilter.greaterOrEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intFilter.greaterThan Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intFilter.lessOrEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intFilter.lessThan Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intFilter.notEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). stringFilter Property Type Description caseSensitive boolean True if the case must match, false if the check is case-insensitive. endsWith CharSequence Suffix for the string. equalTo CharSequence Literal value the string should match (the same as {@link #value}). length int Check the length of the string. length (alternative) Builder Check the length of the string. matchVar String Fetch the value from a variable. negate boolean Invert the logic of this condition. Defaults to false. notEqualTo CharSequence Value that the string must not match. startsWith CharSequence Prefix for the string. value CharSequence Literal value the string should match. stringFilter.length Property Type Description equalTo Builder Compared variable must be equal to this value. greaterOrEqualTo Builder Compared variable must be greater or equal to this value. greaterThan Builder Compared variable must be greater than this value. lessOrEqualTo Builder Compared variable must be lower or equal to this value. lessThan Builder Compared variable must be lower than this value. notEqualTo Builder Compared variable must not be equal to this value. stringFilter.length.equalTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). stringFilter.length.greaterOrEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). stringFilter.length.greaterThan Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). stringFilter.length.lessOrEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). stringFilter.length.lessThan Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). stringFilter.length.notEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). ","categories":"","description":"Calculates size of an array/collection held in variable into another variable","excerpt":"Calculates size of an array/collection held in variable into another …","ref":"/hyperfoil-website-demo/docs/reference/steps/step_getsize/","tags":"","title":"getSize"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hyperfoil-website-demo/categories/getstarted/","tags":"","title":"GetStarted"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hyperfoil-website-demo/categories/guide/","tags":"","title":"Guide"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hyperfoil-website-demo/tags/guides/","tags":"","title":"guides"},{"body":"Decompresses a GZIP data and pipes the output to delegated processors. If the data contains multiple concatenated GZIP streams it will pipe multiple decompressed objects with isLastPart set to true at the end of each stream.\nProperty Type Description encodingVar Object Variable used to pass header value from header handlers. processor Processor.Builder Add one or more processors. ","categories":"","description":"Decompresses a GZIP data and pipes the output to delegated processors. ","excerpt":"Decompresses a GZIP data and pipes the output to delegated processors. …","ref":"/hyperfoil-website-demo/docs/reference/processors/processor_gzipinflator/","tags":"","title":"gzipInflator"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hyperfoil-website-demo/tags/handlers/","tags":"","title":"handlers"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hyperfoil-website-demo/tags/hooks/","tags":"","title":"hooks"},{"body":"Issues a HotRod request and registers handlers for the response.\nProperty Type Description cacheName String Name of the cache used for the operation. This can be a pattern. cacheName (alternative) Builder \u003cno description\u003e get String Get specified entry in the remote cache. key String Key used for the operation. This can be a pattern. key (alternative) Builder \u003cno description\u003e metric String Requests statistics will use this metric name. metric (alternative) \u003clist of strings\u003e Allows categorizing request statistics into metrics based on the request path. operation enum Options:{::nomarkdown}PUT: {:/}Adds or overrides each specified entry in the remote cache.{::nomarkdown}GET: {:/}Get specified entry in the remote cache.{::nomarkdown}{:/} put String Adds or overrides each specified entry in the remote cache. value String Value for the operation. This can be a pattern. value (alternative) Builder \u003cno description\u003e cacheName Generic builder for generating a string.\nInline definition A pattern for string interpolation. Property Type Description fromVar Object Load the string from session variable. pattern String Use pattern replacing session variables. value String String value used verbatim. key Generic builder for generating a string.\nInline definition A pattern for string interpolation. Property Type Description fromVar Object Load the string from session variable. pattern String Use pattern replacing session variables. value String String value used verbatim. metric Allows categorizing request statistics into metrics based on the request path.\nProperty Type Description \u003clist of strings\u003e \u003clist of strings\u003e {::nomarkdown}Allows categorizing request statistics into metrics based on the request path. The expressions are evaluated in the order as provided in the list. Use one of: regexp -\u003e replacement, e.g. ([^?])(?.)? -\u003e $1 to drop the query part. regexp (don’t do any replaces and use the full path), e.g. .*.jpg -\u003e name (metric applied if none of the previous expressions match). {:/} value Generic builder for generating a string.\nInline definition A pattern for string interpolation. Property Type Description fromVar Object Load the string from session variable. pattern String Use pattern replacing session variables. value String String value used verbatim. ","categories":"","description":"Issues a HotRod request and registers handlers for the response.","excerpt":"Issues a HotRod request and registers handlers for the response.","ref":"/hyperfoil-website-demo/docs/reference/steps/step_hotrodrequest/","tags":"","title":"hotrodRequest"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hyperfoil-website-demo/tags/how-to/","tags":"","title":"how-to"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hyperfoil-website-demo/categories/howto/","tags":"","title":"HowTo"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hyperfoil-website-demo/tags/http/","tags":"","title":"http"},{"body":"Issues a HTTP request and registers handlers for the response.\nProperty Type Description authority String HTTP authority (host:port) this request should target. Must match one of the entries in http section. The string can use string interpolation. authority (alternative) Builder HTTP authority (host:port) this request should target. Must match one of the entries in http section. body Builder HTTP request body. body (alternative) String HTTP request body (possibly a pattern). compensation Builder Configures additional metric compensated for coordinated omission. compression Builder Configure response compression. compression (alternative) String Request server to respond with compressed entity using specified content encoding. CONNECT String Issue HTTP CONNECT request to given path. This can be a pattern. CONNECT (alternative) Builder Issue HTTP CONNECT request to given path. DELETE String Issue HTTP DELETE request to given path. This can be a pattern. DELETE (alternative) Builder Issue HTTP DELETE request to given path. endpoint Builder HTTP endpoint this request should target. Must match to the name of the entries in http section. GET String Issue HTTP GET request to given path. This can be a pattern. GET (alternative) Builder Issue HTTP GET request to given path. handler Builder HTTP response handlers. HEAD String Issue HTTP HEAD request to given path. This can be a pattern. HEAD (alternative) Builder Issue HTTP HEAD request to given path. headers Builder HTTP headers sent in the request. method enum HTTP method used for the request.\nOptions:{::nomarkdown}GETHEADPOSTPUTDELETEOPTIONSPATCHTRACECONNECT{:/} metric String Requests statistics will use this metric name. metric (alternative) \u003clist of strings\u003e Allows categorizing request statistics into metrics based on the request path. OPTIONS String Issue HTTP OPTIONS request to given path. This can be a pattern. OPTIONS (alternative) Builder Issue HTTP OPTIONS request to given path. PATCH String Issue HTTP PATCH request to given path. This can be a pattern. PATCH (alternative) Builder Issue HTTP PATCH request to given path. path String HTTP path (absolute or relative), including query and fragment. The string can use string interpolation. path (alternative) Builder HTTP path (absolute or relative), including query and fragment. POST String Issue HTTP POST request to given path. This can be a pattern. POST (alternative) Builder Issue HTTP POST request to given path. PUT String Issue HTTP PUT request to given path. This can be a pattern. PUT (alternative) Builder Issue HTTP PUT request to given path. sla Builder List of SLAs the requests are subject to. sync boolean This request is synchronous; execution of the sequence does not continue until the full response is received. If this step is executed from multiple parallel instances of this sequence the progress of all sequences is blocked until there is a request in flight without response. Default is true. timeout String Request timeout - after this time the request will be marked as failed and connection will be closed. Defaults to value set globally in http section. TRACE String Issue HTTP TRACE request to given path. This can be a pattern. TRACE (alternative) Builder Issue HTTP TRACE request to given path. authority Generic builder for generating a string.\nInline definition A pattern for string interpolation. Property Type Description fromVar Object Load the string from session variable. pattern String Use pattern replacing session variables. value String String value used verbatim. body Allows building HTTP request body from session variables.\nProperty Type Description form Builder Build form as if we were sending the request using HTML form. This option automatically adds Content-Type: application/x-www-form-urlencoded to the request headers. fromFile String Send contents of the file. Note that this method does NOT set content-type automatically. fromVar String Use variable content as request body. pattern String Pattern replacing ${sessionvar} with variable contents in a string. text String String sent as-is. body.form Property Type Description \u003clist of mappings\u003e \u003clist of builders\u003e Add input pair described in the mapping. body.form.\u003clist of mappings\u003e Form element (e.g. as if coming from an INPUT field).\nProperty Type Description fromVar String Input field value from session variable. name String Input field name. pattern String Input field value replacing session variables in a pattern, e.g. foo${myvariable}var value String Input field value (verbatim). compensation Property Type Description metric String Metric name for the compensated results. metric (alternative) \u003clist of strings\u003e Configure a custom metric for the compensated results. targetRate double Desired rate of new virtual users per second. This is similar to constantRate.usersPerSec phase settings but works closer to legacy benchmark drivers by fixing the concurrency. targetRate (alternative) Builder Desired rate of new virtual users per second. This is similar to constantRate.usersPerSec phase settings but works closer to legacy benchmark drivers by fixing the concurrency. compensation.metric Configure a custom metric for the compensated results.\nProperty Type Description \u003clist of strings\u003e \u003clist of strings\u003e {::nomarkdown}Allows categorizing request statistics into metrics based on the request path. The expressions are evaluated in the order as provided in the list. Use one of: regexp -\u003e replacement, e.g. ([^?])(?.)? -\u003e $1 to drop the query part. regexp (don’t do any replaces and use the full path), e.g. .*.jpg -\u003e name (metric applied if none of the previous expressions match). {:/} compensation.targetRate Property Type Description base double Base value used for first iteration. increment double Value by which the base value is incremented for each (but the very first) iteration. compression Property Type Description encoding String Encoding used for Accept-Encoding/TE header. The only currently supported is gzip. type enum Type of compression (resource vs. transfer based).\nOptions:{::nomarkdown}CONTENT_ENCODING: {:/}Use Accept-Encoding in request and expect Content-Encoding in response.{::nomarkdown}TRANSFER_ENCODING: {:/}Use TE in request and expect Transfer-Encoding in response.{::nomarkdown}{:/} CONNECT Generic builder for generating a string.\nInline definition A pattern for string interpolation. Property Type Description fromVar Object Load the string from session variable. pattern String Use pattern replacing session variables. value String String value used verbatim. DELETE Generic builder for generating a string.\nInline definition A pattern for string interpolation. Property Type Description fromVar Object Load the string from session variable. pattern String Use pattern replacing session variables. value String String value used verbatim. endpoint Generic builder for generating a string.\nInline definition A pattern for string interpolation. Property Type Description fromVar Object Load the string from session variable. pattern String Use pattern replacing session variables. value String String value used verbatim. GET Generic builder for generating a string.\nInline definition A pattern for string interpolation. Property Type Description fromVar Object Load the string from session variable. pattern String Use pattern replacing session variables. value String String value used verbatim. handler Manages processing of HTTP responses.\nProperty Type Description autoRangeCheck boolean Inject status handler that marks the request as invalid on status 4xx or 5xx. Default value depends on ergonomics.autoRangeCheck (see User Guide). body Processor.Builder Handle HTTP response body. followRedirect enum Automatically fire requests when the server responds with redirection. Default value depends on ergonomics.followRedirect (see User Guide).\nOptions:{::nomarkdown}NEVER: {:/}Do not insert any automatic redirection handling.{::nomarkdown}LOCATION_ONLY: {:/}Redirect only upon status 3xx accompanied with a ’location’ header. Status, headers, body and completions handlers are suppressed in this case (only raw-bytes handlers are still running). This is the default option.{::nomarkdown}HTML_ONLY: {:/}Handle only HTML response with META refresh header. Status, headers and body handlers are invoked both on the original response and on the response from subsequent requests. Completion handlers are suppressed on this request and invoked after the last response arrives (in case of multiple redirections).{::nomarkdown}ALWAYS: {:/}Implement both status 3xx + location and HTML redirects.{::nomarkdown}{:/} header HeaderHandler.Builder Handle HTTP response headers. onCompletion Action.Builder Action executed when the HTTP response is fully received. rawBytes RawBytesHandler.Builder Handler processing HTTP response before parsing. status StatusHandler.Builder Handle HTTP response status. stopOnInvalid boolean Inject completion handler that will stop the session if the request has been marked as invalid. Default value depends on ergonomics.stopOnInvalid (see User Guide). handler.header Handle HTTP response headers.\nProperty Type Description conditional ConditionalHeaderHandler.Builder Passes the headers to nested handler if the condition holds. Note that the condition may be evaluated multiple times and therefore any nested handlers should not change the results of the condition. countHeaders CountHeadersHandler.Builder Stores number of occurences of each header in custom statistics (these can be displayed in CLI using the stats -c command). filter FilterHeaderHandler.Builder Compares if the header name matches expression and invokes a processor with the value. logInvalid LogInvalidHandler.HeaderHandlerBuilder Logs headers from requests marked as invalid. recordHeaderTime RecordHeaderTimeHandler.Builder Records alternative metric based on values from a header (e.g. when a proxy reports processing time). handler.header.conditional Passes the headers to nested handler if the condition holds. Note that the condition may be evaluated multiple times and therefore any nested handlers should not change the results of the condition.\nProperty Type Description allConditions Builder Condition combining multiple other conditions with ‘AND’ logic. boolCondition Builder Condition comparing boolean variables. handler HeaderHandler.Builder One or more header handlers that should be invoked. intCondition Builder Condition comparing integer variables. stringCondition Builder Condition comparing string variables. handler.header.conditional.allConditions Test more conditions and combine the results using AND logic.\nProperty Type Description \u003clist of mappings\u003e \u003clist of builders\u003e List of conditions. handler.header.conditional.allConditions.\u003clist of mappings\u003e Selector for condition type.\nProperty Type Description allConditions Builder Condition combining multiple other conditions with ‘AND’ logic. boolCondition Builder Condition comparing boolean variables. intCondition Builder Condition comparing integer variables. stringCondition Builder Condition comparing string variables. handler.header.conditional.allConditions.\u003clist of mappings\u003e.allConditions Test more conditions and combine the results using AND logic.\nProperty Type Description \u003clist of mappings\u003e \u003clist of builders\u003e List of conditions. handler.header.conditional.allConditions.\u003clist of mappings\u003e.boolCondition Tests session variable containing boolean value.\nProperty Type Description fromVar String Variable name. value boolean Expected value. handler.header.conditional.allConditions.\u003clist of mappings\u003e.intCondition Condition comparing integer in session variable.\nInline definition Parses condition in the form \u003cvariable\u003e \u003coperator\u003e \u003cvalue\u003e where operator is one of: ==, !=, \u003c\u003e (the same as !=), \u003e=, \u003e, \u003c=, \u003c. Property Type Description equalTo Builder Compared variable must be equal to this value. fromVar Object Variable name. greaterOrEqualTo Builder Compared variable must be greater or equal to this value. greaterThan Builder Compared variable must be greater than this value. isSet boolean Check if the value is set or unset. By default the variable must be set. lessOrEqualTo Builder Compared variable must be lower or equal to this value. lessThan Builder Compared variable must be lower than this value. notEqualTo Builder Compared variable must not be equal to this value. handler.header.conditional.allConditions.\u003clist of mappings\u003e.stringCondition Condition comparing string in session variable.\nProperty Type Description caseSensitive boolean True if the case must match, false if the check is case-insensitive. endsWith CharSequence Suffix for the string. equalTo CharSequence Literal value the string should match (the same as {@link #value}). fromVar Object Variable name. isSet boolean Check if the value is set or unset. By default the variable must be set. length int Check the length of the string. length (alternative) Builder Check the length of the string. matchVar String Fetch the value from a variable. negate boolean Invert the logic of this condition. Defaults to false. notEqualTo CharSequence Value that the string must not match. startsWith CharSequence Prefix for the string. value CharSequence Literal value the string should match. handler.header.conditional.boolCondition Tests session variable containing boolean value.\nProperty Type Description fromVar String Variable name. value boolean Expected value. handler.header.conditional.handler One or more header handlers that should be invoked.\nProperty Type Description conditional ConditionalHeaderHandler.Builder Passes the headers to nested handler if the condition holds. Note that the condition may be evaluated multiple times and therefore any nested handlers should not change the results of the condition. countHeaders CountHeadersHandler.Builder Stores number of occurences of each header in custom statistics (these can be displayed in CLI using the stats -c command). filter FilterHeaderHandler.Builder Compares if the header name matches expression and invokes a processor with the value. logInvalid LogInvalidHandler.HeaderHandlerBuilder Logs headers from requests marked as invalid. recordHeaderTime RecordHeaderTimeHandler.Builder Records alternative metric based on values from a header (e.g. when a proxy reports processing time). handler.header.conditional.intCondition Condition comparing integer in session variable.\nInline definition Parses condition in the form \u003cvariable\u003e \u003coperator\u003e \u003cvalue\u003e where operator is one of: ==, !=, \u003c\u003e (the same as !=), \u003e=, \u003e, \u003c=, \u003c. Property Type Description equalTo Builder Compared variable must be equal to this value. fromVar Object Variable name. greaterOrEqualTo Builder Compared variable must be greater or equal to this value. greaterThan Builder Compared variable must be greater than this value. isSet boolean Check if the value is set or unset. By default the variable must be set. lessOrEqualTo Builder Compared variable must be lower or equal to this value. lessThan Builder Compared variable must be lower than this value. notEqualTo Builder Compared variable must not be equal to this value. handler.header.conditional.intCondition.equalTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). handler.header.conditional.intCondition.greaterOrEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). handler.header.conditional.intCondition.greaterThan Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). handler.header.conditional.intCondition.lessOrEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). handler.header.conditional.intCondition.lessThan Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). handler.header.conditional.intCondition.notEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). handler.header.conditional.stringCondition Condition comparing string in session variable.\nProperty Type Description caseSensitive boolean True if the case must match, false if the check is case-insensitive. endsWith CharSequence Suffix for the string. equalTo CharSequence Literal value the string should match (the same as {@link #value}). fromVar Object Variable name. isSet boolean Check if the value is set or unset. By default the variable must be set. length int Check the length of the string. length (alternative) Builder Check the length of the string. matchVar String Fetch the value from a variable. negate boolean Invert the logic of this condition. Defaults to false. notEqualTo CharSequence Value that the string must not match. startsWith CharSequence Prefix for the string. value CharSequence Literal value the string should match. handler.header.conditional.stringCondition.length Property Type Description equalTo Builder Compared variable must be equal to this value. greaterOrEqualTo Builder Compared variable must be greater or equal to this value. greaterThan Builder Compared variable must be greater than this value. lessOrEqualTo Builder Compared variable must be lower or equal to this value. lessThan Builder Compared variable must be lower than this value. notEqualTo Builder Compared variable must not be equal to this value. handler.header.conditional.stringCondition.length.equalTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). handler.header.conditional.stringCondition.length.greaterOrEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). handler.header.conditional.stringCondition.length.greaterThan Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). handler.header.conditional.stringCondition.length.lessOrEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). handler.header.conditional.stringCondition.length.lessThan Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). handler.header.conditional.stringCondition.length.notEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). handler.header.filter Compares if the header name matches expression and invokes a processor with the value.\nProperty Type Description header Builder Condition on the header name. processor Processor.Builder Add one or more processors. handler.header.filter.header Inline definition Literal value the string should match. Property Type Description caseSensitive boolean True if the case must match, false if the check is case-insensitive. endsWith CharSequence Suffix for the string. equalTo CharSequence Literal value the string should match (the same as {@link #value}). length int Check the length of the string. length (alternative) Builder Check the length of the string. matchVar String Fetch the value from a variable. negate boolean Invert the logic of this condition. Defaults to false. notEqualTo CharSequence Value that the string must not match. startsWith CharSequence Prefix for the string. value CharSequence Literal value the string should match. handler.header.filter.header.length Property Type Description equalTo Builder Compared variable must be equal to this value. greaterOrEqualTo Builder Compared variable must be greater or equal to this value. greaterThan Builder Compared variable must be greater than this value. lessOrEqualTo Builder Compared variable must be lower or equal to this value. lessThan Builder Compared variable must be lower than this value. notEqualTo Builder Compared variable must not be equal to this value. handler.header.recordHeaderTime Records alternative metric based on values from a header (e.g. when a proxy reports processing time).\nProperty Type Description header String Header carrying the time. metric String Name of the created metric. unit String Time unit in the header; use either ms or ns. handler.rawBytes Handler processing HTTP response before parsing.\nProperty Type Description transferSizeRecorder TransferSizeRecorder.Builder Accumulates request and response sizes into custom metrics. handler.rawBytes.transferSizeRecorder Accumulates request and response sizes into custom metrics.\nProperty Type Description key String Name of the custom metric for collecting request/response bytes. handler.status Handle HTTP response status.\nProperty Type Description action ActionStatusHandler.Builder Perform certain actions when the status falls into a range. counter StatusToCounterHandler.Builder Counts how many times given status is received. multiplex MultiplexStatusHandler.Builder Multiplexes the status based on range into different status handlers. range RangeStatusValidator.Builder Marks requests that don’t fall into the desired range as invalid. stats StatusToStatsHandler.Builder Records number of occurrences of each status counts into custom statistics (these can be displayed in CLI using stats -c). store StoreStatusHandler.Builder Stores the status into session variable. handler.status.action Perform certain actions when the status falls into a range.\nProperty Type Description \u003cany\u003e Builder Perform a sequence of actions if the range matches. Use range as the key and action in the mapping. Possible values of the status should be separated by commas (,). Ranges can be set using low-high (inclusive) (e.g. 200-299), or replacing lower digits with ‘x’ (e.g. 2xx). handler.status.counter Counts how many times given status is received.\nProperty Type Description add int Number to be added to the session variable. expectStatus int Expected status (others are ignored). All status codes match by default. init int Initial value for the session variable. set int Do not accumulate (add), just set the variable to this value. var String Variable name. handler.status.multiplex Multiplexes the status based on range into different status handlers.\nProperty Type Description \u003cany\u003e Builder Run another handler if the range matches. Use range as the key and another status handler in the mapping. Possible values of the status should be separated by commas (,). Ranges can be set using low-high (inclusive) (e.g. 200-299), or replacing lower digits with ‘x’ (e.g. 2xx). handler.status.multiplex.\u003cany\u003e Run another handler if the range matches. Use range as the key and another status handler in the mapping. Possible values of the status should be separated by commas (,). Ranges can be set using low-high (inclusive) (e.g. 200-299), or replacing lower digits with ‘x’ (e.g. 2xx).\nProperty Type Description action ActionStatusHandler.Builder Perform certain actions when the status falls into a range. counter StatusToCounterHandler.Builder Counts how many times given status is received. multiplex MultiplexStatusHandler.Builder Multiplexes the status based on range into different status handlers. range RangeStatusValidator.Builder Marks requests that don’t fall into the desired range as invalid. stats StatusToStatsHandler.Builder Records number of occurrences of each status counts into custom statistics (these can be displayed in CLI using stats -c). store StoreStatusHandler.Builder Stores the status into session variable. handler.status.range Marks requests that don’t fall into the desired range as invalid.\nInline definition Single status code (204), masked code (2xx) or range (200-399). Property Type Description max int Highest accepted status code. min int Lowest accepted status code. handler.status.store Stores the status into session variable.\nInline definition Variable name. Property Type Description toVar Object Variable name. HEAD Generic builder for generating a string.\nInline definition A pattern for string interpolation. Property Type Description fromVar Object Load the string from session variable. pattern String Use pattern replacing session variables. value String String value used verbatim. headers Property Type Description \u003cany\u003e String Use header name (e.g. Content-Type) as key and value (possibly a pattern). \u003cany\u003e (alternative) Builder Use header name (e.g. Content-Type) as key and specify value in the mapping. headers.\u003cany\u003e Specifies value that should be sent in headers.\nInline definition The value. This can be a pattern. Property Type Description fromVar String Load header value from session variable. pattern String Load header value using a pattern. metric Allows categorizing request statistics into metrics based on the request path.\nProperty Type Description \u003clist of strings\u003e \u003clist of strings\u003e {::nomarkdown}Allows categorizing request statistics into metrics based on the request path. The expressions are evaluated in the order as provided in the list. Use one of: regexp -\u003e replacement, e.g. ([^?])(?.)? -\u003e $1 to drop the query part. regexp (don’t do any replaces and use the full path), e.g. .*.jpg -\u003e name (metric applied if none of the previous expressions match). {:/} OPTIONS Generic builder for generating a string.\nInline definition A pattern for string interpolation. Property Type Description fromVar Object Load the string from session variable. pattern String Use pattern replacing session variables. value String String value used verbatim. PATCH Generic builder for generating a string.\nInline definition A pattern for string interpolation. Property Type Description fromVar Object Load the string from session variable. pattern String Use pattern replacing session variables. value String String value used verbatim. path Generic builder for generating a string.\nInline definition A pattern for string interpolation. Property Type Description fromVar Object Load the string from session variable. pattern String Use pattern replacing session variables. value String String value used verbatim. POST Generic builder for generating a string.\nInline definition A pattern for string interpolation. Property Type Description fromVar Object Load the string from session variable. pattern String Use pattern replacing session variables. value String String value used verbatim. PUT Generic builder for generating a string.\nInline definition A pattern for string interpolation. Property Type Description fromVar Object Load the string from session variable. pattern String Use pattern replacing session variables. value String String value used verbatim. sla Defines a list of Service Level Agreements (SLAs) - conditions that must hold for benchmark to be deemed successful.\nProperty Type Description \u003clist of mappings\u003e \u003clist of builders\u003e One or more SLA configurations. sla.\u003clist of mappings\u003e Defines a Service Level Agreement (SLA) - conditions that must hold for benchmark to be deemed successful.\nProperty Type Description blockedRatio double Maximum allowed ratio of time spent waiting for usable connection to sum of response latencies and blocked time. Default is 0 - client must not be blocked. Set to 1 if the client can block without limits. errorRatio double Maximum allowed ratio of errors: connection failures or resets, timeouts and internal errors. Valid values are 0.0 - 1.0 (inclusive). Note: 4xx and 5xx statuses are NOT considered errors for this SLA parameter. Use invalidRatio for that. invalidRatio double Maximum allowed ratio of requests with responses marked as invalid. Valid values are 0.0 - 1.0 (inclusive). Note: With default settings 4xx and 5xx statuses are considered invalid. Check out ergonomics.autoRangeCheck or httpRequest.handler.autoRangeCheck to change this. limits Builder Percentile limits. meanResponseTime String Maximum allowed mean (average) response time. Use suffix ns, us, ms or s to specify units. window String Period over which the stats should be collected. By default the SLA applies to stats from whole phase. sla.\u003clist of mappings\u003e.limits Percentile limits.\nProperty Type Description \u003cany\u003e String Use percentile (value between 0.0 and 1.0) as key and response time with unit (e.g. ms) in suffix as value. TRACE Generic builder for generating a string.\nInline definition A pattern for string interpolation. Property Type Description fromVar Object Load the string from session variable. pattern String Use pattern replacing session variables. value String String value used verbatim. ","categories":"","description":"Issues a HTTP request and registers handlers for the response.","excerpt":"Issues a HTTP request and registers handlers for the response.","ref":"/hyperfoil-website-demo/docs/reference/steps/step_httprequest/","tags":"","title":"httpRequest"},{"body":" Microservice-oriented distributed benchmark framework. GitHub Learn More Distributed Drive the load from many nodes.\nAccurate All operations are async to avoid the coordinated-omission fallacy.\nVersatile You can express complex scenarios either in YAML or through pluggable steps.\nLow-allocation Internally we try to allocate as little as possible on the critical code paths to not let garbage-collector disturb theoperations.\nNews\nBeginner’s Guide toHyperfoil: part 3 In this article we’ll show how to run Hyperfoil inside an Openshift cluster, benchmarking workload within the same cluster.\nRead more\nBeginner’s Guide toHyperfoil: part 2 In this post we will focus on processing of responses and user workflow through the site.\nRead more\nBeginner’s Guide toHyperfoil: part 1 Meet Hyperfoil, a swiss-army knife of web benchmark driver. You’ll learn how to write a simple benchmark and run it straight from the CLI.\nRead more\nSee all posts ","categories":"","description":"","excerpt":" Microservice-oriented distributed benchmark framework. GitHub Learn …","ref":"/hyperfoil-website-demo/","tags":"","title":"Hyperfoil"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hyperfoil-website-demo/tags/installation/","tags":"","title":"installation"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hyperfoil-website-demo/categories/installation/","tags":"","title":"Installation"},{"body":"Parses JSON responses using simple queries.\nProperty Type Description delete boolean If this is set to true, the selected key will be deleted from the JSON and the modified JSON will be passed to the processor. format enum Conversion to apply on the matching parts with ’toVar’ or ’toArray’ shortcuts.\nOptions:{::nomarkdown}BYTEBUF: {:/}Store the buffer directly. Beware that this may cause memory leaks!{::nomarkdown}BYTES: {:/}Store data as byte array.{::nomarkdown}STRING: {:/}Interprets the bytes as UTF-8 string.{::nomarkdown}{:/} processor Processor.Builder Add one or more processors. processor (alternative) Processor.Builder If neither delete or replace was set this processor will be called with the selected parts. In the other case the processor will be called with chunks of full (modified) JSON. Note that the processor.before() and processor.after() methods are called only once for each request, not for the individual filtered items. query String Query selecting the part of JSON. replace Transformer.Builder Custom transformation executed on the value of the selected item. Note that the output value must contain quotes (if applicable) and be correctly escaped. replace (alternative) String Replace value of selected item with value generated through a pattern. Note that the result must contain quotes and be correctly escaped. toArray String Shortcut to store selected parts in an array in the session. Must follow the pattern variable[maxSize] toVar String Shortcut to store first match in given variable. Further matches are ignored. unquote boolean Automatically unquote and unescape the input values. By default true. replace Custom transformation executed on the value of the selected item. Note that the output value must contain quotes (if applicable) and be correctly escaped.\nProperty Type Description actions ActionsTransformer.Builder This transformer stores the (defragmented) input into a variable, using requested format. After that it executes all the actions and fetches transformed value using the pattern. pattern Pattern.TransformerBuilder Use pattern replacing session variables. replace.actions This transformer stores the (defragmented) input into a variable, using requested format. After that it executes all the actions and fetches transformed value using the pattern.\nProperty Type Description actions Action.Builder Actions to be executed. format enum Format into which should this transformer convert the buffers before storing. Default is STRING.\nOptions:{::nomarkdown}BYTEBUF: {:/}Store the buffer directly. Beware that this may cause memory leaks!{::nomarkdown}BYTES: {:/}Store data as byte array.{::nomarkdown}STRING: {:/}Interprets the bytes as UTF-8 string.{::nomarkdown}{:/} pattern String Pattern to use when fetching the transformed value. var String Variable used as the intermediate storage for the data. replace.pattern Use pattern replacing session variables.\nInline definition The pattern formatting string. Property Type Description pattern String Use pattern replacing session variables. ","categories":"","description":"Parses JSON responses using simple queries.","excerpt":"Parses JSON responses using simple queries.","ref":"/hyperfoil-website-demo/docs/reference/processors/processor_json/","tags":"","title":"json"},{"body":"Parse JSON in variable into another variable.\nProperty Type Description delete boolean If this is set to true, the selected key will be deleted from the JSON and the modified JSON will be passed to the processor. format enum Conversion to apply on the matching parts with ’toVar’ or ’toArray’ shortcuts.\nOptions:{::nomarkdown}BYTEBUF: {:/}Store the buffer directly. Beware that this may cause memory leaks!{::nomarkdown}BYTES: {:/}Store data as byte array.{::nomarkdown}STRING: {:/}Interprets the bytes as UTF-8 string.{::nomarkdown}{:/} fromVar String Variable to load JSON from. processor Processor.Builder Add one or more processors. query String Query selecting the part of JSON. replace Transformer.Builder Custom transformation executed on the value of the selected item. Note that the output value must contain quotes (if applicable) and be correctly escaped. replace (alternative) String Replace value of selected item with value generated through a pattern. Note that the result must contain quotes and be correctly escaped. toArray String Shortcut to store selected parts in an array in the session. Must follow the pattern variable[maxSize] toVar String Shortcut to store first match in given variable. Further matches are ignored. unquote boolean Automatically unquote and unescape the input values. By default true. replace Custom transformation executed on the value of the selected item. Note that the output value must contain quotes (if applicable) and be correctly escaped.\nProperty Type Description actions ActionsTransformer.Builder This transformer stores the (defragmented) input into a variable, using requested format. After that it executes all the actions and fetches transformed value using the pattern. pattern Pattern.TransformerBuilder Use pattern replacing session variables. replace.actions This transformer stores the (defragmented) input into a variable, using requested format. After that it executes all the actions and fetches transformed value using the pattern.\nProperty Type Description actions Action.Builder Actions to be executed. format enum Format into which should this transformer convert the buffers before storing. Default is STRING.\nOptions:{::nomarkdown}BYTEBUF: {:/}Store the buffer directly. Beware that this may cause memory leaks!{::nomarkdown}BYTES: {:/}Store data as byte array.{::nomarkdown}STRING: {:/}Interprets the bytes as UTF-8 string.{::nomarkdown}{:/} pattern String Pattern to use when fetching the transformed value. var String Variable used as the intermediate storage for the data. replace.pattern Use pattern replacing session variables.\nInline definition The pattern formatting string. Property Type Description pattern String Use pattern replacing session variables. ","categories":"","description":"Parse JSON in variable into another variable.","excerpt":"Parse JSON in variable into another variable.","ref":"/hyperfoil-website-demo/docs/reference/steps/step_json/","tags":"","title":"json"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hyperfoil-website-demo/tags/json-schema/","tags":"","title":"json-schema"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hyperfoil-website-demo/tags/kubernetes/","tags":"","title":"kubernetes"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hyperfoil-website-demo/tags/link/","tags":"","title":"link"},{"body":"Log a message and variable values.\nInline definition A pattern for string interpolation. Property Type Description message String Message format pattern. Use string interpolation for variables. ","categories":"","description":"Log a message and variable values.","excerpt":"Log a message and variable values.","ref":"/hyperfoil-website-demo/docs/reference/actions/action_log/","tags":"","title":"log"},{"body":"Log a message and variable values.\nInline definition A pattern for string interpolation. Property Type Description message String Message format pattern. Use string interpolation for variables. ","categories":"","description":"Log a message and variable values.","excerpt":"Log a message and variable values.","ref":"/hyperfoil-website-demo/docs/reference/processors/processor_log/","tags":"","title":"log"},{"body":"Log a message and variable values.\nInline definition A pattern for string interpolation. Property Type Description message String Message format pattern. Use string interpolation for variables. ","categories":"","description":"Log a message and variable values.","excerpt":"Log a message and variable values.","ref":"/hyperfoil-website-demo/docs/reference/steps/step_log/","tags":"","title":"log"},{"body":"Logs body chunks from requests marked as invalid.\n","categories":"","description":"Logs body chunks from requests marked as invalid.","excerpt":"Logs body chunks from requests marked as invalid.","ref":"/hyperfoil-website-demo/docs/reference/processors/processor_loginvalid/","tags":"","title":"logInvalid"},{"body":"Repeats a set of steps fixed number of times.\nThis step is supposed to be inserted as the first step of a sequence and the counterVar should not be set during the first invocation.\nBefore the loop the counterVar is initialized to zero, and in each after the last step in the steps sequence the counter is incremented. If the result is lesser than repeats this sequence is restarted from the beginning (this is also why the step must be the first step in the sequence).\nIt is legal to place steps after the looped steps.\nExample:\nscenario: - mySequence: - loop: counterVar: myCounter repeats: 5 steps: - httpRequest: GET: /foo/${myCounter} # ... - someOtherStep: ... - anotherStepExecutedAfterThoseFiveLoops Property Type Description counterVar String Variable holding number of iterations. repeats int Number of iterations that should be executed. steps Builder List of steps that should be looped. ","categories":"","description":"Repeats a set of steps fixed number of times. ","excerpt":"Repeats a set of steps fixed number of times. ","ref":"/hyperfoil-website-demo/docs/reference/steps/step_loop/","tags":"","title":"loop"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hyperfoil-website-demo/tags/manual/","tags":"","title":"manual"},{"body":"Unconditionally mark currently processed request as invalid.\n","categories":"","description":"Unconditionally mark currently processed request as invalid.","excerpt":"Unconditionally mark currently processed request as invalid.","ref":"/hyperfoil-website-demo/docs/reference/actions/action_markrequestinvalid/","tags":"","title":"markRequestInvalid"},{"body":"Unconditionally mark currently processed request as invalid.\n","categories":"","description":"Unconditionally mark currently processed request as invalid.","excerpt":"Unconditionally mark currently processed request as invalid.","ref":"/hyperfoil-website-demo/docs/reference/processors/processor_markrequestinvalid/","tags":"","title":"markRequestInvalid"},{"body":"Unconditionally mark currently processed request as invalid.\n","categories":"","description":"Unconditionally mark currently processed request as invalid.","excerpt":"Unconditionally mark currently processed request as invalid.","ref":"/hyperfoil-website-demo/docs/reference/steps/step_markrequestinvalid/","tags":"","title":"markRequestInvalid"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hyperfoil-website-demo/tags/migration/","tags":"","title":"migration"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hyperfoil-website-demo/categories/migration/","tags":"","title":"Migration"},{"body":"Instantiates a sequence for each invocation.\nInline definition Sequence name. Property Type Description concurrencyPolicy enum Options:{::nomarkdown}FAILWARN{:/} forceSameIndex boolean Forces that the sequence will have the same index as the currently executing sequence. This can be useful if the sequence is passing some data to the new sequence using sequence-scoped variables. Note that the new sequence must have same concurrency factor as the currently executing sequence. sequence String Name of the instantiated sequence. ","categories":"","description":"Instantiates a sequence for each invocation.","excerpt":"Instantiates a sequence for each invocation.","ref":"/hyperfoil-website-demo/docs/reference/actions/action_newsequence/","tags":"","title":"newSequence"},{"body":"Instantiates a sequence for each invocation.\nInline definition Sequence name. Property Type Description concurrencyPolicy enum Options:{::nomarkdown}FAILWARN{:/} forceSameIndex boolean Forces that the sequence will have the same index as the currently executing sequence. This can be useful if the sequence is passing some data to the new sequence using sequence-scoped variables. Note that the new sequence must have same concurrency factor as the currently executing sequence. sequence String Name of the instantiated sequence. ","categories":"","description":"Instantiates a sequence for each invocation.","excerpt":"Instantiates a sequence for each invocation.","ref":"/hyperfoil-website-demo/docs/reference/processors/processor_newsequence/","tags":"","title":"newSequence"},{"body":"Instantiates a sequence for each invocation.\nInline definition Sequence name. Property Type Description concurrencyPolicy enum Options:{::nomarkdown}FAILWARN{:/} forceSameIndex boolean Forces that the sequence will have the same index as the currently executing sequence. This can be useful if the sequence is passing some data to the new sequence using sequence-scoped variables. Note that the new sequence must have same concurrency factor as the currently executing sequence. sequence String Name of the instantiated sequence. ","categories":"","description":"Instantiates a sequence for each invocation.","excerpt":"Instantiates a sequence for each invocation.","ref":"/hyperfoil-website-demo/docs/reference/steps/step_newsequence/","tags":"","title":"newSequence"},{"body":"Does nothing. Only for demonstration purposes.\n","categories":"","description":"Does nothing. Only for demonstration purposes.","excerpt":"Does nothing. Only for demonstration purposes.","ref":"/hyperfoil-website-demo/docs/reference/steps/step_noop/","tags":"","title":"noop"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hyperfoil-website-demo/tags/openshift/","tags":"","title":"openshift"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hyperfoil-website-demo/tags/overview/","tags":"","title":"overview"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hyperfoil-website-demo/categories/overview/","tags":"","title":"Overview"},{"body":"Parses HTML tags and invokes handlers based on criteria.\nProperty Type Description onEmbeddedResource Builder Handler firing upon reference to other resource, e.g. image, stylesheet… onTagAttribute Builder \u003cno description\u003e onEmbeddedResource Handles \u003cimg src=\"…\"\u003e, \u003clink href=\"…\"\u003e, \u003cembed src=\"…\"\u003e, \u003cframe src=\"…\"\u003e, \u003ciframe src=\"…\"\u003e, \u003cobject data=\"…\"\u003e and \u003cscript src=\"…\"\u003e.\nDoes not handle \u003csource src=\"…\"\u003e or \u003ctrack src=\"…\"\u003e because browser would choose only one of the options.\nProperty Type Description fetchResource Builder Automatically download referenced resource. ignoreExternal boolean Ignore resources hosted on servers that are not covered in the http section. processor Processor.Builder Add one or more processors. processor (alternative) Processor.Builder Custom processor invoked pointing to attribute data - e.g. in case of \u003cimg\u003e tag the processor gets contents of the src attribute. onEmbeddedResource.fetchResource Automates download of embedded resources.\nProperty Type Description concurrency int Maximum number of resources fetched concurrently. Default is 8. maxResources int Maximum number of resources that can be fetched. metric \u003clist of strings\u003e Metrics selector for downloaded resources. onCompletion Action.Builder Action performed when the download of all resources completes. onEmbeddedResource.fetchResource.metric Metrics selector for downloaded resources.\nProperty Type Description \u003clist of strings\u003e \u003clist of strings\u003e {::nomarkdown}Allows categorizing request statistics into metrics based on the request path. The expressions are evaluated in the order as provided in the list. Use one of: regexp -\u003e replacement, e.g. ([^?])(?.)? -\u003e $1 to drop the query part. regexp (don’t do any replaces and use the full path), e.g. .*.jpg -\u003e name (metric applied if none of the previous expressions match). {:/} onTagAttribute Property Type Description attribute String Name of the attribute in this element you want to process, e.g. action format enum Conversion to apply on the matching parts with ’toVar’ or ’toArray’ shortcuts.\nOptions:{::nomarkdown}BYTEBUF: {:/}Store the buffer directly. Beware that this may cause memory leaks!{::nomarkdown}BYTES: {:/}Store data as byte array.{::nomarkdown}STRING: {:/}Interprets the bytes as UTF-8 string.{::nomarkdown}{:/} processor Processor.Builder Add one or more processors. tag String Name of the tag this handler should look for, e.g. form toArray String Shortcut to store selected parts in an array in the session. Must follow the pattern variable[maxSize] toVar String Shortcut to store first match in given variable. Further matches are ignored. ","categories":"","description":"Parses HTML tags and invokes handlers based on criteria.","excerpt":"Parses HTML tags and invokes handlers based on criteria.","ref":"/hyperfoil-website-demo/docs/reference/processors/processor_parsehtml/","tags":"","title":"parseHtml"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hyperfoil-website-demo/tags/phases/","tags":"","title":"phases"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hyperfoil-website-demo/tags/processors/","tags":"","title":"processors"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hyperfoil-website-demo/categories/processors/","tags":"","title":"Processors"},{"body":"Makes the data available to all sessions in the same agent, including those using different executors.\nInline definition Both name of source variable and the key used to read the data. Property Type Description fromVar String Source session variable name. name String Arbitrary unique identifier for the data. ","categories":"","description":"Makes the data available to all sessions in the same agent, including those using different executors.","excerpt":"Makes the data available to all sessions in the same agent, including …","ref":"/hyperfoil-website-demo/docs/reference/actions/action_publishagentdata/","tags":"","title":"publishAgentData"},{"body":"Makes the data available to all sessions in the same agent, including those using different executors.\nInline definition Both name of source variable and the key used to read the data. Property Type Description fromVar String Source session variable name. name String Arbitrary unique identifier for the data. ","categories":"","description":"Makes the data available to all sessions in the same agent, including those using different executors.","excerpt":"Makes the data available to all sessions in the same agent, including …","ref":"/hyperfoil-website-demo/docs/reference/processors/processor_publishagentdata/","tags":"","title":"publishAgentData"},{"body":"Makes the data available to all sessions in the same agent, including those using different executors.\nInline definition Both name of source variable and the key used to read the data. Property Type Description fromVar String Source session variable name. name String Arbitrary unique identifier for the data. ","categories":"","description":"Makes the data available to all sessions in the same agent, including those using different executors.","excerpt":"Makes the data available to all sessions in the same agent, including …","ref":"/hyperfoil-website-demo/docs/reference/steps/step_publishagentdata/","tags":"","title":"publishAgentData"},{"body":"Gathers values from session variables and publishes them globally (to all agents). You can name the counters individually (example 1) or use the variable names (example 2): # Example 1: - publishGlobalCounters: key: myKey vars: [ foo, bar ] # Example 2: - publishGlobalCounters: key: someOtherKey vars: - foo: myFoo - bar: bbb \u003c/code\u003e``` | Property | Type | Description | | ------- | ------- | -------- | | key | String | Identifier of the global record. | | vars | [Builder](#vars) | List of names and session variables. | ### \u003ca id=\"vars\"\u003e\u003c/a\u003evars | Property | Type | Description | | ------- | ------- | ------- | | \u0026lt;any\u0026gt; | \u0026lt;unknown\u0026gt; | \u003cfont color=\"#606060\"\u003e\u0026lt;no description\u0026gt;\u003c/font\u003e | | \u0026lt;list of strings\u0026gt; | \u0026lt;unknown\u0026gt; | \u003cfont color=\"#606060\"\u003e\u0026lt;no description\u0026gt;\u003c/font\u003e | ","categories":"","description":"Gathers values from session variables and publishes them globally (to all agents). ","excerpt":"Gathers values from session variables and publishes them globally (to …","ref":"/hyperfoil-website-demo/docs/reference/actions/action_publishglobalcounters/","tags":"","title":"publishGlobalCounters"},{"body":"Gathers values from session variables and publishes them globally (to all agents). You can name the counters individually (example 1) or use the variable names (example 2): # Example 1: - publishGlobalCounters: key: myKey vars: [ foo, bar ] # Example 2: - publishGlobalCounters: key: someOtherKey vars: - foo: myFoo - bar: bbb \u003c/code\u003e``` | Property | Type | Description | | ------- | ------- | -------- | | key | String | Identifier of the global record. | | vars | [Builder](#vars) | List of names and session variables. | ### \u003ca id=\"vars\"\u003e\u003c/a\u003evars | Property | Type | Description | | ------- | ------- | ------- | | \u0026lt;any\u0026gt; | \u0026lt;unknown\u0026gt; | \u003cfont color=\"#606060\"\u003e\u0026lt;no description\u0026gt;\u003c/font\u003e | | \u0026lt;list of strings\u0026gt; | \u0026lt;unknown\u0026gt; | \u003cfont color=\"#606060\"\u003e\u0026lt;no description\u0026gt;\u003c/font\u003e | ","categories":"","description":"Gathers values from session variables and publishes them globally (to all agents). ","excerpt":"Gathers values from session variables and publishes them globally (to …","ref":"/hyperfoil-website-demo/docs/reference/processors/processor_publishglobalcounters/","tags":"","title":"publishGlobalCounters"},{"body":"Gathers values from session variables and publishes them globally (to all agents). You can name the counters individually (example 1) or use the variable names (example 2): # Example 1: - publishGlobalCounters: key: myKey vars: [ foo, bar ] # Example 2: - publishGlobalCounters: key: someOtherKey vars: - foo: myFoo - bar: bbb \u003c/code\u003e``` | Property | Type | Description | | ------- | ------- | -------- | | key | String | Identifier of the global record. | | vars | [Builder](#vars) | List of names and session variables. | ### \u003ca id=\"vars\"\u003e\u003c/a\u003evars | Property | Type | Description | | ------- | ------- | ------- | | \u0026lt;any\u0026gt; | \u0026lt;unknown\u0026gt; | \u003cfont color=\"#606060\"\u003e\u0026lt;no description\u0026gt;\u003c/font\u003e | | \u0026lt;list of strings\u0026gt; | \u0026lt;unknown\u0026gt; | \u003cfont color=\"#606060\"\u003e\u0026lt;no description\u0026gt;\u003c/font\u003e | ","categories":"","description":"Gathers values from session variables and publishes them globally (to all agents). ","excerpt":"Gathers values from session variables and publishes them globally (to …","ref":"/hyperfoil-website-demo/docs/reference/steps/step_publishglobalcounters/","tags":"","title":"publishGlobalCounters"},{"body":"Move values from a map shared across all sessions using the same executor into session variables.\nThe executor can host multiple shared maps, each holding an entry with several variables. This step moves variables from either a random entry (if no match is set) or with an entry that has the same value for given variable as the current session. When data is moved to the current session the entry is dropped from the shared map. If the map contains records for which the {@link #vars()} don’t contain a destination variable the contents is lost.\nProperty Type Description key String Key identifying the shared map. match String Name of the session variable that stores value identifying the entry in the shared map. vars \u003clist of strings\u003e List of variables the map should be pulled into. vars List of variables the map should be pulled into.\nProperty Type Description \u003clist of strings\u003e \u003cunknown\u003e \u003cno description\u003e ","categories":"","description":"Move values from a map shared across all sessions using the same executor into session variables. ","excerpt":"Move values from a map shared across all sessions using the same …","ref":"/hyperfoil-website-demo/docs/reference/steps/step_pullsharedmap/","tags":"","title":"pullSharedMap"},{"body":"Store values from session variables into a map shared across all sessions using the same executor into session variables.\nThe executor can host multiple shared maps, each holding an entry with several variables. This step creates one entry in the map, copying values from session variables into the entry.\nProperty Type Description key String Key identifying the shared map. vars \u003clist of strings\u003e List of variable names that should be stored in the entry. vars List of variable names that should be stored in the entry.\nProperty Type Description \u003clist of strings\u003e \u003cunknown\u003e \u003cno description\u003e ","categories":"","description":"Store values from session variables into a map shared across all sessions using the same executor into session variables. ","excerpt":"Store values from session variables into a map shared across all …","ref":"/hyperfoil-website-demo/docs/reference/steps/step_pushsharedmap/","tags":"","title":"pushSharedMap"},{"body":"Stores defragmented data in a queue. For each item in the queue a new sequence instance will be started (subject the concurrency constraints) with sequence index that allows it to read an object from an array using sequence-scoped access.\nProperty Type Description concurrency int Maximum number of started sequences that can be running at one moment. format enum Conversion format from byte buffers. Default format is STRING.\nOptions:{::nomarkdown}BYTEBUF: {:/}Store the buffer directly. Beware that this may cause memory leaks!{::nomarkdown}BYTES: {:/}Store data as byte array.{::nomarkdown}STRING: {:/}Interprets the bytes as UTF-8 string.{::nomarkdown}{:/} maxSize int Maximum number of elements that can be stored in the queue. onCompletion Action.Builder Custom action that should be performed when the last consuming sequence reports that it has processed the last element from the queue. Note that the sequence is NOT automatically augmented to report completion. sequence String Name of the started sequence. var String Variable storing the array that it used as a output object from the queue. ","categories":"","description":"Stores defragmented data in a queue. ","excerpt":"Stores defragmented data in a queue. ","ref":"/hyperfoil-website-demo/docs/reference/processors/processor_queue/","tags":"","title":"queue"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hyperfoil-website-demo/tags/quickstart/","tags":"","title":"quickstart"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hyperfoil-website-demo/categories/quickstart/","tags":"","title":"Quickstart"},{"body":"Stores random row from a CSV-formatted file to variables.\nProperty Type Description columns Builder Defines mapping from columns to session variables. file String Path to the CSV file that should be loaded. separator char Set character used for column separation. By default it is comma (,). skipComments boolean Skip lines starting with character ‘#’. By default set to false. columns Property Type Description \u003cany\u003e String Use 0-based column as the key and variable name as the value. ","categories":"","description":"Stores random row from a CSV-formatted file to variables.","excerpt":"Stores random row from a CSV-formatted file to variables.","ref":"/hyperfoil-website-demo/docs/reference/steps/step_randomcsvrow/","tags":"","title":"randomCsvRow"},{"body":"Reads bytes from a randomly chosen file into a variable. Two formats are supported: Example 1 - without weights:\ntoVar: myVar files: - /path/to/file1.txt - file2_relative_to_benchmark.txt Example 2 - with weights (the second file will be returned twice as often):\ntoVar: myVar files: /path/to/file1.txt: 1 file2_relative_to_benchmark.txt: 2 Property Type Description filenameVar String Optional variable to store the filename of the random file. files Builder Potentially weighted list of files to choose from. toVar String Variable where the chosen byte array should be stored. files Property Type Description \u003cany\u003e \u003clist of strings\u003e Item as the key and weight (arbitrary floating-point number, defaults to 1.0) as the value. \u003clist of strings\u003e \u003clist of strings\u003e Item as the key and weight (arbitrary floating-point number, defaults to 1.0) as the value. ","categories":"","description":"Reads bytes from a randomly chosen file into a variable. ","excerpt":"Reads bytes from a randomly chosen file into a variable. ","ref":"/hyperfoil-website-demo/docs/reference/steps/step_randomfile/","tags":"","title":"randomFile"},{"body":"Stores random (linearly distributed) integer into session variable.\nProperty Type Description max Builder Highest possible value (inclusive). Default is Integer.MAX_VALUE. min Builder Lowest possible value (inclusive). Default is 0. toVar String Variable name to store the result. max Inline definition Constant value. Property Type Description fromVar String Initialize with a value from session variable. value int Initialize with a constant value. min Inline definition Constant value. Property Type Description fromVar String Initialize with a value from session variable. value int Initialize with a constant value. ","categories":"","description":"Stores random (linearly distributed) integer into session variable.","excerpt":"Stores random (linearly distributed) integer into session variable.","ref":"/hyperfoil-website-demo/docs/reference/steps/step_randomint/","tags":"","title":"randomInt"},{"body":"Stores random item from a list or array into session variable.\nProperty Type Description file String This file will be loaded into memory and the step will choose on line as the item. fromVar String Variable containing an array or list. list Builder Potentially weighted list of items to choose from. toVar String Variable where the chosen item should be stored. list Property Type Description \u003cany\u003e \u003clist of strings\u003e Item as the key and weight (arbitrary floating-point number, defaults to 1.0) as the value. \u003clist of strings\u003e \u003clist of strings\u003e Item as the key and weight (arbitrary floating-point number, defaults to 1.0) as the value. ","categories":"","description":"Stores random item from a list or array into session variable.","excerpt":"Stores random item from a list or array into session variable.","ref":"/hyperfoil-website-demo/docs/reference/steps/step_randomitem/","tags":"","title":"randomItem"},{"body":"Stores random string into session variable based on the UUID generator.\nProperty Type Description toVar String Variable name to store the result. ","categories":"","description":"Stores random string into session variable based on the UUID generator.","excerpt":"Stores random string into session variable based on the UUID …","ref":"/hyperfoil-website-demo/docs/reference/steps/step_randomuuid/","tags":"","title":"randomUUID"},{"body":"Reads data from agent-wide scope into session variable.\nThe data must be published in a phase that has terminated before this phase starts: usually this is achieved using the startAfterStrict property on the phase.\nInline definition Both the identifier and destination session variable. Property Type Description name String Unique identifier for the data. toVar String Destination session variable name. ","categories":"","description":"Reads data from agent-wide scope into session variable.","excerpt":"Reads data from agent-wide scope into session variable.","ref":"/hyperfoil-website-demo/docs/reference/actions/action_readagentdata/","tags":"","title":"readAgentData"},{"body":"Reads data from agent-wide scope into session variable.\nThe data must be published in a phase that has terminated before this phase starts: usually this is achieved using the startAfterStrict property on the phase.\nInline definition Both the identifier and destination session variable. Property Type Description name String Unique identifier for the data. toVar String Destination session variable name. ","categories":"","description":"Reads data from agent-wide scope into session variable.","excerpt":"Reads data from agent-wide scope into session variable.","ref":"/hyperfoil-website-demo/docs/reference/processors/processor_readagentdata/","tags":"","title":"readAgentData"},{"body":"Reads data from agent-wide scope into session variable.\nThe data must be published in a phase that has terminated before this phase starts: usually this is achieved using the startAfterStrict property on the phase.\nInline definition Both the identifier and destination session variable. Property Type Description name String Unique identifier for the data. toVar String Destination session variable name. ","categories":"","description":"Reads data from agent-wide scope into session variable.","excerpt":"Reads data from agent-wide scope into session variable.","ref":"/hyperfoil-website-demo/docs/reference/steps/step_readagentdata/","tags":"","title":"readAgentData"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hyperfoil-website-demo/tags/reference/","tags":"","title":"reference"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hyperfoil-website-demo/categories/reference/","tags":"","title":"Reference"},{"body":"Removes element from an array of variables.\nProperty Type Description fromVar String Variable containing an existing array of object variables. index Builder Set index at which the item should be removed. Elements to the right of this are moved to the left. index Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). ","categories":"","description":"Removes element from an array of variables.","excerpt":"Removes element from an array of variables.","ref":"/hyperfoil-website-demo/docs/reference/actions/action_removeitem/","tags":"","title":"removeItem"},{"body":"Removes element from an array of variables.\nProperty Type Description fromVar String Variable containing an existing array of object variables. index Builder Set index at which the item should be removed. Elements to the right of this are moved to the left. index Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). ","categories":"","description":"Removes element from an array of variables.","excerpt":"Removes element from an array of variables.","ref":"/hyperfoil-website-demo/docs/reference/processors/processor_removeitem/","tags":"","title":"removeItem"},{"body":"Removes element from an array of variables.\nProperty Type Description fromVar String Variable containing an existing array of object variables. index Builder Set index at which the item should be removed. Elements to the right of this are moved to the left. index Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). ","categories":"","description":"Removes element from an array of variables.","excerpt":"Removes element from an array of variables.","ref":"/hyperfoil-website-demo/docs/reference/steps/step_removeitem/","tags":"","title":"removeItem"},{"body":"Schedules a restart of this sequence.\n","categories":"","description":"Schedules a restart of this sequence.","excerpt":"Schedules a restart of this sequence.","ref":"/hyperfoil-website-demo/docs/reference/actions/action_restartsequence/","tags":"","title":"restartSequence"},{"body":"Schedules a restart of this sequence.\n","categories":"","description":"Schedules a restart of this sequence.","excerpt":"Schedules a restart of this sequence.","ref":"/hyperfoil-website-demo/docs/reference/processors/processor_restartsequence/","tags":"","title":"restartSequence"},{"body":"Restarts current sequence from beginning.\n","categories":"","description":"Restarts current sequence from beginning.","excerpt":"Restarts current sequence from beginning.","ref":"/hyperfoil-website-demo/docs/reference/steps/step_restartsequence/","tags":"","title":"restartSequence"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hyperfoil-website-demo/tags/scenario/","tags":"","title":"scenario"},{"body":"Define a point in future until which we should wait. Does not cause waiting.\nProperty Type Description duration String Duration of the delay with appropriate suffix (e.g. ms or s). fromLast \u003cnone\u003e Set previous delay point reference as the reference for next delay point; it will be computed as (previous delay point or now) + duration.\nNote: property does not have any value fromNow \u003cnone\u003e Set this step invocation as the delay point reference; it will be computed as now + duration.\nNote: property does not have any value key String Key that is referenced later in awaitDelay step. If you’re introducing the delay through thinkTime do not use this property. max String Upper cap on the duration (if randomized). min String Lower cap on the duration (if randomized). random enum Randomize the duration.\nOptions:{::nomarkdown}CONSTANT: {:/}Do not randomize; use constant duration.{::nomarkdown}LINEAR: {:/}Use linearly random duration between min and max (inclusively).{::nomarkdown}NEGATIVE_EXPONENTIAL: {:/}Use negative-exponential duration with expected value of duration, capped at min and max (inclusively).{::nomarkdown}{:/} type enum Alternative way to set delay reference point. See fromNow and fromLast property setters.\nOptions:{::nomarkdown}FROM_LASTFROM_NOW{:/} ","categories":"","description":"Define a point in future until which we should wait. Does not cause waiting.","excerpt":"Define a point in future until which we should wait. Does not cause …","ref":"/hyperfoil-website-demo/docs/reference/steps/step_scheduledelay/","tags":"","title":"scheduleDelay"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hyperfoil-website-demo/search/","tags":"","title":"Search Results"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hyperfoil-website-demo/tags/server/","tags":"","title":"server"},{"body":"Set variable in session to certain value.\nInline definition Use var \u003c- value. Property Type Description intArray Builder Set variable to an (unset) integer array. objectArray Builder Set variable to an (unset) object array. value String String value. var String Variable name. intArray Creates integer arrays to be stored in the session.\nProperty Type Description fromVar String Contents of the new array. If the variable contains an array or a list, items will be copied to the elements with the same index up to the size of this array. If the variable contains a different value all elements will be initialized to this value. size int Size of the array. objectArray Creates object arrays to be stored in the session.\nProperty Type Description fromVar String Contents of the new array. If the variable contains an array or a list, items will be copied to the elements with the same index up to the size of this array. If the variable contains a different value all elements will be initialized to this value. size int Size of the array. ","categories":"","description":"Set variable in session to certain value.","excerpt":"Set variable in session to certain value.","ref":"/hyperfoil-website-demo/docs/reference/actions/action_set/","tags":"","title":"set"},{"body":"Set variable in session to certain value.\nInline definition Use var \u003c- value. Property Type Description intArray Builder Set variable to an (unset) integer array. objectArray Builder Set variable to an (unset) object array. value String String value. var String Variable name. intArray Creates integer arrays to be stored in the session.\nProperty Type Description fromVar String Contents of the new array. If the variable contains an array or a list, items will be copied to the elements with the same index up to the size of this array. If the variable contains a different value all elements will be initialized to this value. size int Size of the array. objectArray Creates object arrays to be stored in the session.\nProperty Type Description fromVar String Contents of the new array. If the variable contains an array or a list, items will be copied to the elements with the same index up to the size of this array. If the variable contains a different value all elements will be initialized to this value. size int Size of the array. ","categories":"","description":"Set variable in session to certain value.","excerpt":"Set variable in session to certain value.","ref":"/hyperfoil-website-demo/docs/reference/processors/processor_set/","tags":"","title":"set"},{"body":"Set variable in session to certain value.\nInline definition Use var \u003c- value. Property Type Description intArray Builder Set variable to an (unset) integer array. objectArray Builder Set variable to an (unset) object array. value String String value. var String Variable name. intArray Creates integer arrays to be stored in the session.\nProperty Type Description fromVar String Contents of the new array. If the variable contains an array or a list, items will be copied to the elements with the same index up to the size of this array. If the variable contains a different value all elements will be initialized to this value. size int Size of the array. objectArray Creates object arrays to be stored in the session.\nProperty Type Description fromVar String Contents of the new array. If the variable contains an array or a list, items will be copied to the elements with the same index up to the size of this array. If the variable contains a different value all elements will be initialized to this value. size int Size of the array. ","categories":"","description":"Set variable in session to certain value.","excerpt":"Set variable in session to certain value.","ref":"/hyperfoil-website-demo/docs/reference/steps/step_set/","tags":"","title":"set"},{"body":"Set session variable to an integral value.\nInline definition Use var \u003c- value. Property Type Description fromVar String Input variable name. intCondition Builder Set variable only if the current value satisfies certain condition. max Builder Set to value that is the maximum of this list of values. min Builder Set to value that is the minimum of this list of values. onlyIfNotSet boolean Set variable to the value only if it is not already set. value int Value (integer). var String Variable name. intCondition Property Type Description equalTo Builder Compared variable must be equal to this value. greaterOrEqualTo Builder Compared variable must be greater or equal to this value. greaterThan Builder Compared variable must be greater than this value. lessOrEqualTo Builder Compared variable must be lower or equal to this value. lessThan Builder Compared variable must be lower than this value. notEqualTo Builder Compared variable must not be equal to this value. intCondition.equalTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intCondition.greaterOrEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intCondition.greaterThan Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intCondition.lessOrEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intCondition.lessThan Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intCondition.notEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). max Property Type Description \u003clist of mappings\u003e \u003clist of builders\u003e \u003cno description\u003e max.\u003clist of mappings\u003e Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). min Property Type Description \u003clist of mappings\u003e \u003clist of builders\u003e \u003cno description\u003e ","categories":"","description":"Set session variable to an integral value.","excerpt":"Set session variable to an integral value.","ref":"/hyperfoil-website-demo/docs/reference/actions/action_setint/","tags":"","title":"setInt"},{"body":"Set session variable to an integral value.\nInline definition Use var \u003c- value. Property Type Description fromVar String Input variable name. intCondition Builder Set variable only if the current value satisfies certain condition. max Builder Set to value that is the maximum of this list of values. min Builder Set to value that is the minimum of this list of values. onlyIfNotSet boolean Set variable to the value only if it is not already set. value int Value (integer). var String Variable name. intCondition Property Type Description equalTo Builder Compared variable must be equal to this value. greaterOrEqualTo Builder Compared variable must be greater or equal to this value. greaterThan Builder Compared variable must be greater than this value. lessOrEqualTo Builder Compared variable must be lower or equal to this value. lessThan Builder Compared variable must be lower than this value. notEqualTo Builder Compared variable must not be equal to this value. intCondition.equalTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intCondition.greaterOrEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intCondition.greaterThan Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intCondition.lessOrEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intCondition.lessThan Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intCondition.notEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). max Property Type Description \u003clist of mappings\u003e \u003clist of builders\u003e \u003cno description\u003e max.\u003clist of mappings\u003e Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). min Property Type Description \u003clist of mappings\u003e \u003clist of builders\u003e \u003cno description\u003e ","categories":"","description":"Set session variable to an integral value.","excerpt":"Set session variable to an integral value.","ref":"/hyperfoil-website-demo/docs/reference/processors/processor_setint/","tags":"","title":"setInt"},{"body":"Set session variable to an integral value.\nInline definition Use var \u003c- value. Property Type Description fromVar String Input variable name. intCondition Builder Set variable only if the current value satisfies certain condition. max Builder Set to value that is the maximum of this list of values. min Builder Set to value that is the minimum of this list of values. onlyIfNotSet boolean Set variable to the value only if it is not already set. value int Value (integer). var String Variable name. intCondition Property Type Description equalTo Builder Compared variable must be equal to this value. greaterOrEqualTo Builder Compared variable must be greater or equal to this value. greaterThan Builder Compared variable must be greater than this value. lessOrEqualTo Builder Compared variable must be lower or equal to this value. lessThan Builder Compared variable must be lower than this value. notEqualTo Builder Compared variable must not be equal to this value. intCondition.equalTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intCondition.greaterOrEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intCondition.greaterThan Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intCondition.lessOrEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intCondition.lessThan Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). intCondition.notEqualTo Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). max Property Type Description \u003clist of mappings\u003e \u003clist of builders\u003e \u003cno description\u003e max.\u003clist of mappings\u003e Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). min Property Type Description \u003clist of mappings\u003e \u003clist of builders\u003e \u003cno description\u003e ","categories":"","description":"Set session variable to an integral value.","excerpt":"Set session variable to an integral value.","ref":"/hyperfoil-website-demo/docs/reference/steps/step_setint/","tags":"","title":"setInt"},{"body":"Set element in a collection on given position.\nProperty Type Description fromVar String Fetch value from session variable. index Builder Integer session variable with an index into the collection. toVar String Session variable with the collection. value String Verbatim value. index Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). ","categories":"","description":"Set element in a collection on given position.","excerpt":"Set element in a collection on given position.","ref":"/hyperfoil-website-demo/docs/reference/actions/action_setitem/","tags":"","title":"setItem"},{"body":"Set element in a collection on given position.\nProperty Type Description fromVar String Fetch value from session variable. index Builder Integer session variable with an index into the collection. toVar String Session variable with the collection. value String Verbatim value. index Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). ","categories":"","description":"Set element in a collection on given position.","excerpt":"Set element in a collection on given position.","ref":"/hyperfoil-website-demo/docs/reference/processors/processor_setitem/","tags":"","title":"setItem"},{"body":"Set element in a collection on given position.\nProperty Type Description fromVar String Fetch value from session variable. index Builder Integer session variable with an index into the collection. toVar String Session variable with the collection. value String Verbatim value. index Inline definition Uses the argument as a constant value. Property Type Description fromVar String Input variable name. value int Value (integer). ","categories":"","description":"Set element in a collection on given position.","excerpt":"Set element in a collection on given position.","ref":"/hyperfoil-website-demo/docs/reference/steps/step_setitem/","tags":"","title":"setItem"},{"body":"Sets value in a counter shared by all sessions in the same executor.\nInline definition Both the name of the counter and variable name. Property Type Description fromVar String Input variable name. key String Identifier for the counter. value int Value (integer). ","categories":"","description":"Sets value in a counter shared by all sessions in the same executor.","excerpt":"Sets value in a counter shared by all sessions in the same executor.","ref":"/hyperfoil-website-demo/docs/reference/actions/action_setsharedcounter/","tags":"","title":"setSharedCounter"},{"body":"Sets value in a counter shared by all sessions in the same executor.\nInline definition Both the name of the counter and variable name. Property Type Description fromVar String Input variable name. key String Identifier for the counter. value int Value (integer). ","categories":"","description":"Sets value in a counter shared by all sessions in the same executor.","excerpt":"Sets value in a counter shared by all sessions in the same executor.","ref":"/hyperfoil-website-demo/docs/reference/processors/processor_setsharedcounter/","tags":"","title":"setSharedCounter"},{"body":"Sets value in a counter shared by all sessions in the same executor.\nInline definition Both the name of the counter and variable name. Property Type Description fromVar String Input variable name. key String Identifier for the counter. value int Value (integer). ","categories":"","description":"Sets value in a counter shared by all sessions in the same executor.","excerpt":"Sets value in a counter shared by all sessions in the same executor.","ref":"/hyperfoil-website-demo/docs/reference/steps/step_setsharedcounter/","tags":"","title":"setSharedCounter"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hyperfoil-website-demo/tags/standalone/","tags":"","title":"standalone"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hyperfoil-website-demo/tags/statistics/","tags":"","title":"statistics"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hyperfoil-website-demo/tags/steps/","tags":"","title":"steps"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hyperfoil-website-demo/categories/steps/","tags":"","title":"Steps"},{"body":"Immediately stop the user session (break all running sequences).\n","categories":"","description":"Immediately stop the user session (break all running sequences).","excerpt":"Immediately stop the user session (break all running sequences).","ref":"/hyperfoil-website-demo/docs/reference/steps/step_stop/","tags":"","title":"stop"},{"body":"Run nested sequence of steps, recording execution time.\n","categories":"","description":"Run nested sequence of steps, recording execution time.","excerpt":"Run nested sequence of steps, recording execution time.","ref":"/hyperfoil-website-demo/docs/reference/steps/step_stopwatch/","tags":"","title":"stopwatch"},{"body":"Stores data in a session variable (overwriting on multiple occurences).\nInline definition Variable name. Property Type Description format enum Format into which should this processor convert the buffers before storing. Default is STRING.\nOptions:{::nomarkdown}BYTEBUF: {:/}Store the buffer directly. Beware that this may cause memory leaks!{::nomarkdown}BYTES: {:/}Store data as byte array.{::nomarkdown}STRING: {:/}Interprets the bytes as UTF-8 string.{::nomarkdown}{:/} toVar Object Variable name. ","categories":"","description":"Stores data in a session variable (overwriting on multiple occurences).","excerpt":"Stores data in a session variable (overwriting on multiple …","ref":"/hyperfoil-website-demo/docs/reference/processors/processor_store/","tags":"","title":"store"},{"body":"Converts buffers into integral value and stores it in a variable.\nInline definition Name of integer variable where to store the value. Property Type Description override boolean Allow the value to be set multiple times (last write wins). Defaults to false. toVar String Name of variable where to store the integral value. ","categories":"","description":"Converts buffers into integral value and stores it in a variable.","excerpt":"Converts buffers into integral value and stores it in a variable.","ref":"/hyperfoil-website-demo/docs/reference/processors/processor_storeint/","tags":"","title":"storeInt"},{"body":"Parse string into integer and store it in a variable.\nIf the parsing fails the target variable is not modified.\nInline definition Use fromVar -\u0026gt; toVar Property Type Description fromVar String Source variable name. toVar String Target variable name. ","categories":"","description":"Parse string into integer and store it in a variable. ","excerpt":"Parse string into integer and store it in a variable. ","ref":"/hyperfoil-website-demo/docs/reference/actions/action_stringtoint/","tags":"","title":"stringToInt"},{"body":"Parse string into integer and store it in a variable.\nIf the parsing fails the target variable is not modified.\nInline definition Use fromVar -\u0026gt; toVar Property Type Description fromVar String Source variable name. toVar String Target variable name. ","categories":"","description":"Parse string into integer and store it in a variable. ","excerpt":"Parse string into integer and store it in a variable. ","ref":"/hyperfoil-website-demo/docs/reference/processors/processor_stringtoint/","tags":"","title":"stringToInt"},{"body":"Parse string into integer and store it in a variable.\nIf the parsing fails the target variable is not modified.\nInline definition Use fromVar -\u0026gt; toVar Property Type Description fromVar String Source variable name. toVar String Target variable name. ","categories":"","description":"Parse string into integer and store it in a variable. ","excerpt":"Parse string into integer and store it in a variable. ","ref":"/hyperfoil-website-demo/docs/reference/steps/step_stringtoint/","tags":"","title":"stringToInt"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hyperfoil-website-demo/tags/","tags":"","title":"Tags"},{"body":"Format pattern into session variable.\nProperty Type Description pattern String Pattern to be encoded, e.g. foo${variable}bar${another-variable} toVar String Variable name to store the result. ","categories":"","description":"Format \u003ca href=\"https://hyperfoil.io/userguide/benchmark/variables.html#string-interpolation\"\u003epattern\u003c/a\u003e into session variable.","excerpt":"Format \u003ca …","ref":"/hyperfoil-website-demo/docs/reference/steps/step_template/","tags":"","title":"template"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hyperfoil-website-demo/tags/templates/","tags":"","title":"templates"},{"body":"Block current sequence for specified duration.\nInline definition Duration of the delay with appropriate suffix (e.g. ms or s). Property Type Description duration String Duration of the delay with appropriate suffix (e.g. ms or s). fromLast \u003cnone\u003e Set previous delay point reference as the reference for next delay point; it will be computed as (previous delay point or now) + duration.\nNote: property does not have any value fromNow \u003cnone\u003e Set this step invocation as the delay point reference; it will be computed as now + duration.\nNote: property does not have any value key String Key that is referenced later in awaitDelay step. If you’re introducing the delay through thinkTime do not use this property. max String Upper cap on the duration (if randomized). min String Lower cap on the duration (if randomized). random enum Randomize the duration.\nOptions:{::nomarkdown}CONSTANT: {:/}Do not randomize; use constant duration.{::nomarkdown}LINEAR: {:/}Use linearly random duration between min and max (inclusively).{::nomarkdown}NEGATIVE_EXPONENTIAL: {:/}Use negative-exponential duration with expected value of duration, capped at min and max (inclusively).{::nomarkdown}{:/} type enum Alternative way to set delay reference point. See fromNow and fromLast property setters.\nOptions:{::nomarkdown}FROM_LASTFROM_NOW{:/} ","categories":"","description":"Block current sequence for specified duration.","excerpt":"Block current sequence for specified duration.","ref":"/hyperfoil-website-demo/docs/reference/steps/step_thinktime/","tags":"","title":"thinkTime"},{"body":"Stores the current time in milliseconds as string to a session variable.\nInline definition Variable name. Property Type Description localeCountry String 2-letter ISO country code used in the formatter locale. Defaults to ‘US’. pattern String Format the timestamp using SimpleDateFormat pattern. toVar String Target variable name. ","categories":"","description":"Stores the current time in milliseconds as string to a session variable.","excerpt":"Stores the current time in milliseconds as string to a session …","ref":"/hyperfoil-website-demo/docs/reference/steps/step_timestamp/","tags":"","title":"timestamp"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hyperfoil-website-demo/tags/troubleshooting/","tags":"","title":"troubleshooting"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hyperfoil-website-demo/categories/troubleshooting/","tags":"","title":"Troubleshooting"},{"body":"Undefine variable name.\nInline definition Variable name. Property Type Description var Object Variable name. ","categories":"","description":"Undefine variable name.","excerpt":"Undefine variable name.","ref":"/hyperfoil-website-demo/docs/reference/actions/action_unset/","tags":"","title":"unset"},{"body":"Undefine variable name.\nInline definition Variable name. Property Type Description var Object Variable name. ","categories":"","description":"Undefine variable name.","excerpt":"Undefine variable name.","ref":"/hyperfoil-website-demo/docs/reference/processors/processor_unset/","tags":"","title":"unset"},{"body":"Undefine variable name.\nInline definition Variable name. Property Type Description var Object Variable name. ","categories":"","description":"Undefine variable name.","excerpt":"Undefine variable name.","ref":"/hyperfoil-website-demo/docs/reference/steps/step_unset/","tags":"","title":"unset"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hyperfoil-website-demo/tags/variables/","tags":"","title":"variables"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hyperfoil-website-demo/tags/wrk/","tags":"","title":"wrk"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hyperfoil-website-demo/tags/wrk2/","tags":"","title":"wrk2"}]