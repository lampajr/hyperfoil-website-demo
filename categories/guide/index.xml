<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Guide on Hyperfoil</title><link>https://lampajr.github.io/hyperfoil-website-demo/categories/guide/</link><description>Recent content in Guide on Hyperfoil</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://lampajr.github.io/hyperfoil-website-demo/categories/guide/index.xml" rel="self" type="application/rss+xml"/><item><title>Agents</title><link>https://lampajr.github.io/hyperfoil-website-demo/docs/user-guide/benchmark/agents/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lampajr.github.io/hyperfoil-website-demo/docs/user-guide/benchmark/agents/</guid><description>This section can be omitted in standalone mode.
Agents section forms either a list or map with arbitrary agent names and either an inline or properties-style definition:
agents: someAgent: &amp;#34;inline definition&amp;#34; otherAgent: foo: bar The definition is passed to an instance of i.h.api.deployment.Deployer which will interpret the definition. Deployer implementation is registred using the java.util.ServiceLoader and selected through the io.hyperfoil.deployer system property. The default implementation is ssh.
Common properties Property Default Description threads from benchmark Number of threads used by the agent (overrides threads in benchmark root).</description></item><item><title>Installation</title><link>https://lampajr.github.io/hyperfoil-website-demo/docs/user-guide/installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lampajr.github.io/hyperfoil-website-demo/docs/user-guide/installation/</guid><description>In this section, youâ€™ll find detailed instructions for installing and setting up Hyperfoil using various methods, including manual setup, Ansible, and Kubernetes/Openshift. Follow these guides to choose the best installation procedure for your environment.</description></item><item><title>Manual startup</title><link>https://lampajr.github.io/hyperfoil-website-demo/docs/user-guide/installation/start_manual/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lampajr.github.io/hyperfoil-website-demo/docs/user-guide/installation/start_manual/</guid><description>Hyperfoil controller is started with
bin/controller.sh Any arguments passed to the scripts will be passed as-is to the java process.
By default io.hyperfoil.deployer is set to ssh which means that the controller will deploy agents over SSH, based on the agents configurion. This requires that the user account running the controller must have public-key SSH authorization set up using key $HOME/.ssh/id_rsa. The user also has to be able to copy files to the directory set in agent definition (by default /tmp/hyperfoil) using SCP - Hyperfoil automatically synchronizes library files in this folder with the currently running instance and then executes the agent.</description></item><item><title>Benchmark</title><link>https://lampajr.github.io/hyperfoil-website-demo/docs/user-guide/benchmark/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lampajr.github.io/hyperfoil-website-demo/docs/user-guide/benchmark/</guid><description>In Hyperfoil, defining a benchmark involves structuring scenarios, phases, variables and other components to simulate realistic user behavior and workload patterns. This section provides a detailed breakdown of each component involved in defining a benchmark.</description></item><item><title>HTTP</title><link>https://lampajr.github.io/hyperfoil-website-demo/docs/user-guide/benchmark/http/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lampajr.github.io/hyperfoil-website-demo/docs/user-guide/benchmark/http/</guid><description>All servers that Hyperfoil should contact must be declared in this section. Before the benchmark starts Hyperfoil agents will open connections to the target servers; if this connection fails the benchmark is terminated immediatelly.
You can either declare single target server (the default one) within this section or more of them:
http: host: http://example.com ... http: - host: http://example.com sharedConnections: 100 - host: http://example.com:8080 sharedConnections: 50 HTTP configuration has these properties:</description></item><item><title>K8s/Openshift deployment</title><link>https://lampajr.github.io/hyperfoil-website-demo/docs/user-guide/installation/k8s/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lampajr.github.io/hyperfoil-website-demo/docs/user-guide/installation/k8s/</guid><description>A convenient alternative to running Hyperfoil on hosts with SSH access is deploying it in Kubernetes or Openshift environment. The recommended way to install it using an operator in your Openshift console - just go to Operators - OperatorHub and search for &amp;lsquo;hyperfoil&amp;rsquo;, and follow the installation wizard. Alternatively you can deploy the controller manually.
In order to start a Hyperfoil Controller instance in your cluster, create a new namespace hyperfoil: Go to Operators - Installed Operators and open Hyperfoil.</description></item><item><title>Manual k8s/Openshift deployment</title><link>https://lampajr.github.io/hyperfoil-website-demo/docs/user-guide/installation/k8s_manual/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lampajr.github.io/hyperfoil-website-demo/docs/user-guide/installation/k8s_manual/</guid><description>If you cannot use the operator or if you&amp;rsquo;re running vanilla Kubernetes you can define all the resource manually. You deploy only the controller; each agent is then started, when the run starts, as a pod in the same namespace and stopped when the run completes.
Following steps install Hyperfoil controller in Openshift, assuming that you have all the required priviledges. With vanilla Kubernetes you might have to replace the route with an appropriate ingress.</description></item><item><title>Phases</title><link>https://lampajr.github.io/hyperfoil-website-demo/docs/user-guide/benchmark/phases/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lampajr.github.io/hyperfoil-website-demo/docs/user-guide/benchmark/phases/</guid><description>You might want to simulate several types of workloads at once: e.g. in an eshop users would come browsing or buying products, and operators would restock the virtual warehouse. Also, driving constant load may not be the best way to run the benchmark: often you want to slowly ramp the load up to let the system adjust (scale up, perform JIT, fill pools) and push the full load only after that.</description></item><item><title>User Guide</title><link>https://lampajr.github.io/hyperfoil-website-demo/docs/user-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lampajr.github.io/hyperfoil-website-demo/docs/user-guide/</guid><description>Welcome to the Hyperfoil User Guide, your comprehensive resource for everything you need to get started. This section covers installation, detailed instructions on defining benchmarks, and troubleshooting tips to help you resolve common issues. Whether you&amp;rsquo;re a beginner or an advanced user, you&amp;rsquo;ll find valuable information to enhance your performance testing with Hyperfoil.</description></item><item><title>Ansible startup</title><link>https://lampajr.github.io/hyperfoil-website-demo/docs/user-guide/installation/ansible/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lampajr.github.io/hyperfoil-website-demo/docs/user-guide/installation/ansible/</guid><description>You can fetch release, distribute and start the cluster using Ansible Galaxy scripts; setup, test, shutdown
First, get the scripts:
ansible-galaxy install hyperfoil.hyperfoil_setup,{{ site.last_release.galaxy_version }} ansible-galaxy install hyperfoil.hyperfoil_shutdown,{{ site.last_release.galaxy_version }} ansible-galaxy install hyperfoil.hyperfoil_test,{{ site.last_release.galaxy_version }} Now, edit your hosts file, it could look like this:
[hyperfoil-controller] controller ansible_host=localhost [hyperfoil-agent] agent-1 ansible_host=localhost Note You can add more agents by duplicating the last line with agent-2 etc. Prepare your playbook; here is a short example that starts the controller, uploads and starts simple benchmark (the templating engine replaces the agents in benchmark script based on Ansible hosts) and waits for its completion.</description></item><item><title>Examples</title><link>https://lampajr.github.io/hyperfoil-website-demo/docs/user-guide/examples/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lampajr.github.io/hyperfoil-website-demo/docs/user-guide/examples/</guid><description>If you haven&amp;rsquo;t checked the Getting started guide we strongly recommend going there first.
Below you&amp;rsquo;ll see commented examples of configuration; contrary to the Getting started guide these don&amp;rsquo;t present scenarios but rather list the various configuration options by example.
httpRequest You will most likely use step httpRequest in each of your scenarios, and there&amp;rsquo;s many ways to send a request.
# This example should demonstrate various ways to configure one of the most important # steps - the httpRequest.</description></item><item><title>Scenario</title><link>https://lampajr.github.io/hyperfoil-website-demo/docs/user-guide/benchmark/scenario/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lampajr.github.io/hyperfoil-website-demo/docs/user-guide/benchmark/scenario/</guid><description>Scenario Scenario is a set of sequences. The sequence is a block of sequentially executed steps. Contrary to steps in a sequence the sequences within a scenario do not need to be executed sequentially.
The scenario defines one or more initialSequences that are enabled from the beginning and other sequences that must be enabled by any of the previously executed sequences. To be more precise it is not the sequence that is enabled but a sequence instance as we can run a sequence multiple times in parallel (on different data).</description></item><item><title>Troubleshooting</title><link>https://lampajr.github.io/hyperfoil-website-demo/docs/user-guide/troubleshooting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lampajr.github.io/hyperfoil-website-demo/docs/user-guide/troubleshooting/</guid><description>It doesn&amp;rsquo;t work. Can you help me? The first step to identifying any issue is getting a verbose log - setting logging level to TRACE. How exactly you do that depends on the way you deploy Hyperfoil:
If you use CLI and the start-local command, just run it as start-local -l TRACE which sets the default logging level. You&amp;rsquo;ll find the log in /tmp/hyperfoil.local.log by default.
If you run Hyperfoil manually in standalone mode (non-clustered) the agent will run in the same JVM as the controller.</description></item><item><title>Variables</title><link>https://lampajr.github.io/hyperfoil-website-demo/docs/user-guide/benchmark/variables/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lampajr.github.io/hyperfoil-website-demo/docs/user-guide/benchmark/variables/</guid><description>All but the simplest scenarios will use session variables. Hyperfoil sports steps that generate values into these variables (randomInt, randomItem, &amp;hellip;), processors that write data from other sources to variables (store, array) and many places that read variables and use the values to perform some operations (httpRequest.path ) or alter control flow.
Hyperfoil uses different types of variables (slots in the session) for integer variables and generic objects (commonly strings). When a numeric value is received as a string (e.</description></item><item><title>Templates</title><link>https://lampajr.github.io/hyperfoil-website-demo/docs/user-guide/benchmark/templates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lampajr.github.io/hyperfoil-website-demo/docs/user-guide/benchmark/templates/</guid><description>It is often useful to keep a single benchmark in version control but change parts of it depending on the infrastructure where it is executed or intended load. Since version 0.18 Hyperfoil supports parametrization of the benchmark through templates.
Inspired by other (more complex) YAML templating systems we decided to use YAML tags to pre-process the YAML. Templating happens even before applying the YAML nodes onto BenchmarkBuilder, therefore it is not possible to do that programmatically or with the serialized form.</description></item><item><title>Hooks</title><link>https://lampajr.github.io/hyperfoil-website-demo/docs/user-guide/benchmark/hooks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lampajr.github.io/hyperfoil-website-demo/docs/user-guide/benchmark/hooks/</guid><description>It might be useful to run certain scripts before and after the run, e.g. starting some infrastructure, preloading database, gathering CPU stats during the test and so on. That&amp;rsquo;s why Hyperfoil introduces pre- and post-hooks to the run.
Some scripts are not specific to the test being run - these should be deployed on controller as files in *root*/hooks/pre/ and *root*/hooks/post directories where root is controller&amp;rsquo;s root directory, /tmp/hyperfoil/ by default.</description></item><item><title>Ergonomics</title><link>https://lampajr.github.io/hyperfoil-website-demo/docs/user-guide/benchmark/ergonomics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lampajr.github.io/hyperfoil-website-demo/docs/user-guide/benchmark/ergonomics/</guid><description>This section hosts only single property at this moment:
Property Default Description repeatCookies true Automatically parse cookies from HTTP responses, store them in session and resend them with subsequent requests. userAgentFromSession true Add user-agent header to each request, holding the agent name and session id. autoRangeCheck true Mark 4xx and 5xx responses as invalid. You can also turn this off in each step. stopOnInvalid true When the session receives an invalid response it does not execute any further steps, cancelling all requests and stopping immediately.</description></item></channel></rss>